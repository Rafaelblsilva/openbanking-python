# coding: utf-8

"""
    API Investments - Open Finance Brasil

    Estas APIs visam o compartilhamento de dados sobre Investimentos e suas características entre as Instituições Financeiras participantes do Open Finance Brasil   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvestmentsFixedIncomeBankInvestmentConditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minimum_amount': 'str',
        'redemption_term': 'EnumInvestmentsFixedIncomeBankRedemptionTerm',
        'expiration_period': 'EnumExpirationGracePeriod',
        'grace_period': 'EnumExpirationGracePeriod'
    }

    attribute_map = {
        'minimum_amount': 'minimumAmount',
        'redemption_term': 'redemptionTerm',
        'expiration_period': 'expirationPeriod',
        'grace_period': 'gracePeriod'
    }

    def __init__(self, minimum_amount=None, redemption_term=None, expiration_period=None, grace_period=None):  # noqa: E501
        """InvestmentsFixedIncomeBankInvestmentConditions - a model defined in Swagger"""  # noqa: E501
        self._minimum_amount = None
        self._redemption_term = None
        self._expiration_period = None
        self._grace_period = None
        self.discriminator = None
        self.minimum_amount = minimum_amount
        self.redemption_term = redemption_term
        self.expiration_period = expiration_period
        self.grace_period = grace_period

    @property
    def minimum_amount(self):
        """Gets the minimum_amount of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501

        Valor mínimo de aplicação no ativo.  # noqa: E501

        :return: The minimum_amount of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :rtype: str
        """
        return self._minimum_amount

    @minimum_amount.setter
    def minimum_amount(self, minimum_amount):
        """Sets the minimum_amount of this InvestmentsFixedIncomeBankInvestmentConditions.

        Valor mínimo de aplicação no ativo.  # noqa: E501

        :param minimum_amount: The minimum_amount of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :type: str
        """
        if minimum_amount is None:
            raise ValueError("Invalid value for `minimum_amount`, must not be `None`")  # noqa: E501

        self._minimum_amount = minimum_amount

    @property
    def redemption_term(self):
        """Gets the redemption_term of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501


        :return: The redemption_term of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :rtype: EnumInvestmentsFixedIncomeBankRedemptionTerm
        """
        return self._redemption_term

    @redemption_term.setter
    def redemption_term(self, redemption_term):
        """Sets the redemption_term of this InvestmentsFixedIncomeBankInvestmentConditions.


        :param redemption_term: The redemption_term of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :type: EnumInvestmentsFixedIncomeBankRedemptionTerm
        """
        if redemption_term is None:
            raise ValueError("Invalid value for `redemption_term`, must not be `None`")  # noqa: E501

        self._redemption_term = redemption_term

    @property
    def expiration_period(self):
        """Gets the expiration_period of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501


        :return: The expiration_period of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :rtype: EnumExpirationGracePeriod
        """
        return self._expiration_period

    @expiration_period.setter
    def expiration_period(self, expiration_period):
        """Sets the expiration_period of this InvestmentsFixedIncomeBankInvestmentConditions.


        :param expiration_period: The expiration_period of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :type: EnumExpirationGracePeriod
        """
        if expiration_period is None:
            raise ValueError("Invalid value for `expiration_period`, must not be `None`")  # noqa: E501

        self._expiration_period = expiration_period

    @property
    def grace_period(self):
        """Gets the grace_period of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501


        :return: The grace_period of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :rtype: EnumExpirationGracePeriod
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this InvestmentsFixedIncomeBankInvestmentConditions.


        :param grace_period: The grace_period of this InvestmentsFixedIncomeBankInvestmentConditions.  # noqa: E501
        :type: EnumExpirationGracePeriod
        """
        if grace_period is None:
            raise ValueError("Invalid value for `grace_period`, must not be `None`")  # noqa: E501

        self._grace_period = grace_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentsFixedIncomeBankInvestmentConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentsFixedIncomeBankInvestmentConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
