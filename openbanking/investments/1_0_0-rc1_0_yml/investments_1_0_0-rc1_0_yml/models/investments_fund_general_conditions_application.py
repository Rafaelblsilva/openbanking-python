# coding: utf-8

"""
    API Investments - Open Finance Brasil

    Estas APIs visam o compartilhamento de dados sobre Investimentos e suas características entre as Instituições Financeiras participantes do Open Finance Brasil   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvestmentsFundGeneralConditionsApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quotation_days': 'int',
        'quotation_term': 'EnumInvestmentsFundGeneralConditionsTermType'
    }

    attribute_map = {
        'quotation_days': 'quotationDays',
        'quotation_term': 'quotationTerm'
    }

    def __init__(self, quotation_days=None, quotation_term=None):  # noqa: E501
        """InvestmentsFundGeneralConditionsApplication - a model defined in Swagger"""  # noqa: E501
        self._quotation_days = None
        self._quotation_term = None
        self.discriminator = None
        self.quotation_days = quotation_days
        self.quotation_term = quotation_term

    @property
    def quotation_days(self):
        """Gets the quotation_days of this InvestmentsFundGeneralConditionsApplication.  # noqa: E501

        Prazo em dias indicado no regulamento do fundo para a conversão do dinheiro em cotas do fundo.  # noqa: E501

        :return: The quotation_days of this InvestmentsFundGeneralConditionsApplication.  # noqa: E501
        :rtype: int
        """
        return self._quotation_days

    @quotation_days.setter
    def quotation_days(self, quotation_days):
        """Sets the quotation_days of this InvestmentsFundGeneralConditionsApplication.

        Prazo em dias indicado no regulamento do fundo para a conversão do dinheiro em cotas do fundo.  # noqa: E501

        :param quotation_days: The quotation_days of this InvestmentsFundGeneralConditionsApplication.  # noqa: E501
        :type: int
        """
        if quotation_days is None:
            raise ValueError("Invalid value for `quotation_days`, must not be `None`")  # noqa: E501

        self._quotation_days = quotation_days

    @property
    def quotation_term(self):
        """Gets the quotation_term of this InvestmentsFundGeneralConditionsApplication.  # noqa: E501


        :return: The quotation_term of this InvestmentsFundGeneralConditionsApplication.  # noqa: E501
        :rtype: EnumInvestmentsFundGeneralConditionsTermType
        """
        return self._quotation_term

    @quotation_term.setter
    def quotation_term(self, quotation_term):
        """Sets the quotation_term of this InvestmentsFundGeneralConditionsApplication.


        :param quotation_term: The quotation_term of this InvestmentsFundGeneralConditionsApplication.  # noqa: E501
        :type: EnumInvestmentsFundGeneralConditionsTermType
        """
        if quotation_term is None:
            raise ValueError("Invalid value for `quotation_term`, must not be `None`")  # noqa: E501

        self._quotation_term = quotation_term

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentsFundGeneralConditionsApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentsFundGeneralConditionsApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
