# coding: utf-8

"""
    API Investments - Open Finance Brasil

    Estas APIs visam o compartilhamento de dados sobre Investimentos e suas características entre as Instituições Financeiras participantes do Open Finance Brasil   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumInvestmentsFundFeesPerformanceFeeBenchmark(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CDI = "CDI"
    IBOVESPA_FECHAMENTO = "IBOVESPA_FECHAMENTO"
    IBOVESPA = "IBOVESPA"
    IMA_B = "IMA_B"
    IBRX = "IBRX"
    IPCA = "IPCA"
    IMA_B_5 = "IMA_B_5"
    DOLAR_PTAX = "DOLAR_PTAX"
    IBRX_100 = "IBRX_100"
    TAXA_SELIC = "TAXA_SELIC"
    IMA_B_5_PLUS = "IMA_B_5_PLUS"
    IBOVESPA_MEDIO = "IBOVESPA_MEDIO"
    IRF_M = "IRF_M"
    IMA_GERAL = "IMA_GERAL"
    INPC = "INPC"
    IGP_M = "IGP_M"
    SMLL_SMALL_CAP = "SMLL_SMALL_CAP"
    IDA_IPCA = "IDA_IPCA"
    ISE = "ISE"
    IRF_M_1 = "IRF_M_1"
    IBRX_50 = "IBRX_50"
    IDIV_DIVIDENDOS = "IDIV_DIVIDENDOS"
    IFIX = "IFIX"
    GLOBAL_BDRX = "GLOBAL_BDRX"
    IMA_S = "IMA_S"
    IDKA_IPCA_2A = "IDKA_IPCA_2A"
    IRF_M_1_PLUS = "IRF_M_1_PLUS"
    OUTROS = "OUTROS"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnumInvestmentsFundFeesPerformanceFeeBenchmark - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumInvestmentsFundFeesPerformanceFeeBenchmark, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumInvestmentsFundFeesPerformanceFeeBenchmark):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
