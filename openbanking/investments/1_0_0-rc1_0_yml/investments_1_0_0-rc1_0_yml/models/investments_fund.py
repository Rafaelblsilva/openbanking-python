# coding: utf-8

"""
    API Investments - Open Finance Brasil

    Estas APIs visam o compartilhamento de dados sobre Investimentos e suas características entre as Instituições Financeiras participantes do Open Finance Brasil   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvestmentsFund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'Participant',
        'name': 'str',
        'cnpj_number': 'str',
        'isin_code': 'str',
        'admin': 'InvestmentsFundAdmin',
        'fund_manager': 'InvestmentsFundFundManager',
        'anbima_category': 'EnumInvestmentsFundProductAnbimaCategory',
        'fees': 'InvestmentsFundFees',
        'general_conditions': 'InvestmentsFundGeneralConditions',
        'taxation': 'EnumInvestmentsFundTaxation'
    }

    attribute_map = {
        'participant': 'participant',
        'name': 'name',
        'cnpj_number': 'cnpjNumber',
        'isin_code': 'isinCode',
        'admin': 'admin',
        'fund_manager': 'fundManager',
        'anbima_category': 'anbimaCategory',
        'fees': 'fees',
        'general_conditions': 'generalConditions',
        'taxation': 'taxation'
    }

    def __init__(self, participant=None, name=None, cnpj_number=None, isin_code=None, admin=None, fund_manager=None, anbima_category=None, fees=None, general_conditions=None, taxation=None):  # noqa: E501
        """InvestmentsFund - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._name = None
        self._cnpj_number = None
        self._isin_code = None
        self._admin = None
        self._fund_manager = None
        self._anbima_category = None
        self._fees = None
        self._general_conditions = None
        self._taxation = None
        self.discriminator = None
        self.participant = participant
        self.name = name
        self.cnpj_number = cnpj_number
        if isin_code is not None:
            self.isin_code = isin_code
        self.admin = admin
        self.fund_manager = fund_manager
        self.anbima_category = anbima_category
        self.fees = fees
        self.general_conditions = general_conditions
        self.taxation = taxation

    @property
    def participant(self):
        """Gets the participant of this InvestmentsFund.  # noqa: E501


        :return: The participant of this InvestmentsFund.  # noqa: E501
        :rtype: Participant
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this InvestmentsFund.


        :param participant: The participant of this InvestmentsFund.  # noqa: E501
        :type: Participant
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def name(self):
        """Gets the name of this InvestmentsFund.  # noqa: E501

        Nome oficial do fundo de investimento.  # noqa: E501

        :return: The name of this InvestmentsFund.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvestmentsFund.

        Nome oficial do fundo de investimento.  # noqa: E501

        :param name: The name of this InvestmentsFund.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cnpj_number(self):
        """Gets the cnpj_number of this InvestmentsFund.  # noqa: E501

        CNPJ do fundo de investimento.  # noqa: E501

        :return: The cnpj_number of this InvestmentsFund.  # noqa: E501
        :rtype: str
        """
        return self._cnpj_number

    @cnpj_number.setter
    def cnpj_number(self, cnpj_number):
        """Sets the cnpj_number of this InvestmentsFund.

        CNPJ do fundo de investimento.  # noqa: E501

        :param cnpj_number: The cnpj_number of this InvestmentsFund.  # noqa: E501
        :type: str
        """
        if cnpj_number is None:
            raise ValueError("Invalid value for `cnpj_number`, must not be `None`")  # noqa: E501

        self._cnpj_number = cnpj_number

    @property
    def isin_code(self):
        """Gets the isin_code of this InvestmentsFund.  # noqa: E501

        Código universal que identifica cada valor mobiliário ou instrumento financeiro, conforme Norma ISO 6166.<br><br>DEFINIÇÃO&#58;O ISIN (International Securities Identification Number) é um código que identifica um valor mobiliário, conforme a norma ISO 6166.<br>ESTRUTURA<br>O ISIN é um código alfanumérico que possui 12 caracteres com a seguinte estrutura&#58;<ul><li>um prefixo, composto de 2 caracteres alfa, que identifica o código do país (Norma ISO 3166);</li><li>o número básico, composto de 9 caracteres alfabéticos ou numéricos em sua extensão;</li><li>um dígito numérico de controle.</li></ul>  # noqa: E501

        :return: The isin_code of this InvestmentsFund.  # noqa: E501
        :rtype: str
        """
        return self._isin_code

    @isin_code.setter
    def isin_code(self, isin_code):
        """Sets the isin_code of this InvestmentsFund.

        Código universal que identifica cada valor mobiliário ou instrumento financeiro, conforme Norma ISO 6166.<br><br>DEFINIÇÃO&#58;O ISIN (International Securities Identification Number) é um código que identifica um valor mobiliário, conforme a norma ISO 6166.<br>ESTRUTURA<br>O ISIN é um código alfanumérico que possui 12 caracteres com a seguinte estrutura&#58;<ul><li>um prefixo, composto de 2 caracteres alfa, que identifica o código do país (Norma ISO 3166);</li><li>o número básico, composto de 9 caracteres alfabéticos ou numéricos em sua extensão;</li><li>um dígito numérico de controle.</li></ul>  # noqa: E501

        :param isin_code: The isin_code of this InvestmentsFund.  # noqa: E501
        :type: str
        """

        self._isin_code = isin_code

    @property
    def admin(self):
        """Gets the admin of this InvestmentsFund.  # noqa: E501


        :return: The admin of this InvestmentsFund.  # noqa: E501
        :rtype: InvestmentsFundAdmin
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this InvestmentsFund.


        :param admin: The admin of this InvestmentsFund.  # noqa: E501
        :type: InvestmentsFundAdmin
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    @property
    def fund_manager(self):
        """Gets the fund_manager of this InvestmentsFund.  # noqa: E501


        :return: The fund_manager of this InvestmentsFund.  # noqa: E501
        :rtype: InvestmentsFundFundManager
        """
        return self._fund_manager

    @fund_manager.setter
    def fund_manager(self, fund_manager):
        """Sets the fund_manager of this InvestmentsFund.


        :param fund_manager: The fund_manager of this InvestmentsFund.  # noqa: E501
        :type: InvestmentsFundFundManager
        """
        if fund_manager is None:
            raise ValueError("Invalid value for `fund_manager`, must not be `None`")  # noqa: E501

        self._fund_manager = fund_manager

    @property
    def anbima_category(self):
        """Gets the anbima_category of this InvestmentsFund.  # noqa: E501


        :return: The anbima_category of this InvestmentsFund.  # noqa: E501
        :rtype: EnumInvestmentsFundProductAnbimaCategory
        """
        return self._anbima_category

    @anbima_category.setter
    def anbima_category(self, anbima_category):
        """Sets the anbima_category of this InvestmentsFund.


        :param anbima_category: The anbima_category of this InvestmentsFund.  # noqa: E501
        :type: EnumInvestmentsFundProductAnbimaCategory
        """
        if anbima_category is None:
            raise ValueError("Invalid value for `anbima_category`, must not be `None`")  # noqa: E501

        self._anbima_category = anbima_category

    @property
    def fees(self):
        """Gets the fees of this InvestmentsFund.  # noqa: E501


        :return: The fees of this InvestmentsFund.  # noqa: E501
        :rtype: InvestmentsFundFees
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this InvestmentsFund.


        :param fees: The fees of this InvestmentsFund.  # noqa: E501
        :type: InvestmentsFundFees
        """
        if fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501

        self._fees = fees

    @property
    def general_conditions(self):
        """Gets the general_conditions of this InvestmentsFund.  # noqa: E501


        :return: The general_conditions of this InvestmentsFund.  # noqa: E501
        :rtype: InvestmentsFundGeneralConditions
        """
        return self._general_conditions

    @general_conditions.setter
    def general_conditions(self, general_conditions):
        """Sets the general_conditions of this InvestmentsFund.


        :param general_conditions: The general_conditions of this InvestmentsFund.  # noqa: E501
        :type: InvestmentsFundGeneralConditions
        """
        if general_conditions is None:
            raise ValueError("Invalid value for `general_conditions`, must not be `None`")  # noqa: E501

        self._general_conditions = general_conditions

    @property
    def taxation(self):
        """Gets the taxation of this InvestmentsFund.  # noqa: E501


        :return: The taxation of this InvestmentsFund.  # noqa: E501
        :rtype: EnumInvestmentsFundTaxation
        """
        return self._taxation

    @taxation.setter
    def taxation(self, taxation):
        """Sets the taxation of this InvestmentsFund.


        :param taxation: The taxation of this InvestmentsFund.  # noqa: E501
        :type: EnumInvestmentsFundTaxation
        """
        if taxation is None:
            raise ValueError("Invalid value for `taxation`, must not be `None`")  # noqa: E501

        self._taxation = taxation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentsFund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentsFund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
