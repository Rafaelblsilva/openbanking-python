# coding: utf-8

"""
    API Investments - Open Finance Brasil

    Estas APIs visam o compartilhamento de dados sobre Investimentos e suas características entre as Instituições Financeiras participantes do Open Finance Brasil   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvestmentsFundFees(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_admin_fee': 'str',
        'entry_fee': 'str',
        'performance_fee': 'InvestmentsFundFeesPerformanceFee',
        'exit_fee': 'str'
    }

    attribute_map = {
        'max_admin_fee': 'maxAdminFee',
        'entry_fee': 'entryFee',
        'performance_fee': 'performanceFee',
        'exit_fee': 'exitFee'
    }

    def __init__(self, max_admin_fee=None, entry_fee=None, performance_fee=None, exit_fee=None):  # noqa: E501
        """InvestmentsFundFees - a model defined in Swagger"""  # noqa: E501
        self._max_admin_fee = None
        self._entry_fee = None
        self._performance_fee = None
        self._exit_fee = None
        self.discriminator = None
        self.max_admin_fee = max_admin_fee
        if entry_fee is not None:
            self.entry_fee = entry_fee
        if performance_fee is not None:
            self.performance_fee = performance_fee
        if exit_fee is not None:
            self.exit_fee = exit_fee

    @property
    def max_admin_fee(self):
        """Gets the max_admin_fee of this InvestmentsFundFees.  # noqa: E501

        Taxa máxima cobrada para remunerar o administrador e os demais prestadores de serviços do fundo. Caso não haja a difererença de Máximo e Mínimo, considerar a taxa de administração do fundo.  # noqa: E501

        :return: The max_admin_fee of this InvestmentsFundFees.  # noqa: E501
        :rtype: str
        """
        return self._max_admin_fee

    @max_admin_fee.setter
    def max_admin_fee(self, max_admin_fee):
        """Sets the max_admin_fee of this InvestmentsFundFees.

        Taxa máxima cobrada para remunerar o administrador e os demais prestadores de serviços do fundo. Caso não haja a difererença de Máximo e Mínimo, considerar a taxa de administração do fundo.  # noqa: E501

        :param max_admin_fee: The max_admin_fee of this InvestmentsFundFees.  # noqa: E501
        :type: str
        """
        if max_admin_fee is None:
            raise ValueError("Invalid value for `max_admin_fee`, must not be `None`")  # noqa: E501

        self._max_admin_fee = max_admin_fee

    @property
    def entry_fee(self):
        """Gets the entry_fee of this InvestmentsFundFees.  # noqa: E501

        Taxa cobrada no momento da aplicação, que incide sobre o valor investido no fundo.  # noqa: E501

        :return: The entry_fee of this InvestmentsFundFees.  # noqa: E501
        :rtype: str
        """
        return self._entry_fee

    @entry_fee.setter
    def entry_fee(self, entry_fee):
        """Sets the entry_fee of this InvestmentsFundFees.

        Taxa cobrada no momento da aplicação, que incide sobre o valor investido no fundo.  # noqa: E501

        :param entry_fee: The entry_fee of this InvestmentsFundFees.  # noqa: E501
        :type: str
        """

        self._entry_fee = entry_fee

    @property
    def performance_fee(self):
        """Gets the performance_fee of this InvestmentsFundFees.  # noqa: E501


        :return: The performance_fee of this InvestmentsFundFees.  # noqa: E501
        :rtype: InvestmentsFundFeesPerformanceFee
        """
        return self._performance_fee

    @performance_fee.setter
    def performance_fee(self, performance_fee):
        """Sets the performance_fee of this InvestmentsFundFees.


        :param performance_fee: The performance_fee of this InvestmentsFundFees.  # noqa: E501
        :type: InvestmentsFundFeesPerformanceFee
        """

        self._performance_fee = performance_fee

    @property
    def exit_fee(self):
        """Gets the exit_fee of this InvestmentsFundFees.  # noqa: E501

        Taxa paga pelo cotista ao resgatar recursos de um fundo.  # noqa: E501

        :return: The exit_fee of this InvestmentsFundFees.  # noqa: E501
        :rtype: str
        """
        return self._exit_fee

    @exit_fee.setter
    def exit_fee(self, exit_fee):
        """Sets the exit_fee of this InvestmentsFundFees.

        Taxa paga pelo cotista ao resgatar recursos de um fundo.  # noqa: E501

        :param exit_fee: The exit_fee of this InvestmentsFundFees.  # noqa: E501
        :type: str
        """

        self._exit_fee = exit_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentsFundFees, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentsFundFees):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
