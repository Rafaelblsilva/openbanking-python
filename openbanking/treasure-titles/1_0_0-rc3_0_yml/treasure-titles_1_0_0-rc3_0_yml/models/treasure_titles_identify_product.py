# coding: utf-8

"""
    API Treasure Titles - Open Finance Brasil

    API de informações de operações de Títulos do Tesouro Direto Open Finance Brasil – Fase 4. API que retorna informações de operações de investimento do tipo Títulos do Tesouro Direto mantidas nas instituições transmissoras por seus clientes, incluindo dados como informações do produto, quantidade, saldos em posição do cliente e movimentações financeiras. Não possui segregação entre pessoa natural e pessoa jurídica. Requer consentimento do cliente para todos os endpoints. Devem ser considerados como escopo de exposição todos os títulos ofertados pelo Tesouro Direto. A exposição se dará por cada operação de títulos do Tesouro Direto contratada pelo cliente.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc3.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TreasureTitlesIdentifyProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'isin_code': 'TreasureTitlesIsinCode',
        'product_name': 'TreasureTitlesProductName',
        'remuneration': 'TreasureTitlesRemuneration',
        'due_date': 'TreasureTitlesDueDate',
        'purchase_date': 'TreasureTitlesPurchaseDate',
        'voucher_payment_indicator': 'TreasureTitlesVoucherPaymentIndicator',
        'voucher_payment_periodicity': 'TreasureTitlesVoucherPaymentPeriodicity',
        'voucher_payment_periodicity_additional_info': 'TreasureTitlesVoucherPaymentPeriodicityAdditionalInfo'
    }

    attribute_map = {
        'isin_code': 'isinCode',
        'product_name': 'productName',
        'remuneration': 'remuneration',
        'due_date': 'dueDate',
        'purchase_date': 'purchaseDate',
        'voucher_payment_indicator': 'voucherPaymentIndicator',
        'voucher_payment_periodicity': 'voucherPaymentPeriodicity',
        'voucher_payment_periodicity_additional_info': 'voucherPaymentPeriodicityAdditionalInfo'
    }

    def __init__(self, isin_code=None, product_name=None, remuneration=None, due_date=None, purchase_date=None, voucher_payment_indicator=None, voucher_payment_periodicity=None, voucher_payment_periodicity_additional_info=None):  # noqa: E501
        """TreasureTitlesIdentifyProduct - a model defined in Swagger"""  # noqa: E501
        self._isin_code = None
        self._product_name = None
        self._remuneration = None
        self._due_date = None
        self._purchase_date = None
        self._voucher_payment_indicator = None
        self._voucher_payment_periodicity = None
        self._voucher_payment_periodicity_additional_info = None
        self.discriminator = None
        self.isin_code = isin_code
        self.product_name = product_name
        self.remuneration = remuneration
        self.due_date = due_date
        self.purchase_date = purchase_date
        self.voucher_payment_indicator = voucher_payment_indicator
        if voucher_payment_periodicity is not None:
            self.voucher_payment_periodicity = voucher_payment_periodicity
        if voucher_payment_periodicity_additional_info is not None:
            self.voucher_payment_periodicity_additional_info = voucher_payment_periodicity_additional_info

    @property
    def isin_code(self):
        """Gets the isin_code of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The isin_code of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesIsinCode
        """
        return self._isin_code

    @isin_code.setter
    def isin_code(self, isin_code):
        """Sets the isin_code of this TreasureTitlesIdentifyProduct.


        :param isin_code: The isin_code of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesIsinCode
        """
        if isin_code is None:
            raise ValueError("Invalid value for `isin_code`, must not be `None`")  # noqa: E501

        self._isin_code = isin_code

    @property
    def product_name(self):
        """Gets the product_name of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The product_name of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesProductName
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this TreasureTitlesIdentifyProduct.


        :param product_name: The product_name of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesProductName
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def remuneration(self):
        """Gets the remuneration of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The remuneration of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesRemuneration
        """
        return self._remuneration

    @remuneration.setter
    def remuneration(self, remuneration):
        """Sets the remuneration of this TreasureTitlesIdentifyProduct.


        :param remuneration: The remuneration of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesRemuneration
        """
        if remuneration is None:
            raise ValueError("Invalid value for `remuneration`, must not be `None`")  # noqa: E501

        self._remuneration = remuneration

    @property
    def due_date(self):
        """Gets the due_date of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The due_date of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesDueDate
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this TreasureTitlesIdentifyProduct.


        :param due_date: The due_date of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesDueDate
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def purchase_date(self):
        """Gets the purchase_date of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The purchase_date of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesPurchaseDate
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this TreasureTitlesIdentifyProduct.


        :param purchase_date: The purchase_date of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesPurchaseDate
        """
        if purchase_date is None:
            raise ValueError("Invalid value for `purchase_date`, must not be `None`")  # noqa: E501

        self._purchase_date = purchase_date

    @property
    def voucher_payment_indicator(self):
        """Gets the voucher_payment_indicator of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The voucher_payment_indicator of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesVoucherPaymentIndicator
        """
        return self._voucher_payment_indicator

    @voucher_payment_indicator.setter
    def voucher_payment_indicator(self, voucher_payment_indicator):
        """Sets the voucher_payment_indicator of this TreasureTitlesIdentifyProduct.


        :param voucher_payment_indicator: The voucher_payment_indicator of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesVoucherPaymentIndicator
        """
        if voucher_payment_indicator is None:
            raise ValueError("Invalid value for `voucher_payment_indicator`, must not be `None`")  # noqa: E501

        self._voucher_payment_indicator = voucher_payment_indicator

    @property
    def voucher_payment_periodicity(self):
        """Gets the voucher_payment_periodicity of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The voucher_payment_periodicity of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesVoucherPaymentPeriodicity
        """
        return self._voucher_payment_periodicity

    @voucher_payment_periodicity.setter
    def voucher_payment_periodicity(self, voucher_payment_periodicity):
        """Sets the voucher_payment_periodicity of this TreasureTitlesIdentifyProduct.


        :param voucher_payment_periodicity: The voucher_payment_periodicity of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesVoucherPaymentPeriodicity
        """

        self._voucher_payment_periodicity = voucher_payment_periodicity

    @property
    def voucher_payment_periodicity_additional_info(self):
        """Gets the voucher_payment_periodicity_additional_info of this TreasureTitlesIdentifyProduct.  # noqa: E501


        :return: The voucher_payment_periodicity_additional_info of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :rtype: TreasureTitlesVoucherPaymentPeriodicityAdditionalInfo
        """
        return self._voucher_payment_periodicity_additional_info

    @voucher_payment_periodicity_additional_info.setter
    def voucher_payment_periodicity_additional_info(self, voucher_payment_periodicity_additional_info):
        """Sets the voucher_payment_periodicity_additional_info of this TreasureTitlesIdentifyProduct.


        :param voucher_payment_periodicity_additional_info: The voucher_payment_periodicity_additional_info of this TreasureTitlesIdentifyProduct.  # noqa: E501
        :type: TreasureTitlesVoucherPaymentPeriodicityAdditionalInfo
        """

        self._voucher_payment_periodicity_additional_info = voucher_payment_periodicity_additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TreasureTitlesIdentifyProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreasureTitlesIdentifyProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
