# coding: utf-8

"""
    API Treasure Titles - Open Finance Brasil

    API de informações de operações de Títulos do Tesouro Direto Open Finance Brasil – Fase 4. API que retorna informações de operações de investimento do tipo Títulos do Tesouro Direto mantidas nas instituições transmissoras por seus clientes, incluindo dados como informações do produto, quantidade, saldos em posição do cliente e movimentações financeiras. Não possui segregação entre pessoa natural e pessoa jurídica. Requer consentimento do cliente para todos os endpoints. Devem ser considerados como escopo de exposição todos os títulos ofertados pelo Tesouro Direto. A exposição se dará por cada operação de títulos do Tesouro Direto contratada pelo cliente.   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TreasureTitlesRemuneration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indexer': 'TreasureTitlesIndexer',
        'indexer_additional_info': 'TreasureTitlesIndexerAdditionalInfo',
        'pre_fixed_rate': 'TreasureTitlesPreFixedRate',
        'post_fixed_indexer_percentage': 'TreasureTitlesPostFixedIndexerPercentage',
        'rate_periodicity': 'TreasureTitlesRatePeriodicity',
        'calculation': 'TreasureTitlesCalculation'
    }

    attribute_map = {
        'indexer': 'indexer',
        'indexer_additional_info': 'indexerAdditionalInfo',
        'pre_fixed_rate': 'preFixedRate',
        'post_fixed_indexer_percentage': 'postFixedIndexerPercentage',
        'rate_periodicity': 'ratePeriodicity',
        'calculation': 'calculation'
    }

    def __init__(self, indexer=None, indexer_additional_info=None, pre_fixed_rate=None, post_fixed_indexer_percentage=None, rate_periodicity=None, calculation=None):  # noqa: E501
        """TreasureTitlesRemuneration - a model defined in Swagger"""  # noqa: E501
        self._indexer = None
        self._indexer_additional_info = None
        self._pre_fixed_rate = None
        self._post_fixed_indexer_percentage = None
        self._rate_periodicity = None
        self._calculation = None
        self.discriminator = None
        self.indexer = indexer
        if indexer_additional_info is not None:
            self.indexer_additional_info = indexer_additional_info
        if pre_fixed_rate is not None:
            self.pre_fixed_rate = pre_fixed_rate
        if post_fixed_indexer_percentage is not None:
            self.post_fixed_indexer_percentage = post_fixed_indexer_percentage
        self.rate_periodicity = rate_periodicity
        self.calculation = calculation

    @property
    def indexer(self):
        """Gets the indexer of this TreasureTitlesRemuneration.  # noqa: E501


        :return: The indexer of this TreasureTitlesRemuneration.  # noqa: E501
        :rtype: TreasureTitlesIndexer
        """
        return self._indexer

    @indexer.setter
    def indexer(self, indexer):
        """Sets the indexer of this TreasureTitlesRemuneration.


        :param indexer: The indexer of this TreasureTitlesRemuneration.  # noqa: E501
        :type: TreasureTitlesIndexer
        """
        if indexer is None:
            raise ValueError("Invalid value for `indexer`, must not be `None`")  # noqa: E501

        self._indexer = indexer

    @property
    def indexer_additional_info(self):
        """Gets the indexer_additional_info of this TreasureTitlesRemuneration.  # noqa: E501


        :return: The indexer_additional_info of this TreasureTitlesRemuneration.  # noqa: E501
        :rtype: TreasureTitlesIndexerAdditionalInfo
        """
        return self._indexer_additional_info

    @indexer_additional_info.setter
    def indexer_additional_info(self, indexer_additional_info):
        """Sets the indexer_additional_info of this TreasureTitlesRemuneration.


        :param indexer_additional_info: The indexer_additional_info of this TreasureTitlesRemuneration.  # noqa: E501
        :type: TreasureTitlesIndexerAdditionalInfo
        """

        self._indexer_additional_info = indexer_additional_info

    @property
    def pre_fixed_rate(self):
        """Gets the pre_fixed_rate of this TreasureTitlesRemuneration.  # noqa: E501


        :return: The pre_fixed_rate of this TreasureTitlesRemuneration.  # noqa: E501
        :rtype: TreasureTitlesPreFixedRate
        """
        return self._pre_fixed_rate

    @pre_fixed_rate.setter
    def pre_fixed_rate(self, pre_fixed_rate):
        """Sets the pre_fixed_rate of this TreasureTitlesRemuneration.


        :param pre_fixed_rate: The pre_fixed_rate of this TreasureTitlesRemuneration.  # noqa: E501
        :type: TreasureTitlesPreFixedRate
        """

        self._pre_fixed_rate = pre_fixed_rate

    @property
    def post_fixed_indexer_percentage(self):
        """Gets the post_fixed_indexer_percentage of this TreasureTitlesRemuneration.  # noqa: E501


        :return: The post_fixed_indexer_percentage of this TreasureTitlesRemuneration.  # noqa: E501
        :rtype: TreasureTitlesPostFixedIndexerPercentage
        """
        return self._post_fixed_indexer_percentage

    @post_fixed_indexer_percentage.setter
    def post_fixed_indexer_percentage(self, post_fixed_indexer_percentage):
        """Sets the post_fixed_indexer_percentage of this TreasureTitlesRemuneration.


        :param post_fixed_indexer_percentage: The post_fixed_indexer_percentage of this TreasureTitlesRemuneration.  # noqa: E501
        :type: TreasureTitlesPostFixedIndexerPercentage
        """

        self._post_fixed_indexer_percentage = post_fixed_indexer_percentage

    @property
    def rate_periodicity(self):
        """Gets the rate_periodicity of this TreasureTitlesRemuneration.  # noqa: E501


        :return: The rate_periodicity of this TreasureTitlesRemuneration.  # noqa: E501
        :rtype: TreasureTitlesRatePeriodicity
        """
        return self._rate_periodicity

    @rate_periodicity.setter
    def rate_periodicity(self, rate_periodicity):
        """Sets the rate_periodicity of this TreasureTitlesRemuneration.


        :param rate_periodicity: The rate_periodicity of this TreasureTitlesRemuneration.  # noqa: E501
        :type: TreasureTitlesRatePeriodicity
        """
        if rate_periodicity is None:
            raise ValueError("Invalid value for `rate_periodicity`, must not be `None`")  # noqa: E501

        self._rate_periodicity = rate_periodicity

    @property
    def calculation(self):
        """Gets the calculation of this TreasureTitlesRemuneration.  # noqa: E501


        :return: The calculation of this TreasureTitlesRemuneration.  # noqa: E501
        :rtype: TreasureTitlesCalculation
        """
        return self._calculation

    @calculation.setter
    def calculation(self, calculation):
        """Sets the calculation of this TreasureTitlesRemuneration.


        :param calculation: The calculation of this TreasureTitlesRemuneration.  # noqa: E501
        :type: TreasureTitlesCalculation
        """
        if calculation is None:
            raise ValueError("Invalid value for `calculation`, must not be `None`")  # noqa: E501

        self._calculation = calculation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TreasureTitlesRemuneration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreasureTitlesRemuneration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
