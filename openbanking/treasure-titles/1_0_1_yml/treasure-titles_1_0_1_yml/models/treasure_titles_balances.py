# coding: utf-8

"""
    API Treasure Titles - Open Finance Brasil

    API de informações de operações de Títulos do Tesouro Direto Open Finance Brasil – Fase 4. API que retorna informações de operações de investimento do tipo Títulos do Tesouro Direto mantidas nas instituições transmissoras por seus clientes, incluindo dados como informações do produto, quantidade, saldos em posição do cliente e movimentações financeiras. Não possui segregação entre pessoa natural e pessoa jurídica. Requer consentimento do cliente para todos os endpoints. Devem ser considerados como escopo de exposição todos os títulos ofertados pelo Tesouro Direto. A exposição se dará por cada operação de títulos do Tesouro Direto contratada pelo cliente.   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TreasureTitlesBalances(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference_date_time': 'TreasureTitlesReferenceDateTime',
        'updated_unit_price': 'TreasureTitlesUpdatedUnitPrice',
        'gross_amount': 'TreasureTitlesGrossAmount',
        'net_amount': 'TreasureTitlesNetAmount',
        'income_tax': 'TreasureTitlesIncomeTax',
        'financial_transaction_tax': 'TreasureTitlesFinancialTransactionTax',
        'blocked_balance': 'TreasureTitlesBlockedBalance',
        'purchase_unit_price': 'TreasureTitlesPurchaseUnitPrice',
        'quantity': 'TreasureTitlesQuantity'
    }

    attribute_map = {
        'reference_date_time': 'referenceDateTime',
        'updated_unit_price': 'updatedUnitPrice',
        'gross_amount': 'grossAmount',
        'net_amount': 'netAmount',
        'income_tax': 'incomeTax',
        'financial_transaction_tax': 'financialTransactionTax',
        'blocked_balance': 'blockedBalance',
        'purchase_unit_price': 'purchaseUnitPrice',
        'quantity': 'quantity'
    }

    def __init__(self, reference_date_time=None, updated_unit_price=None, gross_amount=None, net_amount=None, income_tax=None, financial_transaction_tax=None, blocked_balance=None, purchase_unit_price=None, quantity=None):  # noqa: E501
        """TreasureTitlesBalances - a model defined in Swagger"""  # noqa: E501
        self._reference_date_time = None
        self._updated_unit_price = None
        self._gross_amount = None
        self._net_amount = None
        self._income_tax = None
        self._financial_transaction_tax = None
        self._blocked_balance = None
        self._purchase_unit_price = None
        self._quantity = None
        self.discriminator = None
        self.reference_date_time = reference_date_time
        self.updated_unit_price = updated_unit_price
        self.gross_amount = gross_amount
        self.net_amount = net_amount
        self.income_tax = income_tax
        if financial_transaction_tax is not None:
            self.financial_transaction_tax = financial_transaction_tax
        self.blocked_balance = blocked_balance
        self.purchase_unit_price = purchase_unit_price
        self.quantity = quantity

    @property
    def reference_date_time(self):
        """Gets the reference_date_time of this TreasureTitlesBalances.  # noqa: E501


        :return: The reference_date_time of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesReferenceDateTime
        """
        return self._reference_date_time

    @reference_date_time.setter
    def reference_date_time(self, reference_date_time):
        """Sets the reference_date_time of this TreasureTitlesBalances.


        :param reference_date_time: The reference_date_time of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesReferenceDateTime
        """
        if reference_date_time is None:
            raise ValueError("Invalid value for `reference_date_time`, must not be `None`")  # noqa: E501

        self._reference_date_time = reference_date_time

    @property
    def updated_unit_price(self):
        """Gets the updated_unit_price of this TreasureTitlesBalances.  # noqa: E501


        :return: The updated_unit_price of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesUpdatedUnitPrice
        """
        return self._updated_unit_price

    @updated_unit_price.setter
    def updated_unit_price(self, updated_unit_price):
        """Sets the updated_unit_price of this TreasureTitlesBalances.


        :param updated_unit_price: The updated_unit_price of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesUpdatedUnitPrice
        """
        if updated_unit_price is None:
            raise ValueError("Invalid value for `updated_unit_price`, must not be `None`")  # noqa: E501

        self._updated_unit_price = updated_unit_price

    @property
    def gross_amount(self):
        """Gets the gross_amount of this TreasureTitlesBalances.  # noqa: E501


        :return: The gross_amount of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesGrossAmount
        """
        return self._gross_amount

    @gross_amount.setter
    def gross_amount(self, gross_amount):
        """Sets the gross_amount of this TreasureTitlesBalances.


        :param gross_amount: The gross_amount of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesGrossAmount
        """
        if gross_amount is None:
            raise ValueError("Invalid value for `gross_amount`, must not be `None`")  # noqa: E501

        self._gross_amount = gross_amount

    @property
    def net_amount(self):
        """Gets the net_amount of this TreasureTitlesBalances.  # noqa: E501


        :return: The net_amount of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesNetAmount
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this TreasureTitlesBalances.


        :param net_amount: The net_amount of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesNetAmount
        """
        if net_amount is None:
            raise ValueError("Invalid value for `net_amount`, must not be `None`")  # noqa: E501

        self._net_amount = net_amount

    @property
    def income_tax(self):
        """Gets the income_tax of this TreasureTitlesBalances.  # noqa: E501


        :return: The income_tax of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesIncomeTax
        """
        return self._income_tax

    @income_tax.setter
    def income_tax(self, income_tax):
        """Sets the income_tax of this TreasureTitlesBalances.


        :param income_tax: The income_tax of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesIncomeTax
        """
        if income_tax is None:
            raise ValueError("Invalid value for `income_tax`, must not be `None`")  # noqa: E501

        self._income_tax = income_tax

    @property
    def financial_transaction_tax(self):
        """Gets the financial_transaction_tax of this TreasureTitlesBalances.  # noqa: E501


        :return: The financial_transaction_tax of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesFinancialTransactionTax
        """
        return self._financial_transaction_tax

    @financial_transaction_tax.setter
    def financial_transaction_tax(self, financial_transaction_tax):
        """Sets the financial_transaction_tax of this TreasureTitlesBalances.


        :param financial_transaction_tax: The financial_transaction_tax of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesFinancialTransactionTax
        """

        self._financial_transaction_tax = financial_transaction_tax

    @property
    def blocked_balance(self):
        """Gets the blocked_balance of this TreasureTitlesBalances.  # noqa: E501


        :return: The blocked_balance of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesBlockedBalance
        """
        return self._blocked_balance

    @blocked_balance.setter
    def blocked_balance(self, blocked_balance):
        """Sets the blocked_balance of this TreasureTitlesBalances.


        :param blocked_balance: The blocked_balance of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesBlockedBalance
        """
        if blocked_balance is None:
            raise ValueError("Invalid value for `blocked_balance`, must not be `None`")  # noqa: E501

        self._blocked_balance = blocked_balance

    @property
    def purchase_unit_price(self):
        """Gets the purchase_unit_price of this TreasureTitlesBalances.  # noqa: E501


        :return: The purchase_unit_price of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesPurchaseUnitPrice
        """
        return self._purchase_unit_price

    @purchase_unit_price.setter
    def purchase_unit_price(self, purchase_unit_price):
        """Sets the purchase_unit_price of this TreasureTitlesBalances.


        :param purchase_unit_price: The purchase_unit_price of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesPurchaseUnitPrice
        """
        if purchase_unit_price is None:
            raise ValueError("Invalid value for `purchase_unit_price`, must not be `None`")  # noqa: E501

        self._purchase_unit_price = purchase_unit_price

    @property
    def quantity(self):
        """Gets the quantity of this TreasureTitlesBalances.  # noqa: E501


        :return: The quantity of this TreasureTitlesBalances.  # noqa: E501
        :rtype: TreasureTitlesQuantity
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this TreasureTitlesBalances.


        :param quantity: The quantity of this TreasureTitlesBalances.  # noqa: E501
        :type: TreasureTitlesQuantity
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TreasureTitlesBalances, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreasureTitlesBalances):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
