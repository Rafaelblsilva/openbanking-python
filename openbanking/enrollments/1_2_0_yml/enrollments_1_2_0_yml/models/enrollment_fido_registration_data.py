# coding: utf-8

"""
    API Enrollments for Payment Initiation - Open Finance Brasil

    Família de API para permitir o pagamento sem redirecionamento via Open Finance Brasil.   Permite tanto o gerenciamento dos dispositivos vinculados as contas quanto a autorização de consentimentos criados via fluxo sem redirecionamento.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: squad-jornada@openfinancebrasil.org.br
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnrollmentFidoRegistrationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'raw_id': 'str',
        'response': 'EnrollmentFidoRegistrationDataResponse',
        'authenticator_attachment': 'str',
        'type': 'str',
        'client_extension_results': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'raw_id': 'rawId',
        'response': 'response',
        'authenticator_attachment': 'authenticatorAttachment',
        'type': 'type',
        'client_extension_results': 'clientExtensionResults'
    }

    def __init__(self, id=None, raw_id=None, response=None, authenticator_attachment=None, type=None, client_extension_results=None):  # noqa: E501
        """EnrollmentFidoRegistrationData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._raw_id = None
        self._response = None
        self._authenticator_attachment = None
        self._type = None
        self._client_extension_results = None
        self.discriminator = None
        self.id = id
        self.raw_id = raw_id
        self.response = response
        if authenticator_attachment is not None:
            self.authenticator_attachment = authenticator_attachment
        if type is not None:
            self.type = type
        if client_extension_results is not None:
            self.client_extension_results = client_extension_results

    @property
    def id(self):
        """Gets the id of this EnrollmentFidoRegistrationData.  # noqa: E501

        Identificador da credencial.  # noqa: E501

        :return: The id of this EnrollmentFidoRegistrationData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnrollmentFidoRegistrationData.

        Identificador da credencial.  # noqa: E501

        :param id: The id of this EnrollmentFidoRegistrationData.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def raw_id(self):
        """Gets the raw_id of this EnrollmentFidoRegistrationData.  # noqa: E501

        Identificador da credencial. Pode ser igual ao campo id.  # noqa: E501

        :return: The raw_id of this EnrollmentFidoRegistrationData.  # noqa: E501
        :rtype: str
        """
        return self._raw_id

    @raw_id.setter
    def raw_id(self, raw_id):
        """Sets the raw_id of this EnrollmentFidoRegistrationData.

        Identificador da credencial. Pode ser igual ao campo id.  # noqa: E501

        :param raw_id: The raw_id of this EnrollmentFidoRegistrationData.  # noqa: E501
        :type: str
        """
        if raw_id is None:
            raise ValueError("Invalid value for `raw_id`, must not be `None`")  # noqa: E501

        self._raw_id = raw_id

    @property
    def response(self):
        """Gets the response of this EnrollmentFidoRegistrationData.  # noqa: E501


        :return: The response of this EnrollmentFidoRegistrationData.  # noqa: E501
        :rtype: EnrollmentFidoRegistrationDataResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this EnrollmentFidoRegistrationData.


        :param response: The response of this EnrollmentFidoRegistrationData.  # noqa: E501
        :type: EnrollmentFidoRegistrationDataResponse
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")  # noqa: E501

        self._response = response

    @property
    def authenticator_attachment(self):
        """Gets the authenticator_attachment of this EnrollmentFidoRegistrationData.  # noqa: E501

        Indica a forma de comunicação com o autenticador.  # noqa: E501

        :return: The authenticator_attachment of this EnrollmentFidoRegistrationData.  # noqa: E501
        :rtype: str
        """
        return self._authenticator_attachment

    @authenticator_attachment.setter
    def authenticator_attachment(self, authenticator_attachment):
        """Sets the authenticator_attachment of this EnrollmentFidoRegistrationData.

        Indica a forma de comunicação com o autenticador.  # noqa: E501

        :param authenticator_attachment: The authenticator_attachment of this EnrollmentFidoRegistrationData.  # noqa: E501
        :type: str
        """

        self._authenticator_attachment = authenticator_attachment

    @property
    def type(self):
        """Gets the type of this EnrollmentFidoRegistrationData.  # noqa: E501

        Tipo da credencial  # noqa: E501

        :return: The type of this EnrollmentFidoRegistrationData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnrollmentFidoRegistrationData.

        Tipo da credencial  # noqa: E501

        :param type: The type of this EnrollmentFidoRegistrationData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def client_extension_results(self):
        """Gets the client_extension_results of this EnrollmentFidoRegistrationData.  # noqa: E501

        Extensões da credencial, específicas por plataforma  # noqa: E501

        :return: The client_extension_results of this EnrollmentFidoRegistrationData.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._client_extension_results

    @client_extension_results.setter
    def client_extension_results(self, client_extension_results):
        """Sets the client_extension_results of this EnrollmentFidoRegistrationData.

        Extensões da credencial, específicas por plataforma  # noqa: E501

        :param client_extension_results: The client_extension_results of this EnrollmentFidoRegistrationData.  # noqa: E501
        :type: dict(str, str)
        """

        self._client_extension_results = client_extension_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrollmentFidoRegistrationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentFidoRegistrationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
