# coding: utf-8

"""
    API's OpenData do Open Banking Brasil

    As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonalAccountsResponseDataBrandCompanies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'cnpj_numbers': 'str',
        'url_complementary_list': 'str',
        'personal_accounts': 'list[PersonalAccountsResponseDataBrandPersonalAccounts]'
    }

    attribute_map = {
        'name': 'name',
        'cnpj_numbers': 'cnpjNumbers',
        'url_complementary_list': 'urlComplementaryList',
        'personal_accounts': 'personalAccounts'
    }

    def __init__(self, name=None, cnpj_numbers=None, url_complementary_list=None, personal_accounts=None):  # noqa: E501
        """PersonalAccountsResponseDataBrandCompanies - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._cnpj_numbers = None
        self._url_complementary_list = None
        self._personal_accounts = None
        self.discriminator = None
        self.name = name
        self.cnpj_numbers = cnpj_numbers
        if url_complementary_list is not None:
            self.url_complementary_list = url_complementary_list
        if personal_accounts is not None:
            self.personal_accounts = personal_accounts

    @property
    def name(self):
        """Gets the name of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501

        Nome da Instituição, pertencente à marca, responsável pela comercialização dos produtos e serviços  # noqa: E501

        :return: The name of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonalAccountsResponseDataBrandCompanies.

        Nome da Instituição, pertencente à marca, responsável pela comercialização dos produtos e serviços  # noqa: E501

        :param name: The name of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cnpj_numbers(self):
        """Gets the cnpj_numbers of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501

        O CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica.  # noqa: E501

        :return: The cnpj_numbers of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :rtype: str
        """
        return self._cnpj_numbers

    @cnpj_numbers.setter
    def cnpj_numbers(self, cnpj_numbers):
        """Sets the cnpj_numbers of this PersonalAccountsResponseDataBrandCompanies.

        O CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica.  # noqa: E501

        :param cnpj_numbers: The cnpj_numbers of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :type: str
        """
        if cnpj_numbers is None:
            raise ValueError("Invalid value for `cnpj_numbers`, must not be `None`")  # noqa: E501

        self._cnpj_numbers = cnpj_numbers

    @property
    def url_complementary_list(self):
        """Gets the url_complementary_list of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501

        URL do link que conterá a lista complementar com os nomes e CNPJs agrupados sob o mesmo cnpjNumber. Os contidos nessa lista possuem as mesmas características para produtos e serviços. Endereço eletrônico de acesso ao canal. URLs são limitadas a 2048 caracteres mas, para o contexto do Sistema Financeiro aberto, será adotado a metade deste tamanho.  # noqa: E501

        :return: The url_complementary_list of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :rtype: str
        """
        return self._url_complementary_list

    @url_complementary_list.setter
    def url_complementary_list(self, url_complementary_list):
        """Sets the url_complementary_list of this PersonalAccountsResponseDataBrandCompanies.

        URL do link que conterá a lista complementar com os nomes e CNPJs agrupados sob o mesmo cnpjNumber. Os contidos nessa lista possuem as mesmas características para produtos e serviços. Endereço eletrônico de acesso ao canal. URLs são limitadas a 2048 caracteres mas, para o contexto do Sistema Financeiro aberto, será adotado a metade deste tamanho.  # noqa: E501

        :param url_complementary_list: The url_complementary_list of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :type: str
        """

        self._url_complementary_list = url_complementary_list

    @property
    def personal_accounts(self):
        """Gets the personal_accounts of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501


        :return: The personal_accounts of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :rtype: list[PersonalAccountsResponseDataBrandPersonalAccounts]
        """
        return self._personal_accounts

    @personal_accounts.setter
    def personal_accounts(self, personal_accounts):
        """Sets the personal_accounts of this PersonalAccountsResponseDataBrandCompanies.


        :param personal_accounts: The personal_accounts of this PersonalAccountsResponseDataBrandCompanies.  # noqa: E501
        :type: list[PersonalAccountsResponseDataBrandPersonalAccounts]
        """

        self._personal_accounts = personal_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalAccountsResponseDataBrandCompanies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalAccountsResponseDataBrandCompanies):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
