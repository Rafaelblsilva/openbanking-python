# coding: utf-8

"""
    API's OpenData do Open Banking Brasil

    As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountOtherServicesPrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'str',
        'value': 'str',
        'currency': 'str',
        'minimum': 'AccountOtherServicesPriceMinimum',
        'maximum': 'AccountOtherServicesPriceMaximum'
    }

    attribute_map = {
        'interval': 'interval',
        'value': 'value',
        'currency': 'currency',
        'minimum': 'minimum',
        'maximum': 'maximum'
    }

    def __init__(self, interval=None, value=None, currency=None, minimum=None, maximum=None):  # noqa: E501
        """AccountOtherServicesPrice - a model defined in Swagger"""  # noqa: E501
        self._interval = None
        self._value = None
        self._currency = None
        self._minimum = None
        self._maximum = None
        self.discriminator = None
        self.interval = interval
        self.value = value
        self.currency = currency
        if minimum is not None:
            self.minimum = minimum
        if maximum is not None:
            self.maximum = maximum

    @property
    def interval(self):
        """Gets the interval of this AccountOtherServicesPrice.  # noqa: E501

        Faixas de valor referentes a tarifa de outro Serviços informada: 1º quartil de clientes, 2º quartil de clientes, 3º quartil de clientes e 4º quartil de clientes  # noqa: E501

        :return: The interval of this AccountOtherServicesPrice.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this AccountOtherServicesPrice.

        Faixas de valor referentes a tarifa de outro Serviços informada: 1º quartil de clientes, 2º quartil de clientes, 3º quartil de clientes e 4º quartil de clientes  # noqa: E501

        :param interval: The interval of this AccountOtherServicesPrice.  # noqa: E501
        :type: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501
        allowed_values = ["1_QUARTIL_CLIENTES", "2_QUARTIL_CLIENTES", "3_QUARTIL_CLIENTES", "4_QUARTIL_CLIENTES"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"  # noqa: E501
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def value(self):
        """Gets the value of this AccountOtherServicesPrice.  # noqa: E501

        Valor da mediana da tarifa cobrada referente a Outros Serviços, para o tipo de faixa informada  # noqa: E501

        :return: The value of this AccountOtherServicesPrice.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AccountOtherServicesPrice.

        Valor da mediana da tarifa cobrada referente a Outros Serviços, para o tipo de faixa informada  # noqa: E501

        :param value: The value of this AccountOtherServicesPrice.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def currency(self):
        """Gets the currency of this AccountOtherServicesPrice.  # noqa: E501

        Moeda referente ao valor da mediana da tarifa de Outros Serviços no quartil informado, segundo modelo ISO-4217.  # noqa: E501

        :return: The currency of this AccountOtherServicesPrice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountOtherServicesPrice.

        Moeda referente ao valor da mediana da tarifa de Outros Serviços no quartil informado, segundo modelo ISO-4217.  # noqa: E501

        :param currency: The currency of this AccountOtherServicesPrice.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def minimum(self):
        """Gets the minimum of this AccountOtherServicesPrice.  # noqa: E501


        :return: The minimum of this AccountOtherServicesPrice.  # noqa: E501
        :rtype: AccountOtherServicesPriceMinimum
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this AccountOtherServicesPrice.


        :param minimum: The minimum of this AccountOtherServicesPrice.  # noqa: E501
        :type: AccountOtherServicesPriceMinimum
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this AccountOtherServicesPrice.  # noqa: E501


        :return: The maximum of this AccountOtherServicesPrice.  # noqa: E501
        :rtype: AccountOtherServicesPriceMaximum
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this AccountOtherServicesPrice.


        :param maximum: The maximum of this AccountOtherServicesPrice.  # noqa: E501
        :type: AccountOtherServicesPriceMaximum
        """

        self._maximum = maximum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountOtherServicesPrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountOtherServicesPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
