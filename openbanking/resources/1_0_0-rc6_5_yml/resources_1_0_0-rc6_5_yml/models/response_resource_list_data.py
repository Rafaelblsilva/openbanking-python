# coding: utf-8

"""
    API Resources - Open Banking Brasil

    API que trata da consulta do status de recursos para o Open Banking Brasil - Fase 2.\\ Não possui segregação entre pessoa natural e pessoa jurídica.  # Orientações importantes - A API resources lista os recursos vinculados ao consentimento específico, identificado por `consentId` e vinculado ao token enviado no header `Authorization`. - Os `STATUS` dos recursos listados DEVEM considerar não apenas o consentimento vinculado mas também a disponibilidade do recurso na instituição transmissora dos dados. - Na lista de recursos devolvida na API resources somente constará informação no atributo `resourceId` para recursos com o `STATUS` `AVAILABLE`. - Para os demais `STATUS` não é devolvido o identificador do recurso - `resourceId`. - A `permission` específica desta API  - `RESOURCES_READ` - DEVE ser solicitada pela instituição receptora na ocasião do pedido de criação do consentimento. - A consulta à API Resources não é obrigatória por parte das instituições receptoras - esta API foi criada para dar visibilidade da existência de ocorrências que possam impedir o compartilhamento de determinados recursos por parte da instituição transmissora dos dados. - O identificador do recurso devolvido na API Resources - `resourceId` - quando apresentado corresponde ao mesmo identificador designado para o recurso em sua API específica, o seja: o `resourceId` corresponde ao `accountId` da API accounts, ao `creditCardAccountId` da API de conta pós-paga e assim sucessivamente.  ## Status previstos para os recursos listados na API Resources - AVAILABLE: indica que o recurso encontra-se disponível e o(s) consentimento(s) associado(s) possui(em) status `AUTHORISED`. - UNAVAILABLE: indica que o recurso não está mais disponível, por exemplo, em caso de uma conta encerrada. - TEMPORARILY_UNAVAILABLE: indica que o recurso encontra-se temporariamente indisponível, embora o(s) consentimento(s) associado(s) possua(m) status `AUTHORISED`.   Caso de exemplo: conta temporariamente bloqueada por suspeita de fraude. - PENDING_AUTHORISATION: indica a existência de pendências para o compartilhamento do recurso, por exemplo, em caso de alçada dupla, quando é necessário o consentimento de mais de um titular.  ## Permissions necessárias para a API Resources ### `/resources`   - permissions:     - GET: **RESOURCES_READ**   # noqa: E501

    OpenAPI spec version: 1.0.0-rc6.5
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseResourceListData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'str',
        'type': 'str',
        'status': 'str'
    }

    attribute_map = {
        'resource_id': 'resourceId',
        'type': 'type',
        'status': 'status'
    }

    def __init__(self, resource_id=None, type=None, status=None):  # noqa: E501
        """ResponseResourceListData - a model defined in Swagger"""  # noqa: E501
        self._resource_id = None
        self._type = None
        self._status = None
        self.discriminator = None
        if resource_id is not None:
            self.resource_id = resource_id
        self.type = type
        self.status = status

    @property
    def resource_id(self):
        """Gets the resource_id of this ResponseResourceListData.  # noqa: E501

        Identifica o recurso reportado pelo participante do Open Banking, no caso de: Contas de depósito à vista, de poupança ou de pagamento pré-paga : corresponde ao accountId; Conta de pagamento pós-paga: corresponde ao creditCardAccountId; Empréstimos, Financiamentos, Direitos creditórios descontados e Adiantamento a depositantes: corresponde ao contractId.   # noqa: E501

        :return: The resource_id of this ResponseResourceListData.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ResponseResourceListData.

        Identifica o recurso reportado pelo participante do Open Banking, no caso de: Contas de depósito à vista, de poupança ou de pagamento pré-paga : corresponde ao accountId; Conta de pagamento pós-paga: corresponde ao creditCardAccountId; Empréstimos, Financiamentos, Direitos creditórios descontados e Adiantamento a depositantes: corresponde ao contractId.   # noqa: E501

        :param resource_id: The resource_id of this ResponseResourceListData.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def type(self):
        """Gets the type of this ResponseResourceListData.  # noqa: E501

        Tipo de recurso (vide Enum): Account - Conta de depósito à vista, poupança ou pagamento pré-paga Credit Card Account - Conta de pagamento pós-paga (Cartão de Crédito) Loan - Empréstimo Financing - Financiamento Unarranged Account Overdraft - Cheque Especial Invoice Financing - Financiamento de Fatura   # noqa: E501

        :return: The type of this ResponseResourceListData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseResourceListData.

        Tipo de recurso (vide Enum): Account - Conta de depósito à vista, poupança ou pagamento pré-paga Credit Card Account - Conta de pagamento pós-paga (Cartão de Crédito) Loan - Empréstimo Financing - Financiamento Unarranged Account Overdraft - Cheque Especial Invoice Financing - Financiamento de Fatura   # noqa: E501

        :param type: The type of this ResponseResourceListData.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ACCOUNT", "CREDIT_CARD_ACCOUNT", "LOAN", "FINANCING", "UNARRANGED_ACCOUNT_OVERDRAFT", "INVOICE_FINANCING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this ResponseResourceListData.  # noqa: E501

        Tipo de status de recurso (vide Enum): Available - Disponível Unavailable - Indisponível Temporarily Unavailable - Temporariamente Indisponível Pending Authorisation - Pendente de Autorização   # noqa: E501

        :return: The status of this ResponseResourceListData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseResourceListData.

        Tipo de status de recurso (vide Enum): Available - Disponível Unavailable - Indisponível Temporarily Unavailable - Temporariamente Indisponível Pending Authorisation - Pendente de Autorização   # noqa: E501

        :param status: The status of this ResponseResourceListData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["AVAILABLE", "UNAVAILABLE", "TEMPORARILY_UNAVAILABLE", "PENDING_AUTHORISATION"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseResourceListData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseResourceListData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
