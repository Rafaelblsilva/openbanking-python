# coding: utf-8

"""
    APIs Admin do Open Finance Brasil

    As API's administrativas são recursos que podem ser consumidos apenas pelo diretório para avaliação e controle da qualidade dos serviços fornecidos pelas instituições financeiras  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvailabilityMetricsDowntime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'general_downtime': 'int',
        'scheduled_outage': 'int',
        'partial_downtime': 'int'
    }

    attribute_map = {
        'general_downtime': 'generalDowntime',
        'scheduled_outage': 'scheduledOutage',
        'partial_downtime': 'partialDowntime'
    }

    def __init__(self, general_downtime=None, scheduled_outage=None, partial_downtime=None):  # noqa: E501
        """AvailabilityMetricsDowntime - a model defined in Swagger"""  # noqa: E501
        self._general_downtime = None
        self._scheduled_outage = None
        self._partial_downtime = None
        self.discriminator = None
        self.general_downtime = general_downtime
        self.scheduled_outage = scheduled_outage
        self.partial_downtime = partial_downtime

    @property
    def general_downtime(self):
        """Gets the general_downtime of this AvailabilityMetricsDowntime.  # noqa: E501

        Quantidade de segundos de downtime (considerando qualquer api em downtime).  # noqa: E501

        :return: The general_downtime of this AvailabilityMetricsDowntime.  # noqa: E501
        :rtype: int
        """
        return self._general_downtime

    @general_downtime.setter
    def general_downtime(self, general_downtime):
        """Sets the general_downtime of this AvailabilityMetricsDowntime.

        Quantidade de segundos de downtime (considerando qualquer api em downtime).  # noqa: E501

        :param general_downtime: The general_downtime of this AvailabilityMetricsDowntime.  # noqa: E501
        :type: int
        """
        if general_downtime is None:
            raise ValueError("Invalid value for `general_downtime`, must not be `None`")  # noqa: E501

        self._general_downtime = general_downtime

    @property
    def scheduled_outage(self):
        """Gets the scheduled_outage of this AvailabilityMetricsDowntime.  # noqa: E501

        Quantidade de segundos de indisponibilidade agendada.  # noqa: E501

        :return: The scheduled_outage of this AvailabilityMetricsDowntime.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_outage

    @scheduled_outage.setter
    def scheduled_outage(self, scheduled_outage):
        """Sets the scheduled_outage of this AvailabilityMetricsDowntime.

        Quantidade de segundos de indisponibilidade agendada.  # noqa: E501

        :param scheduled_outage: The scheduled_outage of this AvailabilityMetricsDowntime.  # noqa: E501
        :type: int
        """
        if scheduled_outage is None:
            raise ValueError("Invalid value for `scheduled_outage`, must not be `None`")  # noqa: E501

        self._scheduled_outage = scheduled_outage

    @property
    def partial_downtime(self):
        """Gets the partial_downtime of this AvailabilityMetricsDowntime.  # noqa: E501

        Quantidade de segundos de indisponibilidade do endpoint.  # noqa: E501

        :return: The partial_downtime of this AvailabilityMetricsDowntime.  # noqa: E501
        :rtype: int
        """
        return self._partial_downtime

    @partial_downtime.setter
    def partial_downtime(self, partial_downtime):
        """Sets the partial_downtime of this AvailabilityMetricsDowntime.

        Quantidade de segundos de indisponibilidade do endpoint.  # noqa: E501

        :param partial_downtime: The partial_downtime of this AvailabilityMetricsDowntime.  # noqa: E501
        :type: int
        """
        if partial_downtime is None:
            raise ValueError("Invalid value for `partial_downtime`, must not be `None`")  # noqa: E501

        self._partial_downtime = partial_downtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailabilityMetricsDowntime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailabilityMetricsDowntime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
