# coding: utf-8

"""
    API OpenData Credit Cards do Open Finance Brasil

    A API descrita neste documento é referente as API Credit Cards da fase OpenData do Open Finance Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0-beta.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardIdentificationProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'type_additional_info': 'str'
    }

    attribute_map = {
        'type': 'type',
        'type_additional_info': 'typeAdditionalInfo'
    }

    def __init__(self, type=None, type_additional_info=None):  # noqa: E501
        """CreditCardIdentificationProduct - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._type_additional_info = None
        self.discriminator = None
        self.type = type
        if type_additional_info is not None:
            self.type_additional_info = type_additional_info

    @property
    def type(self):
        """Gets the type of this CreditCardIdentificationProduct.  # noqa: E501

        Categoria atribuída a um cartão de pagamento, sob uma certa denominação, que lhe agrega um conjunto de vantagens, diferenciando-o de acordo com o perfil do portador. Essa categoria é definida pelo BACEN e está contida no documento de nome 'Elaboração e Remessa de Informações Relativas aos Cartões de Pagamento  Emissores'  # noqa: E501

        :return: The type of this CreditCardIdentificationProduct.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreditCardIdentificationProduct.

        Categoria atribuída a um cartão de pagamento, sob uma certa denominação, que lhe agrega um conjunto de vantagens, diferenciando-o de acordo com o perfil do portador. Essa categoria é definida pelo BACEN e está contida no documento de nome 'Elaboração e Remessa de Informações Relativas aos Cartões de Pagamento  Emissores'  # noqa: E501

        :param type: The type of this CreditCardIdentificationProduct.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CLASSIC_NACIONAL", "CLASSIC_INTERNACIONAL", "GOLD", "PLATINUM", "INFINITE", "ELECTRON", "STANDARD_NACIONAL", "STANDARD_INTERNACIONAL", "ELETRONIC", "BLACK", "REDESHOP", "MAESTRO_MASTERCARD_MAESTRO", "GREEN", "BLUE", "BLUEBOX", "PROFISSIONAL_LIBERAL", "CHEQUE_ELETRONICO", "CORPORATIVO", "EMPRESARIAL", "COMPRAS", "OUTROS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def type_additional_info(self):
        """Gets the type_additional_info of this CreditCardIdentificationProduct.  # noqa: E501

        Campo livre para preenchimento das informações adicionais referente ao campo \"type\".  [Restrição] Obrigatório quando \"type\" for igual \"OUTROS\".   # noqa: E501

        :return: The type_additional_info of this CreditCardIdentificationProduct.  # noqa: E501
        :rtype: str
        """
        return self._type_additional_info

    @type_additional_info.setter
    def type_additional_info(self, type_additional_info):
        """Sets the type_additional_info of this CreditCardIdentificationProduct.

        Campo livre para preenchimento das informações adicionais referente ao campo \"type\".  [Restrição] Obrigatório quando \"type\" for igual \"OUTROS\".   # noqa: E501

        :param type_additional_info: The type_additional_info of this CreditCardIdentificationProduct.  # noqa: E501
        :type: str
        """

        self._type_additional_info = type_additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardIdentificationProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardIdentificationProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
