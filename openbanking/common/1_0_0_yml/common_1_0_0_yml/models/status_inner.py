# coding: utf-8

"""
    APIs OpenData do Open Banking Brasil

    As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'explanation': 'str',
        'detection_time': 'str',
        'expected_resolution_time': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'code': 'code',
        'explanation': 'explanation',
        'detection_time': 'detectionTime',
        'expected_resolution_time': 'expectedResolutionTime',
        'update_time': 'updateTime'
    }

    def __init__(self, code=None, explanation=None, detection_time=None, expected_resolution_time=None, update_time=None):  # noqa: E501
        """StatusInner - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._explanation = None
        self._detection_time = None
        self._expected_resolution_time = None
        self._update_time = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if explanation is not None:
            self.explanation = explanation
        if detection_time is not None:
            self.detection_time = detection_time
        if expected_resolution_time is not None:
            self.expected_resolution_time = expected_resolution_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def code(self):
        """Gets the code of this StatusInner.  # noqa: E501

        Enum com Status da API. OK (a implementação é totalmente funcional). PARTIAL_FAILURE (um ou mais endpoints estão indisponíveis). UNAVAILABLE (a implementação completa está indisponível). SCHEDULED_OUTAGE (uma interrupção anunciada está em vigor)  # noqa: E501

        :return: The code of this StatusInner.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StatusInner.

        Enum com Status da API. OK (a implementação é totalmente funcional). PARTIAL_FAILURE (um ou mais endpoints estão indisponíveis). UNAVAILABLE (a implementação completa está indisponível). SCHEDULED_OUTAGE (uma interrupção anunciada está em vigor)  # noqa: E501

        :param code: The code of this StatusInner.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def explanation(self):
        """Gets the explanation of this StatusInner.  # noqa: E501

        Fornece uma explicação da interrupção atual que pode ser exibida para um cliente final. Obrigatório se a propriedade status tiver algum valor que não seja OK  # noqa: E501

        :return: The explanation of this StatusInner.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this StatusInner.

        Fornece uma explicação da interrupção atual que pode ser exibida para um cliente final. Obrigatório se a propriedade status tiver algum valor que não seja OK  # noqa: E501

        :param explanation: The explanation of this StatusInner.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    @property
    def detection_time(self):
        """Gets the detection_time of this StatusInner.  # noqa: E501

        A data e hora em que a interrupção atual foi detectada. Só deve estar presente se a propriedade status for PARTIAL_FAILURE ou UNAVAILABLE  # noqa: E501

        :return: The detection_time of this StatusInner.  # noqa: E501
        :rtype: str
        """
        return self._detection_time

    @detection_time.setter
    def detection_time(self, detection_time):
        """Sets the detection_time of this StatusInner.

        A data e hora em que a interrupção atual foi detectada. Só deve estar presente se a propriedade status for PARTIAL_FAILURE ou UNAVAILABLE  # noqa: E501

        :param detection_time: The detection_time of this StatusInner.  # noqa: E501
        :type: str
        """

        self._detection_time = detection_time

    @property
    def expected_resolution_time(self):
        """Gets the expected_resolution_time of this StatusInner.  # noqa: E501

        A data e hora em que o serviço completo deve continuar (se conhecido). Não deve estar presente se a propriedade status tiver um valor OK.  # noqa: E501

        :return: The expected_resolution_time of this StatusInner.  # noqa: E501
        :rtype: str
        """
        return self._expected_resolution_time

    @expected_resolution_time.setter
    def expected_resolution_time(self, expected_resolution_time):
        """Sets the expected_resolution_time of this StatusInner.

        A data e hora em que o serviço completo deve continuar (se conhecido). Não deve estar presente se a propriedade status tiver um valor OK.  # noqa: E501

        :param expected_resolution_time: The expected_resolution_time of this StatusInner.  # noqa: E501
        :type: str
        """

        self._expected_resolution_time = expected_resolution_time

    @property
    def update_time(self):
        """Gets the update_time of this StatusInner.  # noqa: E501

        A data e hora em que esse status foi atualizado pela última vez pelo titular dos dados.  # noqa: E501

        :return: The update_time of this StatusInner.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this StatusInner.

        A data e hora em que esse status foi atualizado pela última vez pelo titular dos dados.  # noqa: E501

        :param update_time: The update_time of this StatusInner.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
