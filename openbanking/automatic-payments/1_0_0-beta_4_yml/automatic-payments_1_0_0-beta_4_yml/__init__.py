# coding: utf-8

# flake8: noqa

"""
    API Automatic Payments - Open Finance Brasil

    API de Iniciação de Pagamentos automáticos, responsável por viabilizar as operações de iniciação de pagamentos automáticos (Pix automático e Sweeping Accounts) para o Open Finance Brasil.  Para cada uma das formas de pagamento previstas é necessário obter prévio consentimento do cliente através dos endpoints dedicados ao consentimento nesta API.  # Orientações - `CONTA`, referente às instituições detentoras de conta participantes do Open Finance Brasil; - `PAGTO`, referente às instituições iniciadoras de pagamento participantes do Open Finance Brasil.  Os tokens utilizados para consumo nos endpoints de consentimentos devem possuir o scope payments e os endpoints de pagamentos recorrentes devem possuir os scopes openid e payments.  Esta API não requer a implementação de permissions para sua utilização.  Todas as requisições e respostas devem ser assinadas seguindo o protocolo estabelecido na sessão Assinaturas do guia de segurança.  ## Orientações gerais sobre os consentimentos de pagamentos automáticos - Duração e reutilização do consentimento: A utilização das credenciais geradas a partir de uma autorização de um consentimento recorrente deve durar até que o consentimento recorrente atinja o fim do seu ciclo de vida, conforme detalhado na sua [máquina de estados](https://openfinancebrasil.atlassian.net/wiki/spaces/OF/pages/198410647).  - Credenciais: As credenciais (authorization_code) geradas na autorização do consentimento devem ser utilizadas para criação dos pagamentos subsequentes utilizando o mecanismo de refresh, caso necessário. Maiores informações através do link [[PT] Open Finance Brasil Financial-grade API Security Profile 1.0 Implementers Draft 3 - Área do Desenvolvedor -Open Finance Brasil - Área do Desenvolvedor (atlassian.net)](https://openfinancebrasil.atlassian.net/wiki/spaces/OF/pages/82051180/PT+Open+Finance+Brasil+Financial-grade+API+Security+Profile+1.0+Implementers+Draft+3#7.2.2.-Servidor-de-autorização)  ## Regras do arranjo Pix A implementação e o uso da API de Pagamentos Automáticos (Pix) devem seguir as regras do arranjo Pix do Banco Central, que podem ser encontradas no link abaixo:   [Banco Central do Brasil](https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix)  ## Assinatura de payloads No contexto da API de Pagamentos Automáticos, os payloads de mensagem que trafegam tanto por parte da instituição iniciadora de transação de pagamento quanto por parte da instituição detentora de conta devem estar assinados.  Para o processo de assinatura destes payloads, as instituições devem seguir as especificações de segurança publicadas no Portal do desenvolvedor.  ## Controle de acesso - Os endpoints de consulta de pagamentos GET /pix/recurring-payments/{recurringPaymentId} e GET /pix/recurring-payments devem suportar acesso a partir de access_token emitido por meio de um grant_type do tipo client credentials, como opção do uso do token vinculado ao consentimento (hybrid flow). - Para evitar vazamento de informação, a detentora deve validar que o pagamento consultado pertence ao ClientId que o criou e, caso haja divergências, retorne um erro HTTP 400.  ## Aprovações de múltipla alçada  Todas as aprovações devem ser realizadas até a data/hora limite suportada pela detentora e em tempo hábil para realizar o primeiro pagamento.  ## Validações da edição do consentimento recorrente para o produto Pix Automático  Para permitir a edição dos campos de um consentimento na iniciadora sem que se faça necessário o redirecionamento para o  ambiente da detentora de conta, é necessário o envio de indicadores de risco.  Esta medida visa proporcionar à detentora de conta as informações necessárias para decidir sobre os ajustes no consentimento de forma segura  ## Validações  Durante a jornada de iniciação de pagamento, diferentes validações são necessárias pela instituição detentora de conta e devem ocorrer conforme a seguir:  1. **Validações na criação do consentimento de longa duração (_POST /recurring-consents_)**     1.1 **Orientações Iniciais**       &ensp;1.1.1 Não devem ser retornadas na resposta deste endpoint informações associadas ao usuário/cliente (ex. insuficiência de saldo, conta inexistente/bloqueada).       &ensp;1.1.2 Não devem ser realizadas validações de informações sobre o usuário/cliente durante a criação do consentimento.     1.2 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token, jwt, assinatura)**       &ensp;1.2.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);       &ensp;1.2.2 Validação de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED);       &ensp;1.2.3 Validação de assinatura da mensagem: Valida se assinatura das mensagens enviadas está correta – HTTP Code 400 (BAD_SIGNATURE);       &ensp;1.2.4 Validação de Claims (exceto data);         &emsp;1.2.4.1 Valida se dados (aud, iss, iat e jti) são válidos - HTTP status code 403 – (INVALID_CLIENT);         &emsp;1.2.4.2 Valida reuso de jti - HTTP Code 403 (INVALID_CLIENT).     1.3 **Casos de erro sintáticos e semânticos, previstos com retorno HTTP Code 422 - Unprocessable Entity (detalhamento adicional na documentação técnica da API):**        &ensp;1.3.1 **Sintáticos**         &emsp;1.3.1.1 Envio de campos obrigatórios: Valida se todos os campos obrigatórios foram informados (PARAMETRO_NAO_INFORMADO);         &emsp;1.3.1.2 Formatação de parâmetros: Valida se parâmetros informados obedecem a formatação especificada (PARAMETRO_INVALIDO).       &ensp;1.3.2 **Semânticos**         &emsp;1.3.2.1 Data de pagamento: Valida se a data de pagamento enviada é válida para a forma de pagamento selecionada (DATA_PAGAMENTO_INVALIDA);         &emsp;1.3.2.2 Detalhes do pagamento: Valida se determinado parâmetro informado obedece às regras de negócio (DETALHE_PAGAMENTO_INVALIDO);         &emsp;1.3.2.3 Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);         &emsp;1.3.2.4 Idempotência: Valida se há divergência entre chave de idempotência e informações enviadas (ERRO_IDEMPOTENCIA);         &emsp;1.3.2.5 Funcionalidade não habilitada: A detentora de conta não oferece o serviço nessa modalidade (FUNCIONALIDADE_NAO_HABILITADA).    2. **Demais validações executadas durante o processamento assíncrono do consentimento pela detentora poderão ser consultados pela iniciadora através do endpoint GET /recurring-consents/{recurringConsentId} previstos com retorno HTTP Code 200 – OK com status REJECTED e rejectionReason conforme abaixo:**     2.1 **Validações durante o processamento assíncrono do consentimento**       &ensp;2.1.1 Falha de infraestrutura: Ocorreu algum erro interno na detentora durante processamento da criação do consentimento (FALHA_INFRAESTRUTURA);       &ensp;2.1.2 Tempo de autorização expirado: O usuário não confirmou o consentimento e o mesmo expirou (TEMPO_EXPIRADO_AUTORIZACAO);       &ensp;2.1.3 Rejeitado pelo usuário: O usuário explicitamente rejeitou a autorização do consentimento (REJEITADO_USUARIO);       &ensp;2.1.4 Mesma conta origem/destino: A conta indicada pelo usuário para recebimento é a mesma selecionada para o pagamento (CONTAS_ORIGEM_DESTINO_IGUAIS);       &ensp;2.1.5 Tipo de conta inválida: A conta indicada não permite operações de pagamento (CONTA_NAO_PERMITE_PAGAMENTO);       &ensp;2.1.6 Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);       &ensp;2.1.7 Limites da transação: Valida se o valor ultrapassa o limite estabelecido [na instituição/no arranjo/outro] para permitir a realização de transações pelo cliente (VALOR_ACIMA_LIMITE);    3. **Demais validações executadas durante o processamento assíncrono do consentimento pela detentora, poderão ser consultados pela iniciadora através dos endpoints GET /recurring-consents/{recurringConsentId} previstos com retorno HTTP Code 200 - OK com status REVOKED e revocationReason conforme abaixo (detalhamento adicional na documentação técnica da API).**     3.1 **Demais validações durante o processamento assíncrono:**       &ensp;3.1.1 Nao informado: Validações não explicitamente informadas (ex. suspeita de fraude) (NAO_INFORMADO);       &ensp;3.1.2 Revogado pelo recebedor: O usuário recebedor solicitou explicitamente ao iniciador a revogação do consentimento (ex: término de contrato) (REVOGADO_RECEBEDOR);       &ensp;3.1.3 Revogado pelo pagador: O usuário pagador solicitou explicitamente a revogação do consentimento (REVOGADO_USUARIO).    4. **Validações na criação do pagamento - Síncrono (_POST /pix/recurring-payments_)**     4.1 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token, jwt, assinatura)**       &ensp;4.1.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);       &ensp;4.1.2 Validação de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED);       &ensp;4.1.3 Validação de assinatura da mensagem: Valida se assinatura das mensagens enviadas está correta – HTTP Code 400 (BAD_SIGNATURE);       &ensp;4.1.4 Validação de Claims (exceto data);         &emsp;4.1.4.1 Valida se dados (aud, iss, iat e jti) são válidos - HTTP status code 403 – (INVALID_CLIENT);         &emsp;4.1.4.2 Valida reuso de jti - HTTP Code 403 (INVALID_CLIENT).     4.2 **Casos de erro sintáticos e semânticos, previstos com retorno HTTP Code 422 - Unprocessable Entity (detalhamento adicional na documentação técnica da API):**       &ensp;4.2.1 Sintáticos         &emsp;4.2.1.1 Envio de campos obrigatórios: Valida se todos os campos obrigatórios são informados (PARAMETRO_NAO_INFORMADO);         &emsp;4.2.1.2 Formatação de parâmetros: Valida se parâmetros informados obedecem a formatação especificada (PARAMETRO_INVALIDO).       &ensp;4.2.2 Semânticos         &emsp;4.2.2.1 Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);         &emsp;4.2.2.2 Limites da transação: Valida se valor (ou quantidade de transações) ultrapassa faixa de limite parametrizada na detentora na conta do cliente pagador (VALOR_ACIMA_LIMITE);         &emsp;4.2.2.3 Valor informado: Valida se valor enviado é válido para o consentimento associado ao pagamento (VALOR_INVALIDO);         &emsp;4.2.2.4 Status Consentimento: Valida se status de consentimento é diferente de “AUTHORISED” (CONSENTIMENTO_INVALIDO);         &emsp;4.2.2.5 Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);         &emsp;4.2.2.6 Divergência entre pagamento e consentimento: Valida se dados do pagamento são diferentes dos dados do consentimento (PAGAMENTO_DIVERGENTE_CONSENTIMENTO)         &emsp;4.2.2.7 Recusado pela detentora: Valida se pagamento foi recusado pela detentora (PAGAMENTO_RECUSADO_DETENTORA), com a descrição do motivo de recusa;         &emsp;4.2.2.8 Detalhes do pagamento: Valida se determinado parâmetro informado obedece as regras de negócio (DETALHE_PAGAMENTO_INVALIDO);         &emsp;4.2.2.9 Pagamento recusado no Sistema de Pagamentos Instantâneos (SPI) (PAGAMENTO_RECUSADO_SPI);         &emsp;4.2.2.10 Idempotência: Valida se há divergência entre chave de idempotência e informações enviadas (ERRO_IDEMPOTENCIA);         &emsp;4.2.2.11 Limite valor excedido por período: Foi atingido o valor limite permitido pelo usuário por um determinado período de tempo no consentimento do pagamento (LIMITE_PERIODO_VALOR_EXCEDIDO);         &emsp;4.2.2.12 Limite quantidade excedida por período: A quantidade de cobranças atingiu o limite determinado pelo usuário na criação do consentimento (LIMITE_PERIODO_QUANTIDADE_EXCEDIDO).    5. **Validações na consulta do pagamento (_GET /pix/recurring-payments/{recurringPaymentId}_ e _GET /pix/recurring-payments_)**     5.1 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token)**       &ensp;5.1.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);       &ensp;5.1.2 Validações de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED).  6. **Demais validações executadas durante o processamento assíncrono do pagamento pela detentora, poderão ser consultados pela iniciadora através dos endpoints _GET /pix/recurring-payments/{recurringPaymentId}_ e _GET /pix/recurring-payments_ previstos com retorno HTTP Code 200 - OK com status RJCT (Rejected) e rejectionReason conforme abaixo (detalhamento adicional na documentação técnica da API):**     6.1 **Demais validações durante o processamento assíncrono:**       &ensp;6.1.1 - Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);       &ensp;6.1.2 - Limites da transação: Valida se valor (ou quantidade de transações) ultrapassa faixa de limite parametrizada na detentora (VALOR_ACIMA_LIMITE);       &ensp;6.1.3 - Valor informado: Valida se valor enviado é válido para o consentimento do pagamento (VALOR_INVALIDO);       &ensp;6.1.4 - Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);       &ensp;6.1.5 - Divergência entre pagamento e consentimento: Valida se dados do pagamento são diferentes dos dados do consentimento (PAGAMENTO_DIVERGENTE_CONSENTIMENTO);       &ensp;6.1.6 - Recusado pela detentora: Valida se pagamento foi recusado pela detentora (PAGAMENTO_RECUSADO_DETENTORA), com a descrição do motivo de recusa;       &ensp;6.1.7 - Pagamento recusado no Sistema de Pagamentos Instantâneos (SPI) (PAGAMENTO_RECUSADO_SPI);       &ensp;6.1.8 - Erro de infraestrutura na consulta ao SPI: Ocorreu uma falha de infraestrutura durante a consulta ao SPI(FALHA_INFRAESTRUTURA_SPI);       &ensp;6.1.9 - Erro de infraestrutura na consulta ao ICP: Ocorreu uma falha de infraestrutura durante a consulta ao ICP (FALHA_INFRAESTRUTURA_ICP);       &ensp;6.1.10 - Erro de infraestrutura na comunicação com o PSP do recebedor: Ocorreu uma falha de infraestrutura durante a comunicação com o PSP do recebedor (FALHA_INFRAESTRUTURA_PSP_RECEBEDOR);       &ensp;6.1.11 - Erro de infraestrutura interno na detentora: Ocorreu uma falha de infraestrutura interna na detentora durante o processamento do pagamento (FALHA_INFRAESTRUTURA_DETENTORA);       &ensp;6.1.12 - Status Consentimento: Valida se status de consentimento é diferente de “AUTHORISED” (CONSENTIMENTO_INVALIDO);    ## Validações antifraude do Sweeping accounts  - Afim de garantir a mesma titularidade e aumentar a segurança das transações do produto Sweeping Accounts, as validações abaixo poderão ser realizadas pela detetora de conta e pela iniciadora, quando localinstrument for igual a DICT ou INIC. A detentora PODE usar a API Consultar Vinculo (DICT API) do arranjo Pix e validar no momento de transação ao menos os atributos abaixo mencionados:   - se o valor dos atributos de fraude abaixo são iguais a 0, de modo a evitar que contas criadas especificamente para uso indevido do Sweeping accounts impactem o ecossistema      - OwnerStatistics.Spi.FraudMarkers.ApplicationFrauds.d90     - OwnerStatistics.Spi.FraudMarkers.MuleAccounts.d90     - OwnerStatistics.Spi.FraudMarkers.ScammerAccounts.d90     - OwnerStatistics.Spi.FraudMarkers.OtherFrauds.d90     - OwnerStatistics.Spi.FraudMarkers.UnknownFrauds.d90   # noqa: E501

    OpenAPI spec version: 1.0.0-beta.4
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

# import apis into sdk package
from automatic-payments_1_0_0-beta_4_yml.api.recurring_consents_api import RecurringConsentsApi
from automatic-payments_1_0_0-beta_4_yml.api.recurring_payments_api import RecurringPaymentsApi
# import ApiClient
from automatic-payments_1_0_0-beta_4_yml.api_client import ApiClient
from automatic-payments_1_0_0-beta_4_yml.configuration import Configuration
# import models into sdk package
from automatic-payments_1_0_0-beta_4_yml.models.automatic import Automatic
from automatic-payments_1_0_0-beta_4_yml.models.automatic_automatic import AutomaticAutomatic
from automatic-payments_1_0_0-beta_4_yml.models.business_entity import BusinessEntity
from automatic-payments_1_0_0-beta_4_yml.models.business_entity_document import BusinessEntityDocument
from automatic-payments_1_0_0-beta_4_yml.models.consent_rejection import ConsentRejection
from automatic-payments_1_0_0-beta_4_yml.models.consent_rejection_automatic import ConsentRejectionAutomatic
from automatic-payments_1_0_0-beta_4_yml.models.consent_rejection_creditors import ConsentRejectionCreditors
from automatic-payments_1_0_0-beta_4_yml.models.consent_rejection_reason import ConsentRejectionReason
from automatic-payments_1_0_0-beta_4_yml.models.consent_rejection_rejection import ConsentRejectionRejection
from automatic-payments_1_0_0-beta_4_yml.models.consent_revocation import ConsentRevocation
from automatic-payments_1_0_0-beta_4_yml.models.consent_revocation_revocation import ConsentRevocationRevocation
from automatic-payments_1_0_0-beta_4_yml.models.consent_revoked_reason import ConsentRevokedReason
from automatic-payments_1_0_0-beta_4_yml.models.consents_debtor_account import ConsentsDebtorAccount
from automatic-payments_1_0_0-beta_4_yml.models.contract_debtor import ContractDebtor
from automatic-payments_1_0_0-beta_4_yml.models.contract_debtor_document import ContractDebtorDocument
from automatic-payments_1_0_0-beta_4_yml.models.create_recurring_consent import CreateRecurringConsent
from automatic-payments_1_0_0-beta_4_yml.models.create_recurring_consent_data import CreateRecurringConsentData
from automatic-payments_1_0_0-beta_4_yml.models.create_recurring_pix_payment import CreateRecurringPixPayment
from automatic-payments_1_0_0-beta_4_yml.models.create_recurring_pix_payment_data import CreateRecurringPixPaymentData
from automatic-payments_1_0_0-beta_4_yml.models.creditor_account import CreditorAccount
from automatic-payments_1_0_0-beta_4_yml.models.creditor_account_post import CreditorAccountPost
from automatic-payments_1_0_0-beta_4_yml.models.creditors import Creditors
from automatic-payments_1_0_0-beta_4_yml.models.creditors_inner import CreditorsInner
from automatic-payments_1_0_0-beta_4_yml.models.day import Day
from automatic-payments_1_0_0-beta_4_yml.models.debtor_account import DebtorAccount
from automatic-payments_1_0_0-beta_4_yml.models.end_to_end_id import EndToEndId
from automatic-payments_1_0_0-beta_4_yml.models.enum_account_type_consents import EnumAccountTypeConsents
from automatic-payments_1_0_0-beta_4_yml.models.enum_account_type_payments import EnumAccountTypePayments
from automatic-payments_1_0_0-beta_4_yml.models.enum_authorisation_status_type import EnumAuthorisationStatusType
from automatic-payments_1_0_0-beta_4_yml.models.enum_payment_cancellation_from_type import EnumPaymentCancellationFromType
from automatic-payments_1_0_0-beta_4_yml.models.enum_payment_cancellation_reason_type import EnumPaymentCancellationReasonType
from automatic-payments_1_0_0-beta_4_yml.models.enum_payment_cancellation_status_type import EnumPaymentCancellationStatusType
from automatic-payments_1_0_0-beta_4_yml.models.enum_payment_person_type import EnumPaymentPersonType
from automatic-payments_1_0_0-beta_4_yml.models.enum_payment_status_type import EnumPaymentStatusType
from automatic-payments_1_0_0-beta_4_yml.models.enum_payment_type import EnumPaymentType
from automatic-payments_1_0_0-beta_4_yml.models.enum_rejection_reason_code import EnumRejectionReasonCode
from automatic-payments_1_0_0-beta_4_yml.models.enum_rejection_reason_code_get import EnumRejectionReasonCodeGet
from automatic-payments_1_0_0-beta_4_yml.models.immediate_payment import ImmediatePayment
from automatic-payments_1_0_0-beta_4_yml.models.link_single import LinkSingle
from automatic-payments_1_0_0-beta_4_yml.models.logged_user import LoggedUser
from automatic-payments_1_0_0-beta_4_yml.models.logged_user_document import LoggedUserDocument
from automatic-payments_1_0_0-beta_4_yml.models.meta import Meta
from automatic-payments_1_0_0-beta_4_yml.models.model422_response_error_create_pix_recurring_payment import Model422ResponseErrorCreatePixRecurringPayment
from automatic-payments_1_0_0-beta_4_yml.models.model422_response_error_create_pix_recurring_payment_errors import Model422ResponseErrorCreatePixRecurringPaymentErrors
from automatic-payments_1_0_0-beta_4_yml.models.model422_response_error_create_recurring_payments_payment_id import Model422ResponseErrorCreateRecurringPaymentsPaymentId
from automatic-payments_1_0_0-beta_4_yml.models.model422_response_error_create_recurring_payments_payment_id_errors import Model422ResponseErrorCreateRecurringPaymentsPaymentIdErrors
from automatic-payments_1_0_0-beta_4_yml.models.model422_response_error_recurring_consents import Model422ResponseErrorRecurringConsents
from automatic-payments_1_0_0-beta_4_yml.models.model422_response_error_recurring_consents_errors import Model422ResponseErrorRecurringConsentsErrors
from automatic-payments_1_0_0-beta_4_yml.models.month import Month
from automatic-payments_1_0_0-beta_4_yml.models.one_of_create_recurring_consent_data_recurring_configuration import OneOfCreateRecurringConsentDataRecurringConfiguration
from automatic-payments_1_0_0-beta_4_yml.models.one_of_patch_recurring_consent_data import OneOfPatchRecurringConsentData
from automatic-payments_1_0_0-beta_4_yml.models.patch_pix_payment import PatchPixPayment
from automatic-payments_1_0_0-beta_4_yml.models.patch_pix_payment_data import PatchPixPaymentData
from automatic-payments_1_0_0-beta_4_yml.models.patch_pix_payment_data_cancellation import PatchPixPaymentDataCancellation
from automatic-payments_1_0_0-beta_4_yml.models.patch_pix_payment_data_cancellation_cancelled_by import PatchPixPaymentDataCancellationCancelledBy
from automatic-payments_1_0_0-beta_4_yml.models.patch_pix_payment_data_cancellation_cancelled_by_document import PatchPixPaymentDataCancellationCancelledByDocument
from automatic-payments_1_0_0-beta_4_yml.models.patch_recurring_consent import PatchRecurringConsent
from automatic-payments_1_0_0-beta_4_yml.models.payment_pix import PaymentPix
from automatic-payments_1_0_0-beta_4_yml.models.periodic_limits import PeriodicLimits
from automatic-payments_1_0_0-beta_4_yml.models.pix_payment_cancellation import PixPaymentCancellation
from automatic-payments_1_0_0-beta_4_yml.models.pix_payment_cancellation_cancelled_by import PixPaymentCancellationCancelledBy
from automatic-payments_1_0_0-beta_4_yml.models.pix_payment_cancellation_cancelled_by_document import PixPaymentCancellationCancelledByDocument
from automatic-payments_1_0_0-beta_4_yml.models.post_creditor_account import PostCreditorAccount
from automatic-payments_1_0_0-beta_4_yml.models.post_sweeping import PostSweeping
from automatic-payments_1_0_0-beta_4_yml.models.post_sweeping_sweeping import PostSweepingSweeping
from automatic-payments_1_0_0-beta_4_yml.models.recurring_configuration import RecurringConfiguration
from automatic-payments_1_0_0-beta_4_yml.models.rejection import Rejection
from automatic-payments_1_0_0-beta_4_yml.models.rejection_reason import RejectionReason
from automatic-payments_1_0_0-beta_4_yml.models.rejection_reason_get import RejectionReasonGet
from automatic-payments_1_0_0-beta_4_yml.models.response_error import ResponseError
from automatic-payments_1_0_0-beta_4_yml.models.response_error_create_consent import ResponseErrorCreateConsent
from automatic-payments_1_0_0-beta_4_yml.models.response_error_create_consent_errors import ResponseErrorCreateConsentErrors
from automatic-payments_1_0_0-beta_4_yml.models.response_error_errors import ResponseErrorErrors
from automatic-payments_1_0_0-beta_4_yml.models.response_error_meta import ResponseErrorMeta
from automatic-payments_1_0_0-beta_4_yml.models.response_post_recurring_consent import ResponsePostRecurringConsent
from automatic-payments_1_0_0-beta_4_yml.models.response_post_recurring_consent_data import ResponsePostRecurringConsentData
from automatic-payments_1_0_0-beta_4_yml.models.response_post_recurring_consent_data_revocation import ResponsePostRecurringConsentDataRevocation
from automatic-payments_1_0_0-beta_4_yml.models.response_post_recurring_consent_data_revocation_reason import ResponsePostRecurringConsentDataRevocationReason
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_consent import ResponseRecurringConsent
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_consent_data import ResponseRecurringConsentData
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_payments_data import ResponseRecurringPaymentsData
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_payments_id_post import ResponseRecurringPaymentsIdPost
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_payments_id_read import ResponseRecurringPaymentsIdRead
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_payments_post_data import ResponseRecurringPaymentsPostData
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_pix_data import ResponseRecurringPixData
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_pix_data_inner import ResponseRecurringPixDataInner
from automatic-payments_1_0_0-beta_4_yml.models.response_recurring_pix_payment import ResponseRecurringPixPayment
from automatic-payments_1_0_0-beta_4_yml.models.risk_signals_consents import RiskSignalsConsents
from automatic-payments_1_0_0-beta_4_yml.models.risk_signals_payments import RiskSignalsPayments
from automatic-payments_1_0_0-beta_4_yml.models.risk_signals_payments_automatic import RiskSignalsPaymentsAutomatic
from automatic-payments_1_0_0-beta_4_yml.models.risk_signals_payments_manual import RiskSignalsPaymentsManual
from automatic-payments_1_0_0-beta_4_yml.models.risk_signals_payments_manual_geolocation import RiskSignalsPaymentsManualGeolocation
from automatic-payments_1_0_0-beta_4_yml.models.risk_signals_payments_manual_integrity import RiskSignalsPaymentsManualIntegrity
from automatic-payments_1_0_0-beta_4_yml.models.risk_signals_payments_manual_screen_dimensions import RiskSignalsPaymentsManualScreenDimensions
from automatic-payments_1_0_0-beta_4_yml.models.sweeping import Sweeping
from automatic-payments_1_0_0-beta_4_yml.models.vrp import Vrp
from automatic-payments_1_0_0-beta_4_yml.models.vrp_vrp import VrpVrp
from automatic-payments_1_0_0-beta_4_yml.models.vrp_vrp_global_limits import VrpVrpGlobalLimits
from automatic-payments_1_0_0-beta_4_yml.models.vrp_vrp_periodic_limits import VrpVrpPeriodicLimits
from automatic-payments_1_0_0-beta_4_yml.models.week import Week
from automatic-payments_1_0_0-beta_4_yml.models.x_fapi_interaction_id import XFapiInteractionId
from automatic-payments_1_0_0-beta_4_yml.models.year import Year
