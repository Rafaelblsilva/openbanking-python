# coding: utf-8

"""
    API Funds - Open Finance Brasil

    API de informações de operações de Fundos de Investimento Open Finance Brasil – Fase 4.  API que retorna informações de operações de investimento do tipo Fundos de Investimento mantidas nas instituições transmissoras por seus clientes, incluindo dados como informações do produto, quantidade, saldos em posição do cliente e movimentações financeiras.  Não possui segregação entre pessoa natural e pessoa jurídica. Requer consentimento do cliente para todos os endpoints.  Devem ser considerados como escopo de exposição todos os fundos de investimento classificados como: Renda Fixa, Ações, Multimercado e Cambial.  Para identificação do produto e posição do cliente, a exposição será de forma consolidada por Fundo de Investimento.  Para movimentações, a exposição se dará pela Ordem do Cliente, por exemplo, uma Ordem de Resgate é compartilhada como uma única movimentação, mesmo que esteja associada a diferentes Certificados (Cautelas).   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseFundsBalanceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference_date': 'date',
        'gross_amount': 'FundsBalancesGrossAmount',
        'net_amount': 'FundsBalancesNetAmount',
        'income_tax_provision': 'FundsBalancesIncomeTaxProvision',
        'financial_transaction_tax_provision': 'FundsBalancesFinancialTransactionTaxProvision',
        'blocked_amount': 'FundsBalancesBlockedAmount',
        'quota_quantity': 'str',
        'quota_gross_price_value': 'FundsBalancesQuotaGrossPriceValue'
    }

    attribute_map = {
        'reference_date': 'referenceDate',
        'gross_amount': 'grossAmount',
        'net_amount': 'netAmount',
        'income_tax_provision': 'incomeTaxProvision',
        'financial_transaction_tax_provision': 'financialTransactionTaxProvision',
        'blocked_amount': 'blockedAmount',
        'quota_quantity': 'quotaQuantity',
        'quota_gross_price_value': 'quotaGrossPriceValue'
    }

    def __init__(self, reference_date=None, gross_amount=None, net_amount=None, income_tax_provision=None, financial_transaction_tax_provision=None, blocked_amount=None, quota_quantity=None, quota_gross_price_value=None):  # noqa: E501
        """ResponseFundsBalanceData - a model defined in Swagger"""  # noqa: E501
        self._reference_date = None
        self._gross_amount = None
        self._net_amount = None
        self._income_tax_provision = None
        self._financial_transaction_tax_provision = None
        self._blocked_amount = None
        self._quota_quantity = None
        self._quota_gross_price_value = None
        self.discriminator = None
        self.reference_date = reference_date
        self.gross_amount = gross_amount
        self.net_amount = net_amount
        self.income_tax_provision = income_tax_provision
        self.financial_transaction_tax_provision = financial_transaction_tax_provision
        self.blocked_amount = blocked_amount
        self.quota_quantity = quota_quantity
        self.quota_gross_price_value = quota_gross_price_value

    @property
    def reference_date(self):
        """Gets the reference_date of this ResponseFundsBalanceData.  # noqa: E501

        Data da última posição consolidada disponível a que se referem os dados transacionais do cliente disponíveis nos canais eletrônicos.  # noqa: E501

        :return: The reference_date of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: date
        """
        return self._reference_date

    @reference_date.setter
    def reference_date(self, reference_date):
        """Sets the reference_date of this ResponseFundsBalanceData.

        Data da última posição consolidada disponível a que se referem os dados transacionais do cliente disponíveis nos canais eletrônicos.  # noqa: E501

        :param reference_date: The reference_date of this ResponseFundsBalanceData.  # noqa: E501
        :type: date
        """
        if reference_date is None:
            raise ValueError("Invalid value for `reference_date`, must not be `None`")  # noqa: E501

        self._reference_date = reference_date

    @property
    def gross_amount(self):
        """Gets the gross_amount of this ResponseFundsBalanceData.  # noqa: E501


        :return: The gross_amount of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: FundsBalancesGrossAmount
        """
        return self._gross_amount

    @gross_amount.setter
    def gross_amount(self, gross_amount):
        """Sets the gross_amount of this ResponseFundsBalanceData.


        :param gross_amount: The gross_amount of this ResponseFundsBalanceData.  # noqa: E501
        :type: FundsBalancesGrossAmount
        """
        if gross_amount is None:
            raise ValueError("Invalid value for `gross_amount`, must not be `None`")  # noqa: E501

        self._gross_amount = gross_amount

    @property
    def net_amount(self):
        """Gets the net_amount of this ResponseFundsBalanceData.  # noqa: E501


        :return: The net_amount of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: FundsBalancesNetAmount
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this ResponseFundsBalanceData.


        :param net_amount: The net_amount of this ResponseFundsBalanceData.  # noqa: E501
        :type: FundsBalancesNetAmount
        """
        if net_amount is None:
            raise ValueError("Invalid value for `net_amount`, must not be `None`")  # noqa: E501

        self._net_amount = net_amount

    @property
    def income_tax_provision(self):
        """Gets the income_tax_provision of this ResponseFundsBalanceData.  # noqa: E501


        :return: The income_tax_provision of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: FundsBalancesIncomeTaxProvision
        """
        return self._income_tax_provision

    @income_tax_provision.setter
    def income_tax_provision(self, income_tax_provision):
        """Sets the income_tax_provision of this ResponseFundsBalanceData.


        :param income_tax_provision: The income_tax_provision of this ResponseFundsBalanceData.  # noqa: E501
        :type: FundsBalancesIncomeTaxProvision
        """
        if income_tax_provision is None:
            raise ValueError("Invalid value for `income_tax_provision`, must not be `None`")  # noqa: E501

        self._income_tax_provision = income_tax_provision

    @property
    def financial_transaction_tax_provision(self):
        """Gets the financial_transaction_tax_provision of this ResponseFundsBalanceData.  # noqa: E501


        :return: The financial_transaction_tax_provision of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: FundsBalancesFinancialTransactionTaxProvision
        """
        return self._financial_transaction_tax_provision

    @financial_transaction_tax_provision.setter
    def financial_transaction_tax_provision(self, financial_transaction_tax_provision):
        """Sets the financial_transaction_tax_provision of this ResponseFundsBalanceData.


        :param financial_transaction_tax_provision: The financial_transaction_tax_provision of this ResponseFundsBalanceData.  # noqa: E501
        :type: FundsBalancesFinancialTransactionTaxProvision
        """
        if financial_transaction_tax_provision is None:
            raise ValueError("Invalid value for `financial_transaction_tax_provision`, must not be `None`")  # noqa: E501

        self._financial_transaction_tax_provision = financial_transaction_tax_provision

    @property
    def blocked_amount(self):
        """Gets the blocked_amount of this ResponseFundsBalanceData.  # noqa: E501


        :return: The blocked_amount of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: FundsBalancesBlockedAmount
        """
        return self._blocked_amount

    @blocked_amount.setter
    def blocked_amount(self, blocked_amount):
        """Sets the blocked_amount of this ResponseFundsBalanceData.


        :param blocked_amount: The blocked_amount of this ResponseFundsBalanceData.  # noqa: E501
        :type: FundsBalancesBlockedAmount
        """
        if blocked_amount is None:
            raise ValueError("Invalid value for `blocked_amount`, must not be `None`")  # noqa: E501

        self._blocked_amount = blocked_amount

    @property
    def quota_quantity(self):
        """Gets the quota_quantity of this ResponseFundsBalanceData.  # noqa: E501

        Quantidade de cotas detidas em posição do cliente .  # noqa: E501

        :return: The quota_quantity of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: str
        """
        return self._quota_quantity

    @quota_quantity.setter
    def quota_quantity(self, quota_quantity):
        """Sets the quota_quantity of this ResponseFundsBalanceData.

        Quantidade de cotas detidas em posição do cliente .  # noqa: E501

        :param quota_quantity: The quota_quantity of this ResponseFundsBalanceData.  # noqa: E501
        :type: str
        """
        if quota_quantity is None:
            raise ValueError("Invalid value for `quota_quantity`, must not be `None`")  # noqa: E501

        self._quota_quantity = quota_quantity

    @property
    def quota_gross_price_value(self):
        """Gets the quota_gross_price_value of this ResponseFundsBalanceData.  # noqa: E501


        :return: The quota_gross_price_value of this ResponseFundsBalanceData.  # noqa: E501
        :rtype: FundsBalancesQuotaGrossPriceValue
        """
        return self._quota_gross_price_value

    @quota_gross_price_value.setter
    def quota_gross_price_value(self, quota_gross_price_value):
        """Sets the quota_gross_price_value of this ResponseFundsBalanceData.


        :param quota_gross_price_value: The quota_gross_price_value of this ResponseFundsBalanceData.  # noqa: E501
        :type: FundsBalancesQuotaGrossPriceValue
        """
        if quota_gross_price_value is None:
            raise ValueError("Invalid value for `quota_gross_price_value`, must not be `None`")  # noqa: E501

        self._quota_gross_price_value = quota_gross_price_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseFundsBalanceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseFundsBalanceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
