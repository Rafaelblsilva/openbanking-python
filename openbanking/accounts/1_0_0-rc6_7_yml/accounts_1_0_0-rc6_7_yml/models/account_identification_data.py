# coding: utf-8

"""
    API Accounts - Open Banking Brasil

    API de contas de depósito à vista, contas de poupança e contas pré-pagas do Open Banking Brasil – Fase 2. API que retorna informações de contas de depósito à vista, contas de poupança e contas de pagamento pré-pagas mantidas nas instituições transmissoras por seus clientes, incluindo dados de identificação da conta, saldos, limites e transações.\\ Não possui segregação entre pessoa natural e pessoa jurídica.\\ Requer consentimento do cliente para todos os `endpoints`.  # Orientações A `Role`  do diretório de participantes relacionada à presente API é a `DADOS`.\\ Para todos os `endpoints` desta API é previsto o envio de um `token` através do header `Authorization`.\\ Este token deverá estar relacionado ao consentimento (`consentId`) mantido na instituição transmissora dos dados, o qual permitirá a pesquisa e retorno, na API em questão, dos  dados relacionados ao `consentId` específico relacionado.\\ Os dados serão devolvidos na consulta desde que o `consentId` relacionado corresponda a um consentimento válido e com o status `AUTHORISED`.\\ É também necessário que o recurso em questão (conta, contrato, etc) esteja disponível na instituição transmissora (ou seja, sem boqueios de qualquer natureza e com todas as autorizações/consentimentos já autorizados).\\ Além disso as `permissions` necessárias deverão ter sido solicitadas quando da criação do consentimento relacionado (`consentId`).\\ Relacionamos a seguir as `permissions` necessárias para a consulta de dados em cada `endpoint` da presente API.  ## Permissions necessárias para a API Accounts  Para cada um dos paths desta API, além dos escopos (`scopes`) indicados existem `permissions` que deverão ser observadas:  ### `/accounts`   - permissions:     - GET: **ACCOUNTS_READ** ### `/accounts/{accountId}`   - permissions:     - GET: **ACCOUNTS_READ** ### `/accounts/{accountId}/balances`   - permissions:     - GET: **ACCOUNTS_BALANCES_READ** ### `/accounts/{accountId}/transactions`   - permissions:     - GET: **ACCOUNTS_TRANSACTIONS_READ** ### `/accounts/{accountId}/overdraft-limits`   - permissions:     - GET: **ACCOUNTS_OVERDRAFT_LIMITS_READ**   # noqa: E501

    OpenAPI spec version: 1.0.0-rc6.7
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountIdentificationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compe_code': 'str',
        'branch_code': 'str',
        'number': 'str',
        'check_digit': 'str',
        'type': 'EnumAccountType',
        'subtype': 'EnumAccountSubType',
        'currency': 'str'
    }

    attribute_map = {
        'compe_code': 'compeCode',
        'branch_code': 'branchCode',
        'number': 'number',
        'check_digit': 'checkDigit',
        'type': 'type',
        'subtype': 'subtype',
        'currency': 'currency'
    }

    def __init__(self, compe_code=None, branch_code=None, number=None, check_digit=None, type=None, subtype=None, currency=None):  # noqa: E501
        """AccountIdentificationData - a model defined in Swagger"""  # noqa: E501
        self._compe_code = None
        self._branch_code = None
        self._number = None
        self._check_digit = None
        self._type = None
        self._subtype = None
        self._currency = None
        self.discriminator = None
        self.compe_code = compe_code
        self.branch_code = branch_code
        self.number = number
        self.check_digit = check_digit
        self.type = type
        self.subtype = subtype
        self.currency = currency

    @property
    def compe_code(self):
        """Gets the compe_code of this AccountIdentificationData.  # noqa: E501

        Código identificador atribuído pelo Banco Central do Brasil às instituições participantes do STR (Sistema de Transferência de reservas). O número-código substituiu o antigo código COMPE. Todos os participantes do STR, exceto as Infraestruturas do Mercado Financeiro (IMF) e a Secretaria do Tesouro Nacional, possuem um número-código independentemente de participarem da Centralizadora da Compensação de Cheques (Compe). O campo tem a anotação “n/a” (“não se aplica”) para os participantes do STR aos quais não é atribuído um número-código  # noqa: E501

        :return: The compe_code of this AccountIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._compe_code

    @compe_code.setter
    def compe_code(self, compe_code):
        """Sets the compe_code of this AccountIdentificationData.

        Código identificador atribuído pelo Banco Central do Brasil às instituições participantes do STR (Sistema de Transferência de reservas). O número-código substituiu o antigo código COMPE. Todos os participantes do STR, exceto as Infraestruturas do Mercado Financeiro (IMF) e a Secretaria do Tesouro Nacional, possuem um número-código independentemente de participarem da Centralizadora da Compensação de Cheques (Compe). O campo tem a anotação “n/a” (“não se aplica”) para os participantes do STR aos quais não é atribuído um número-código  # noqa: E501

        :param compe_code: The compe_code of this AccountIdentificationData.  # noqa: E501
        :type: str
        """
        if compe_code is None:
            raise ValueError("Invalid value for `compe_code`, must not be `None`")  # noqa: E501

        self._compe_code = compe_code

    @property
    def branch_code(self):
        """Gets the branch_code of this AccountIdentificationData.  # noqa: E501

        Código da Agência detentora da conta. (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito, no exercício de atividades da instituição, não podendo ser móvel ou transitória)   # noqa: E501

        :return: The branch_code of this AccountIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this AccountIdentificationData.

        Código da Agência detentora da conta. (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito, no exercício de atividades da instituição, não podendo ser móvel ou transitória)   # noqa: E501

        :param branch_code: The branch_code of this AccountIdentificationData.  # noqa: E501
        :type: str
        """
        if branch_code is None:
            raise ValueError("Invalid value for `branch_code`, must not be `None`")  # noqa: E501

        self._branch_code = branch_code

    @property
    def number(self):
        """Gets the number of this AccountIdentificationData.  # noqa: E501

        Número da conta   # noqa: E501

        :return: The number of this AccountIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this AccountIdentificationData.

        Número da conta   # noqa: E501

        :param number: The number of this AccountIdentificationData.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def check_digit(self):
        """Gets the check_digit of this AccountIdentificationData.  # noqa: E501

        Dígito da conta   # noqa: E501

        :return: The check_digit of this AccountIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._check_digit

    @check_digit.setter
    def check_digit(self, check_digit):
        """Sets the check_digit of this AccountIdentificationData.

        Dígito da conta   # noqa: E501

        :param check_digit: The check_digit of this AccountIdentificationData.  # noqa: E501
        :type: str
        """
        if check_digit is None:
            raise ValueError("Invalid value for `check_digit`, must not be `None`")  # noqa: E501

        self._check_digit = check_digit

    @property
    def type(self):
        """Gets the type of this AccountIdentificationData.  # noqa: E501


        :return: The type of this AccountIdentificationData.  # noqa: E501
        :rtype: EnumAccountType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountIdentificationData.


        :param type: The type of this AccountIdentificationData.  # noqa: E501
        :type: EnumAccountType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def subtype(self):
        """Gets the subtype of this AccountIdentificationData.  # noqa: E501


        :return: The subtype of this AccountIdentificationData.  # noqa: E501
        :rtype: EnumAccountSubType
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this AccountIdentificationData.


        :param subtype: The subtype of this AccountIdentificationData.  # noqa: E501
        :type: EnumAccountSubType
        """
        if subtype is None:
            raise ValueError("Invalid value for `subtype`, must not be `None`")  # noqa: E501

        self._subtype = subtype

    @property
    def currency(self):
        """Gets the currency of this AccountIdentificationData.  # noqa: E501

        Moeda referente ao valor da transação, segundo modelo ISO-4217. p.ex. 'BRL'  Todos os saldos informados estão representados com a moeda vigente do Brasil   # noqa: E501

        :return: The currency of this AccountIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountIdentificationData.

        Moeda referente ao valor da transação, segundo modelo ISO-4217. p.ex. 'BRL'  Todos os saldos informados estão representados com a moeda vigente do Brasil   # noqa: E501

        :param currency: The currency of this AccountIdentificationData.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountIdentificationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountIdentificationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
