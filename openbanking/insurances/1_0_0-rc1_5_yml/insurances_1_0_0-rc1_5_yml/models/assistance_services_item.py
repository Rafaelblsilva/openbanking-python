# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento são referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.5
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssistanceServicesItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package': 'EnumAssistanceServicesPackageType',
        'detail': 'str',
        'charge_type': 'EnumChargeTypeSignalingType'
    }

    attribute_map = {
        'package': 'package',
        'detail': 'detail',
        'charge_type': 'chargeType'
    }

    def __init__(self, package=None, detail=None, charge_type=None):  # noqa: E501
        """AssistanceServicesItem - a model defined in Swagger"""  # noqa: E501
        self._package = None
        self._detail = None
        self._charge_type = None
        self.discriminator = None
        if package is not None:
            self.package = package
        if detail is not None:
            self.detail = detail
        if charge_type is not None:
            self.charge_type = charge_type

    @property
    def package(self):
        """Gets the package of this AssistanceServicesItem.  # noqa: E501


        :return: The package of this AssistanceServicesItem.  # noqa: E501
        :rtype: EnumAssistanceServicesPackageType
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this AssistanceServicesItem.


        :param package: The package of this AssistanceServicesItem.  # noqa: E501
        :type: EnumAssistanceServicesPackageType
        """

        self._package = package

    @property
    def detail(self):
        """Gets the detail of this AssistanceServicesItem.  # noqa: E501

        Campo livre para descrição dos serviços ofertados por cada sociedade participante (incluindo indicação se o serviço é Gratuito ou Pago)  # noqa: E501

        :return: The detail of this AssistanceServicesItem.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this AssistanceServicesItem.

        Campo livre para descrição dos serviços ofertados por cada sociedade participante (incluindo indicação se o serviço é Gratuito ou Pago)  # noqa: E501

        :param detail: The detail of this AssistanceServicesItem.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def charge_type(self):
        """Gets the charge_type of this AssistanceServicesItem.  # noqa: E501


        :return: The charge_type of this AssistanceServicesItem.  # noqa: E501
        :rtype: EnumChargeTypeSignalingType
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this AssistanceServicesItem.


        :param charge_type: The charge_type of this AssistanceServicesItem.  # noqa: E501
        :type: EnumChargeTypeSignalingType
        """

        self._charge_type = charge_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssistanceServicesItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssistanceServicesItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
