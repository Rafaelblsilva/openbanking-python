# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento são referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.5
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutomotiveModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'year': 'float',
        'manufacturer': 'str',
        'fipe_code': 'str'
    }

    attribute_map = {
        'model': 'model',
        'year': 'year',
        'manufacturer': 'manufacturer',
        'fipe_code': 'fipeCode'
    }

    def __init__(self, model=None, year=None, manufacturer=None, fipe_code=None):  # noqa: E501
        """AutomotiveModel - a model defined in Swagger"""  # noqa: E501
        self._model = None
        self._year = None
        self._manufacturer = None
        self._fipe_code = None
        self.discriminator = None
        if model is not None:
            self.model = model
        if year is not None:
            self.year = year
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if fipe_code is not None:
            self.fipe_code = fipe_code

    @property
    def model(self):
        """Gets the model of this AutomotiveModel.  # noqa: E501

        Chamada via código FIPE – retorna os veículos (Modelo) que são cobertos no produto  # noqa: E501

        :return: The model of this AutomotiveModel.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AutomotiveModel.

        Chamada via código FIPE – retorna os veículos (Modelo) que são cobertos no produto  # noqa: E501

        :param model: The model of this AutomotiveModel.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def year(self):
        """Gets the year of this AutomotiveModel.  # noqa: E501

        Chamada via código FIPE – retorna os veículos (Ano) que são cobertos no produto  # noqa: E501

        :return: The year of this AutomotiveModel.  # noqa: E501
        :rtype: float
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AutomotiveModel.

        Chamada via código FIPE – retorna os veículos (Ano) que são cobertos no produto  # noqa: E501

        :param year: The year of this AutomotiveModel.  # noqa: E501
        :type: float
        """

        self._year = year

    @property
    def manufacturer(self):
        """Gets the manufacturer of this AutomotiveModel.  # noqa: E501

        Chamada via código FIPE – retorna os veículos (Marca) que são cobertos no produto  # noqa: E501

        :return: The manufacturer of this AutomotiveModel.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this AutomotiveModel.

        Chamada via código FIPE – retorna os veículos (Marca) que são cobertos no produto  # noqa: E501

        :param manufacturer: The manufacturer of this AutomotiveModel.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def fipe_code(self):
        """Gets the fipe_code of this AutomotiveModel.  # noqa: E501

        Chamada via código FIPE – retorna os veículos (código fipe) que são cobertos no produto  # noqa: E501

        :return: The fipe_code of this AutomotiveModel.  # noqa: E501
        :rtype: str
        """
        return self._fipe_code

    @fipe_code.setter
    def fipe_code(self, fipe_code):
        """Sets the fipe_code of this AutomotiveModel.

        Chamada via código FIPE – retorna os veículos (código fipe) que são cobertos no produto  # noqa: E501

        :param fipe_code: The fipe_code of this AutomotiveModel.  # noqa: E501
        :type: str
        """

        self._fipe_code = fipe_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomotiveModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomotiveModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
