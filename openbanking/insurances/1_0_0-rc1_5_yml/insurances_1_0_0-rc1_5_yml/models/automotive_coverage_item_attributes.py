# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento são referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.5
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutomotiveCoverageItemAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_lmi': 'CoverageItemAttributesMinLMI',
        'max_lmi': 'CoverageItemAttributesMaxLMI',
        'new_car': 'NewCar',
        'full_indemnity_percentage': 'str',
        'deductible_types': 'list[EnumCoverageItemDeductibleType]',
        'full_indemnity_deductible': 'bool',
        'deductible_payment_by_coverage': 'bool',
        'deductible_percentage': 'str',
        'mandatory_participation': 'str',
        'geographic_scope': 'AutomotiveGeoGraphicScope',
        'contract_base': 'ContractBase'
    }

    attribute_map = {
        'min_lmi': 'minLMI',
        'max_lmi': 'maxLMI',
        'new_car': 'newCar',
        'full_indemnity_percentage': 'fullIndemnityPercentage',
        'deductible_types': 'deductibleTypes',
        'full_indemnity_deductible': 'fullIndemnityDeductible',
        'deductible_payment_by_coverage': 'deductiblePaymentByCoverage',
        'deductible_percentage': 'deductiblePercentage',
        'mandatory_participation': 'mandatoryParticipation',
        'geographic_scope': 'geographicScope',
        'contract_base': 'contractBase'
    }

    def __init__(self, min_lmi=None, max_lmi=None, new_car=None, full_indemnity_percentage=None, deductible_types=None, full_indemnity_deductible=None, deductible_payment_by_coverage=None, deductible_percentage=None, mandatory_participation=None, geographic_scope=None, contract_base=None):  # noqa: E501
        """AutomotiveCoverageItemAttributes - a model defined in Swagger"""  # noqa: E501
        self._min_lmi = None
        self._max_lmi = None
        self._new_car = None
        self._full_indemnity_percentage = None
        self._deductible_types = None
        self._full_indemnity_deductible = None
        self._deductible_payment_by_coverage = None
        self._deductible_percentage = None
        self._mandatory_participation = None
        self._geographic_scope = None
        self._contract_base = None
        self.discriminator = None
        if min_lmi is not None:
            self.min_lmi = min_lmi
        if max_lmi is not None:
            self.max_lmi = max_lmi
        if new_car is not None:
            self.new_car = new_car
        if full_indemnity_percentage is not None:
            self.full_indemnity_percentage = full_indemnity_percentage
        self.deductible_types = deductible_types
        self.full_indemnity_deductible = full_indemnity_deductible
        if deductible_payment_by_coverage is not None:
            self.deductible_payment_by_coverage = deductible_payment_by_coverage
        if deductible_percentage is not None:
            self.deductible_percentage = deductible_percentage
        if mandatory_participation is not None:
            self.mandatory_participation = mandatory_participation
        if geographic_scope is not None:
            self.geographic_scope = geographic_scope
        if contract_base is not None:
            self.contract_base = contract_base

    @property
    def min_lmi(self):
        """Gets the min_lmi of this AutomotiveCoverageItemAttributes.  # noqa: E501


        :return: The min_lmi of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: CoverageItemAttributesMinLMI
        """
        return self._min_lmi

    @min_lmi.setter
    def min_lmi(self, min_lmi):
        """Sets the min_lmi of this AutomotiveCoverageItemAttributes.


        :param min_lmi: The min_lmi of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: CoverageItemAttributesMinLMI
        """

        self._min_lmi = min_lmi

    @property
    def max_lmi(self):
        """Gets the max_lmi of this AutomotiveCoverageItemAttributes.  # noqa: E501


        :return: The max_lmi of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: CoverageItemAttributesMaxLMI
        """
        return self._max_lmi

    @max_lmi.setter
    def max_lmi(self, max_lmi):
        """Sets the max_lmi of this AutomotiveCoverageItemAttributes.


        :param max_lmi: The max_lmi of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: CoverageItemAttributesMaxLMI
        """

        self._max_lmi = max_lmi

    @property
    def new_car(self):
        """Gets the new_car of this AutomotiveCoverageItemAttributes.  # noqa: E501


        :return: The new_car of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: NewCar
        """
        return self._new_car

    @new_car.setter
    def new_car(self, new_car):
        """Sets the new_car of this AutomotiveCoverageItemAttributes.


        :param new_car: The new_car of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: NewCar
        """

        self._new_car = new_car

    @property
    def full_indemnity_percentage(self):
        """Gets the full_indemnity_percentage of this AutomotiveCoverageItemAttributes.  # noqa: E501

        Será caracterizada a indenização integral quando os prejuízos resultantes de um mesmo sinistro, atingirem ou ultrapassarem a quantia apurada a partir da aplicação de percentual previamente determinado sobre o valor contratado. (Circular 269/2004).  # noqa: E501

        :return: The full_indemnity_percentage of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: str
        """
        return self._full_indemnity_percentage

    @full_indemnity_percentage.setter
    def full_indemnity_percentage(self, full_indemnity_percentage):
        """Sets the full_indemnity_percentage of this AutomotiveCoverageItemAttributes.

        Será caracterizada a indenização integral quando os prejuízos resultantes de um mesmo sinistro, atingirem ou ultrapassarem a quantia apurada a partir da aplicação de percentual previamente determinado sobre o valor contratado. (Circular 269/2004).  # noqa: E501

        :param full_indemnity_percentage: The full_indemnity_percentage of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: str
        """

        self._full_indemnity_percentage = full_indemnity_percentage

    @property
    def deductible_types(self):
        """Gets the deductible_types of this AutomotiveCoverageItemAttributes.  # noqa: E501

        Listagem de tipo de franquia para cada tipo de cobertura do produto.  # noqa: E501

        :return: The deductible_types of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: list[EnumCoverageItemDeductibleType]
        """
        return self._deductible_types

    @deductible_types.setter
    def deductible_types(self, deductible_types):
        """Sets the deductible_types of this AutomotiveCoverageItemAttributes.

        Listagem de tipo de franquia para cada tipo de cobertura do produto.  # noqa: E501

        :param deductible_types: The deductible_types of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: list[EnumCoverageItemDeductibleType]
        """
        if deductible_types is None:
            raise ValueError("Invalid value for `deductible_types`, must not be `None`")  # noqa: E501

        self._deductible_types = deductible_types

    @property
    def full_indemnity_deductible(self):
        """Gets the full_indemnity_deductible of this AutomotiveCoverageItemAttributes.  # noqa: E501

        (Circular 269/2004). A considerar os domínios abaixo: 1. true 2. false   # noqa: E501

        :return: The full_indemnity_deductible of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._full_indemnity_deductible

    @full_indemnity_deductible.setter
    def full_indemnity_deductible(self, full_indemnity_deductible):
        """Sets the full_indemnity_deductible of this AutomotiveCoverageItemAttributes.

        (Circular 269/2004). A considerar os domínios abaixo: 1. true 2. false   # noqa: E501

        :param full_indemnity_deductible: The full_indemnity_deductible of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: bool
        """
        if full_indemnity_deductible is None:
            raise ValueError("Invalid value for `full_indemnity_deductible`, must not be `None`")  # noqa: E501

        self._full_indemnity_deductible = full_indemnity_deductible

    @property
    def deductible_payment_by_coverage(self):
        """Gets the deductible_payment_by_coverage of this AutomotiveCoverageItemAttributes.  # noqa: E501

        Mudança do campo com a sinalização para cada cobertura se a seguradora exige pagamento de franquia.  1. true  2. false   # noqa: E501

        :return: The deductible_payment_by_coverage of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._deductible_payment_by_coverage

    @deductible_payment_by_coverage.setter
    def deductible_payment_by_coverage(self, deductible_payment_by_coverage):
        """Sets the deductible_payment_by_coverage of this AutomotiveCoverageItemAttributes.

        Mudança do campo com a sinalização para cada cobertura se a seguradora exige pagamento de franquia.  1. true  2. false   # noqa: E501

        :param deductible_payment_by_coverage: The deductible_payment_by_coverage of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: bool
        """

        self._deductible_payment_by_coverage = deductible_payment_by_coverage

    @property
    def deductible_percentage(self):
        """Gets the deductible_percentage of this AutomotiveCoverageItemAttributes.  # noqa: E501

        Percentual de Franquia  # noqa: E501

        :return: The deductible_percentage of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: str
        """
        return self._deductible_percentage

    @deductible_percentage.setter
    def deductible_percentage(self, deductible_percentage):
        """Sets the deductible_percentage of this AutomotiveCoverageItemAttributes.

        Percentual de Franquia  # noqa: E501

        :param deductible_percentage: The deductible_percentage of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: str
        """

        self._deductible_percentage = deductible_percentage

    @property
    def mandatory_participation(self):
        """Gets the mandatory_participation of this AutomotiveCoverageItemAttributes.  # noqa: E501

        Participação Obrigatória é o valor ou percentual definido na apólice referente à responsabilidade do Segurado nos prejuízos indenizáveis decorrentes de sinistros cobertos. (Circular SUSEP 347/07). Listagem de percentual de Franquia/Percentual Participação Obrigatória do Segurado estabelecida pela sociedade para cada tipo de cobertura do  produto.   # noqa: E501

        :return: The mandatory_participation of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: str
        """
        return self._mandatory_participation

    @mandatory_participation.setter
    def mandatory_participation(self, mandatory_participation):
        """Sets the mandatory_participation of this AutomotiveCoverageItemAttributes.

        Participação Obrigatória é o valor ou percentual definido na apólice referente à responsabilidade do Segurado nos prejuízos indenizáveis decorrentes de sinistros cobertos. (Circular SUSEP 347/07). Listagem de percentual de Franquia/Percentual Participação Obrigatória do Segurado estabelecida pela sociedade para cada tipo de cobertura do  produto.   # noqa: E501

        :param mandatory_participation: The mandatory_participation of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: str
        """

        self._mandatory_participation = mandatory_participation

    @property
    def geographic_scope(self):
        """Gets the geographic_scope of this AutomotiveCoverageItemAttributes.  # noqa: E501


        :return: The geographic_scope of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: AutomotiveGeoGraphicScope
        """
        return self._geographic_scope

    @geographic_scope.setter
    def geographic_scope(self, geographic_scope):
        """Sets the geographic_scope of this AutomotiveCoverageItemAttributes.


        :param geographic_scope: The geographic_scope of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: AutomotiveGeoGraphicScope
        """

        self._geographic_scope = geographic_scope

    @property
    def contract_base(self):
        """Gets the contract_base of this AutomotiveCoverageItemAttributes.  # noqa: E501


        :return: The contract_base of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :rtype: ContractBase
        """
        return self._contract_base

    @contract_base.setter
    def contract_base(self, contract_base):
        """Sets the contract_base of this AutomotiveCoverageItemAttributes.


        :param contract_base: The contract_base of this AutomotiveCoverageItemAttributes.  # noqa: E501
        :type: ContractBase
        """

        self._contract_base = contract_base

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomotiveCoverageItemAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomotiveCoverageItemAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
