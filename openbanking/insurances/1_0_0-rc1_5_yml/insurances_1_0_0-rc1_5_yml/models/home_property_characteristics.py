# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento s√£o referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.5
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HomePropertyCharacteristics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'EnumHomePropertyType',
        'build_types': 'list[EnumHomePropertyBuildType]',
        'usage_types': 'list[EnumHomePropertyUsageType]',
        'importance_insureds': 'list[EnumHomeImportanceInsuredType]'
    }

    attribute_map = {
        'type': 'type',
        'build_types': 'buildTypes',
        'usage_types': 'usageTypes',
        'importance_insureds': 'importanceInsureds'
    }

    def __init__(self, type=None, build_types=None, usage_types=None, importance_insureds=None):  # noqa: E501
        """HomePropertyCharacteristics - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._build_types = None
        self._usage_types = None
        self._importance_insureds = None
        self.discriminator = None
        self.type = type
        self.build_types = build_types
        self.usage_types = usage_types
        self.importance_insureds = importance_insureds

    @property
    def type(self):
        """Gets the type of this HomePropertyCharacteristics.  # noqa: E501


        :return: The type of this HomePropertyCharacteristics.  # noqa: E501
        :rtype: EnumHomePropertyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HomePropertyCharacteristics.


        :param type: The type of this HomePropertyCharacteristics.  # noqa: E501
        :type: EnumHomePropertyType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def build_types(self):
        """Gets the build_types of this HomePropertyCharacteristics.  # noqa: E501


        :return: The build_types of this HomePropertyCharacteristics.  # noqa: E501
        :rtype: list[EnumHomePropertyBuildType]
        """
        return self._build_types

    @build_types.setter
    def build_types(self, build_types):
        """Sets the build_types of this HomePropertyCharacteristics.


        :param build_types: The build_types of this HomePropertyCharacteristics.  # noqa: E501
        :type: list[EnumHomePropertyBuildType]
        """
        if build_types is None:
            raise ValueError("Invalid value for `build_types`, must not be `None`")  # noqa: E501

        self._build_types = build_types

    @property
    def usage_types(self):
        """Gets the usage_types of this HomePropertyCharacteristics.  # noqa: E501


        :return: The usage_types of this HomePropertyCharacteristics.  # noqa: E501
        :rtype: list[EnumHomePropertyUsageType]
        """
        return self._usage_types

    @usage_types.setter
    def usage_types(self, usage_types):
        """Sets the usage_types of this HomePropertyCharacteristics.


        :param usage_types: The usage_types of this HomePropertyCharacteristics.  # noqa: E501
        :type: list[EnumHomePropertyUsageType]
        """
        if usage_types is None:
            raise ValueError("Invalid value for `usage_types`, must not be `None`")  # noqa: E501

        self._usage_types = usage_types

    @property
    def importance_insureds(self):
        """Gets the importance_insureds of this HomePropertyCharacteristics.  # noqa: E501


        :return: The importance_insureds of this HomePropertyCharacteristics.  # noqa: E501
        :rtype: list[EnumHomeImportanceInsuredType]
        """
        return self._importance_insureds

    @importance_insureds.setter
    def importance_insureds(self, importance_insureds):
        """Sets the importance_insureds of this HomePropertyCharacteristics.


        :param importance_insureds: The importance_insureds of this HomePropertyCharacteristics.  # noqa: E501
        :type: list[EnumHomeImportanceInsuredType]
        """
        if importance_insureds is None:
            raise ValueError("Invalid value for `importance_insureds`, must not be `None`")  # noqa: E501

        self._importance_insureds = importance_insureds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomePropertyCharacteristics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomePropertyCharacteristics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
