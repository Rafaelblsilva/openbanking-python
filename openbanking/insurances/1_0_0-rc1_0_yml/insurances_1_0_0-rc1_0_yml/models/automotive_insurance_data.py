# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento são referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutomotiveInsuranceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'Participant',
        'society': 'Society',
        'name': 'str',
        'code': 'str',
        'coverages': 'list[AutomotiveCoverageItem]',
        'car_parts': 'list[AutomotivePartsItem]',
        'car_model': 'AutomotiveModel',
        'vehicle_overnight_postal_code': 'float',
        'additionals': 'list[EnumInsuranceAdditionalType]',
        'additional_info': 'str',
        'assistance_services': 'list[AssistanceServicesItem]',
        'terms_and_conditions': 'list[TermsAndConditionsItem]',
        'terms': 'list[EnumInsuranceTermType]',
        'terms_additional_info': 'str',
        'customer_service': 'EnumCustomerServiceType',
        'premium_payment': 'PremiumPayment',
        'minimum_requirement': 'InsuranceMinimumRequirement',
        'target_audience': 'EnumTargetAudience'
    }

    attribute_map = {
        'participant': 'participant',
        'society': 'society',
        'name': 'name',
        'code': 'code',
        'coverages': 'coverages',
        'car_parts': 'carParts',
        'car_model': 'carModel',
        'vehicle_overnight_postal_code': 'vehicleOvernightPostalCode',
        'additionals': 'additionals',
        'additional_info': 'additionalInfo',
        'assistance_services': 'assistanceServices',
        'terms_and_conditions': 'termsAndConditions',
        'terms': 'terms',
        'terms_additional_info': 'termsAdditionalInfo',
        'customer_service': 'customerService',
        'premium_payment': 'premiumPayment',
        'minimum_requirement': 'minimumRequirement',
        'target_audience': 'targetAudience'
    }

    def __init__(self, participant=None, society=None, name=None, code=None, coverages=None, car_parts=None, car_model=None, vehicle_overnight_postal_code=None, additionals=None, additional_info=None, assistance_services=None, terms_and_conditions=None, terms=None, terms_additional_info=None, customer_service=None, premium_payment=None, minimum_requirement=None, target_audience=None):  # noqa: E501
        """AutomotiveInsuranceData - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._society = None
        self._name = None
        self._code = None
        self._coverages = None
        self._car_parts = None
        self._car_model = None
        self._vehicle_overnight_postal_code = None
        self._additionals = None
        self._additional_info = None
        self._assistance_services = None
        self._terms_and_conditions = None
        self._terms = None
        self._terms_additional_info = None
        self._customer_service = None
        self._premium_payment = None
        self._minimum_requirement = None
        self._target_audience = None
        self.discriminator = None
        self.participant = participant
        self.society = society
        self.name = name
        self.code = code
        self.coverages = coverages
        if car_parts is not None:
            self.car_parts = car_parts
        if car_model is not None:
            self.car_model = car_model
        if vehicle_overnight_postal_code is not None:
            self.vehicle_overnight_postal_code = vehicle_overnight_postal_code
        if additionals is not None:
            self.additionals = additionals
        if additional_info is not None:
            self.additional_info = additional_info
        if assistance_services is not None:
            self.assistance_services = assistance_services
        self.terms_and_conditions = terms_and_conditions
        self.terms = terms
        if terms_additional_info is not None:
            self.terms_additional_info = terms_additional_info
        if customer_service is not None:
            self.customer_service = customer_service
        if premium_payment is not None:
            self.premium_payment = premium_payment
        self.minimum_requirement = minimum_requirement
        self.target_audience = target_audience

    @property
    def participant(self):
        """Gets the participant of this AutomotiveInsuranceData.  # noqa: E501


        :return: The participant of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: Participant
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this AutomotiveInsuranceData.


        :param participant: The participant of this AutomotiveInsuranceData.  # noqa: E501
        :type: Participant
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def society(self):
        """Gets the society of this AutomotiveInsuranceData.  # noqa: E501


        :return: The society of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: Society
        """
        return self._society

    @society.setter
    def society(self, society):
        """Sets the society of this AutomotiveInsuranceData.


        :param society: The society of this AutomotiveInsuranceData.  # noqa: E501
        :type: Society
        """
        if society is None:
            raise ValueError("Invalid value for `society`, must not be `None`")  # noqa: E501

        self._society = society

    @property
    def name(self):
        """Gets the name of this AutomotiveInsuranceData.  # noqa: E501

        Nome comercial do produto, pelo qual é identificado nos canais de distribuição e atendimento da sociedade.  # noqa: E501

        :return: The name of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomotiveInsuranceData.

        Nome comercial do produto, pelo qual é identificado nos canais de distribuição e atendimento da sociedade.  # noqa: E501

        :param name: The name of this AutomotiveInsuranceData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this AutomotiveInsuranceData.  # noqa: E501

        Código único a ser definido pela sociedade.  # noqa: E501

        :return: The code of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AutomotiveInsuranceData.

        Código único a ser definido pela sociedade.  # noqa: E501

        :param code: The code of this AutomotiveInsuranceData.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def coverages(self):
        """Gets the coverages of this AutomotiveInsuranceData.  # noqa: E501

        Coberturas  # noqa: E501

        :return: The coverages of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: list[AutomotiveCoverageItem]
        """
        return self._coverages

    @coverages.setter
    def coverages(self, coverages):
        """Sets the coverages of this AutomotiveInsuranceData.

        Coberturas  # noqa: E501

        :param coverages: The coverages of this AutomotiveInsuranceData.  # noqa: E501
        :type: list[AutomotiveCoverageItem]
        """
        if coverages is None:
            raise ValueError("Invalid value for `coverages`, must not be `None`")  # noqa: E501

        self._coverages = coverages

    @property
    def car_parts(self):
        """Gets the car_parts of this AutomotiveInsuranceData.  # noqa: E501

        Tipo de peça utilizada para reparação – Nova ou Usada.  # noqa: E501

        :return: The car_parts of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: list[AutomotivePartsItem]
        """
        return self._car_parts

    @car_parts.setter
    def car_parts(self, car_parts):
        """Sets the car_parts of this AutomotiveInsuranceData.

        Tipo de peça utilizada para reparação – Nova ou Usada.  # noqa: E501

        :param car_parts: The car_parts of this AutomotiveInsuranceData.  # noqa: E501
        :type: list[AutomotivePartsItem]
        """

        self._car_parts = car_parts

    @property
    def car_model(self):
        """Gets the car_model of this AutomotiveInsuranceData.  # noqa: E501


        :return: The car_model of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: AutomotiveModel
        """
        return self._car_model

    @car_model.setter
    def car_model(self, car_model):
        """Sets the car_model of this AutomotiveInsuranceData.


        :param car_model: The car_model of this AutomotiveInsuranceData.  # noqa: E501
        :type: AutomotiveModel
        """

        self._car_model = car_model

    @property
    def vehicle_overnight_postal_code(self):
        """Gets the vehicle_overnight_postal_code of this AutomotiveInsuranceData.  # noqa: E501

        O conjunto de dados de Produtos que vai retornar está condicionado ao input do valor de CEP (Filtro). Nesse contexto será necessário que o CEP de consulta seja inserido. Código de Endereçamento Postal: Composto por um conjunto numérico de oito dígitos, o objetivo principal do CEP é orientar e acelerar o encaminhamento, o tratamento e a entrega de objetos postados nos Correios, por meio da sua atribuição a localidades, logradouros, unidades dos Correios, serviços, órgãos públicos, empresas e edifícios. p.ex. '01311000'  # noqa: E501

        :return: The vehicle_overnight_postal_code of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_overnight_postal_code

    @vehicle_overnight_postal_code.setter
    def vehicle_overnight_postal_code(self, vehicle_overnight_postal_code):
        """Sets the vehicle_overnight_postal_code of this AutomotiveInsuranceData.

        O conjunto de dados de Produtos que vai retornar está condicionado ao input do valor de CEP (Filtro). Nesse contexto será necessário que o CEP de consulta seja inserido. Código de Endereçamento Postal: Composto por um conjunto numérico de oito dígitos, o objetivo principal do CEP é orientar e acelerar o encaminhamento, o tratamento e a entrega de objetos postados nos Correios, por meio da sua atribuição a localidades, logradouros, unidades dos Correios, serviços, órgãos públicos, empresas e edifícios. p.ex. '01311000'  # noqa: E501

        :param vehicle_overnight_postal_code: The vehicle_overnight_postal_code of this AutomotiveInsuranceData.  # noqa: E501
        :type: float
        """

        self._vehicle_overnight_postal_code = vehicle_overnight_postal_code

    @property
    def additionals(self):
        """Gets the additionals of this AutomotiveInsuranceData.  # noqa: E501


        :return: The additionals of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: list[EnumInsuranceAdditionalType]
        """
        return self._additionals

    @additionals.setter
    def additionals(self, additionals):
        """Sets the additionals of this AutomotiveInsuranceData.


        :param additionals: The additionals of this AutomotiveInsuranceData.  # noqa: E501
        :type: list[EnumInsuranceAdditionalType]
        """

        self._additionals = additionals

    @property
    def additional_info(self):
        """Gets the additional_info of this AutomotiveInsuranceData.  # noqa: E501

        Campo aberto para descrição de cada participante ao selecionar o domínio ‘Outros’ no campo acima ‘Adicionais’ diferenciais do produto em questão.  # noqa: E501

        :return: The additional_info of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this AutomotiveInsuranceData.

        Campo aberto para descrição de cada participante ao selecionar o domínio ‘Outros’ no campo acima ‘Adicionais’ diferenciais do produto em questão.  # noqa: E501

        :param additional_info: The additional_info of this AutomotiveInsuranceData.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def assistance_services(self):
        """Gets the assistance_services of this AutomotiveInsuranceData.  # noqa: E501

        Serviços de Assistência  # noqa: E501

        :return: The assistance_services of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: list[AssistanceServicesItem]
        """
        return self._assistance_services

    @assistance_services.setter
    def assistance_services(self, assistance_services):
        """Sets the assistance_services of this AutomotiveInsuranceData.

        Serviços de Assistência  # noqa: E501

        :param assistance_services: The assistance_services of this AutomotiveInsuranceData.  # noqa: E501
        :type: list[AssistanceServicesItem]
        """

        self._assistance_services = assistance_services

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this AutomotiveInsuranceData.  # noqa: E501


        :return: The terms_and_conditions of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: list[TermsAndConditionsItem]
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this AutomotiveInsuranceData.


        :param terms_and_conditions: The terms_and_conditions of this AutomotiveInsuranceData.  # noqa: E501
        :type: list[TermsAndConditionsItem]
        """
        if terms_and_conditions is None:
            raise ValueError("Invalid value for `terms_and_conditions`, must not be `None`")  # noqa: E501

        self._terms_and_conditions = terms_and_conditions

    @property
    def terms(self):
        """Gets the terms of this AutomotiveInsuranceData.  # noqa: E501


        :return: The terms of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: list[EnumInsuranceTermType]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this AutomotiveInsuranceData.


        :param terms: The terms of this AutomotiveInsuranceData.  # noqa: E501
        :type: list[EnumInsuranceTermType]
        """
        if terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")  # noqa: E501

        self._terms = terms

    @property
    def terms_additional_info(self):
        """Gets the terms_additional_info of this AutomotiveInsuranceData.  # noqa: E501

        Texto livre para complementar informação relativa ao campo terms, quando for selecionada a opção 'Outros'  # noqa: E501

        :return: The terms_additional_info of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._terms_additional_info

    @terms_additional_info.setter
    def terms_additional_info(self, terms_additional_info):
        """Sets the terms_additional_info of this AutomotiveInsuranceData.

        Texto livre para complementar informação relativa ao campo terms, quando for selecionada a opção 'Outros'  # noqa: E501

        :param terms_additional_info: The terms_additional_info of this AutomotiveInsuranceData.  # noqa: E501
        :type: str
        """

        self._terms_additional_info = terms_additional_info

    @property
    def customer_service(self):
        """Gets the customer_service of this AutomotiveInsuranceData.  # noqa: E501


        :return: The customer_service of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: EnumCustomerServiceType
        """
        return self._customer_service

    @customer_service.setter
    def customer_service(self, customer_service):
        """Sets the customer_service of this AutomotiveInsuranceData.


        :param customer_service: The customer_service of this AutomotiveInsuranceData.  # noqa: E501
        :type: EnumCustomerServiceType
        """

        self._customer_service = customer_service

    @property
    def premium_payment(self):
        """Gets the premium_payment of this AutomotiveInsuranceData.  # noqa: E501


        :return: The premium_payment of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: PremiumPayment
        """
        return self._premium_payment

    @premium_payment.setter
    def premium_payment(self, premium_payment):
        """Sets the premium_payment of this AutomotiveInsuranceData.


        :param premium_payment: The premium_payment of this AutomotiveInsuranceData.  # noqa: E501
        :type: PremiumPayment
        """

        self._premium_payment = premium_payment

    @property
    def minimum_requirement(self):
        """Gets the minimum_requirement of this AutomotiveInsuranceData.  # noqa: E501


        :return: The minimum_requirement of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: InsuranceMinimumRequirement
        """
        return self._minimum_requirement

    @minimum_requirement.setter
    def minimum_requirement(self, minimum_requirement):
        """Sets the minimum_requirement of this AutomotiveInsuranceData.


        :param minimum_requirement: The minimum_requirement of this AutomotiveInsuranceData.  # noqa: E501
        :type: InsuranceMinimumRequirement
        """
        if minimum_requirement is None:
            raise ValueError("Invalid value for `minimum_requirement`, must not be `None`")  # noqa: E501

        self._minimum_requirement = minimum_requirement

    @property
    def target_audience(self):
        """Gets the target_audience of this AutomotiveInsuranceData.  # noqa: E501


        :return: The target_audience of this AutomotiveInsuranceData.  # noqa: E501
        :rtype: EnumTargetAudience
        """
        return self._target_audience

    @target_audience.setter
    def target_audience(self, target_audience):
        """Sets the target_audience of this AutomotiveInsuranceData.


        :param target_audience: The target_audience of this AutomotiveInsuranceData.  # noqa: E501
        :type: EnumTargetAudience
        """
        if target_audience is None:
            raise ValueError("Invalid value for `target_audience`, must not be `None`")  # noqa: E501

        self._target_audience = target_audience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomotiveInsuranceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomotiveInsuranceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
