# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento são referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumAutomotiveCoverageType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ROUBO_TOTAL_OU_PARCIAL = "ROUBO_TOTAL_OU_PARCIAL"
    FURTO_TOTAL_OU_PARCIAL = "FURTO_TOTAL_OU_PARCIAL"
    ABALROAMENTO = "ABALROAMENTO"
    DESPESAS_NECESSARIAS_SOCORRO_SALVAMENTO = "DESPESAS_NECESSARIAS_SOCORRO_SALVAMENTO"
    DESPESAS_HIGIENIZACAO_VE_CULO = "DESPESAS_HIGIENIZACAO_VEÍCULO"
    DESPESAS_EXTRAORDINARIAS = "DESPESAS_EXTRAORDINARIAS"
    DESPESAS_EXTRAORDINARIAS_MOTO = "DESPESAS_EXTRAORDINARIAS_MOTO"
    DESPESAS_MEDICO_HOSPITALARES = "DESPESAS_MEDICO_HOSPITALARES"
    DESPESAS_ODONTOLOGICAS = "DESPESAS_ODONTOLOGICAS"
    CREDITOS_CORRIDAS_APLICATIVOS_TRANSPORTE = "CREDITOS_CORRIDAS_APLICATIVOS_TRANSPORTE"
    COBERTURA_ADICIONAL_OPCIONAIS = "COBERTURA_ADICIONAL_OPCIONAIS"
    DESPESAS_EXTRAS_INDENIZACAO_INTEGRAL = "DESPESAS_EXTRAS_INDENIZACAO_INTEGRAL"
    DESPESAS_EXTRAS_INDENIZACAO_PARCIAL = "DESPESAS_EXTRAS_INDENIZACAO_PARCIAL"
    SEGURO_GARANTIDO_CASO_INDENIZACAO_INTEGRAL = "SEGURO_GARANTIDO_CASO_INDENIZACAO_INTEGRAL"
    REPARO_RAPIDO_SUPERMARTELINHO = "REPARO_RAPIDO_SUPERMARTELINHO"
    ISENCAO_FRANQUIA = "ISENCAO_FRANQUIA"
    DESCONTO_FRANQUIA = "DESCONTO_FRANQUIA"
    COBERTURA_VEICULO_REBOCADO = "COBERTURA_VEICULO_REBOCADO"
    DANOS_CORPORAIS_RCFV = "DANOS_CORPORAIS_RCFV"
    DANOS_MATERIAIS_RCFV = "DANOS_MATERIAIS_RCFV"
    DANOS_MORAIS_RCFV = "DANOS_MORAIS_RCFV"
    DANOS_ESTETICOS_RCFV = "DANOS_ESTETICOS_RCFV"
    EXTENSAO_COBERTURA_DANOS_CORPORAIS_RCFV = "EXTENSAO_COBERTURA_DANOS_CORPORAIS_RCFV"
    DANOS_CORPORAIS_RCFC = "DANOS_CORPORAIS_RCFC"
    DANOS_MATERIAIS_RCFC = "DANOS_MATERIAIS_RCFC"
    DANOS_MORAIS_RCFC = "DANOS_MORAIS_RCFC"
    DANOS_ESTETICOS_RCFC = "DANOS_ESTETICOS_RCFC"
    CARTA_VERDE_DANOS_CORPORAIS = "CARTA_VERDE_DANOS_CORPORAIS"
    CARTA_VERDE_DANOS_MATERIAIS = "CARTA_VERDE_DANOS_MATERIAIS"
    APP_DMHO_PASSAGEIRO = "APP_DMHO_PASSAGEIRO"
    APP_INVALIDEZ_PERMANENTE_PASSAGEIRO = "APP_INVALIDEZ_PERMANENTE_PASSAGEIRO"
    APP_MORTE_PASSAGEIRO = "APP_MORTE_PASSAGEIRO"
    APP_INVALIDEZ_PERMANENTE_TOTAL_PARCIAL = "APP_INVALIDEZ_PERMANENTE_TOTAL_PARCIAL"
    VIDROS = "VIDROS"
    RETROVISORES = "RETROVISORES"
    FAROIS = "FAROIS"
    LANTERNAS = "LANTERNAS"
    DESPESAS_LOCACAO = "DESPESAS_LOCACAO"
    ROUBO_FURTO_RADIO = "ROUBO_FURTO_RADIO"
    ROUBO_FURTO_CD = "ROUBO_FURTO_CD"
    ROUBO_FURTO_KIT_GAS = "ROUBO_FURTO_KIT_GAS"
    ROUBO_FURTO_TACOGRAFO = "ROUBO_FURTO_TACOGRAFO"
    TAXIMETRO = "TAXIMETRO"
    LUMINOSO = "LUMINOSO"
    CARROCERIA = "CARROCERIA"
    EQUIPAMENTOS_ESPECIAIS_OPCIONAIS = "EQUIPAMENTOS_ESPECIAIS_OPCIONAIS"
    ACESSORIOS = "ACESSORIOS"
    BLINDAGEM = "BLINDAGEM"
    COBERTURA_BENS_DEIXADOS_INTERIOR_VEICULO = "COBERTURA_BENS_DEIXADOS_INTERIOR_VEICULO"
    COBERTURA_VEICULOS_ADAPTADOS_DEFICIENTES_FISICOS = "COBERTURA_VEICULOS_ADAPTADOS_DEFICIENTES_FISICOS"
    EIXO_ADICIONAL = "EIXO_ADICIONAL"
    EQUIPAMENTOS = "EQUIPAMENTOS"
    REPARO_AIR_BAG_REPOSICAO = "REPARO_AIR_BAG_REPOSICAO"
    COBERTURA_PARA_CHOQUE = "COBERTURA_PARA_CHOQUE"
    ENVELOPAMENTO = "ENVELOPAMENTO"
    DIARIA_INDISPONIBILIDADE = "DIARIA_INDISPONIBILIDADE"
    MOTOR_TRANSMISS_O = "MOTOR_TRANSMISSÃO"
    MOTOR_TRANSMISSAO_DIRECAO_SUSPENSAO_FREIOS = "MOTOR_TRANSMISSAO_DIRECAO_SUSPENSAO_FREIOS"
    MOTOR_TRANSMISSAO_DIRECAO_SUSPENSAO_FREIOS_SISTEMA_ELETRICO_AR_CONDICIONADO = "MOTOR_TRANSMISSAO_DIRECAO_SUSPENSAO_FREIOS_SISTEMA_ELETRICO_AR_CONDICIONADO"
    COMPLETA = "COMPLETA"
    CONFORTO = "CONFORTO"
    SIMPLES = "SIMPLES"
    GARANTIA_FRANQUIA_AUTOMOVEL = "GARANTIA_FRANQUIA_AUTOMOVEL"
    OUTRAS_COBERTURAS_AUTO = "OUTRAS_COBERTURAS_AUTO"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnumAutomotiveCoverageType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumAutomotiveCoverageType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumAutomotiveCoverageType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
