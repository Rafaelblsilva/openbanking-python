# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento s√£o referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumHomeCoverageType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    IMOVEL_BASICA = "IMOVEL_BASICA"
    IMOVEL_AMPLA = "IMOVEL_AMPLA"
    DANOS_ELETRICOS = "DANOS_ELETRICOS"
    DANOS_AGUA = "DANOS_AGUA"
    ALAGAMENTO = "ALAGAMENTO"
    RESPONSABILIDADE_CIVIL_FAMILIAR = "RESPONSABILIDADE_CIVIL_FAMILIAR"
    RESPONSABILIDADE_CIVIL_DANOS_MORAIS = "RESPONSABILIDADE_CIVIL_DANOS_MORAIS"
    ROUBO_SUBTRACAO_BENS = "ROUBO_SUBTRACAO_BENS"
    ROUBO_SUBTRACAO_BENS_FORA_LOCAL_SEGURADO = "ROUBO_SUBTRACAO_BENS_FORA_LOCAL_SEGURADO"
    TACOS_GOLFE_HOLE_ONE = "TACOS_GOLFE_HOLE_ONE"
    PEQUENAS_REFORMAS_OBRAS = "PEQUENAS_REFORMAS_OBRAS"
    GRAVES_TUMULTOS_LOCKOUT = "GRAVES_TUMULTOS_LOCKOUT"
    MICROEMPREENDEDOR = "MICROEMPREENDEDOR"
    ESCRITORIO_RESIDENCIA = "ESCRITORIO_RESIDENCIA"
    DANOS_EQUIPAMENTOS_ELETRONICOS = "DANOS_EQUIPAMENTOS_ELETRONICOS"
    QUEBRA_VIDROS = "QUEBRA_VIDROS"
    IMPACTO_VEICULOS = "IMPACTO_VEICULOS"
    VENDAVAL = "VENDAVAL"
    PERDA_PAGAMENTO_ALUGUEL = "PERDA_PAGAMENTO_ALUGUEL"
    BICICLETA = "BICICLETA"
    RESPONSABILIDADE_CIVIL_BICICLETA = "RESPONSABILIDADE_CIVIL_BICICLETA"
    RC_EMPREGADOR = "RC_EMPREGADOR"
    DESMORONAMENTO = "DESMORONAMENTO"
    DESPESAS = "DESPESAS"
    JOIAS_OBRAS_ARTE = "JOIAS_OBRAS_ARTE"
    TERREMOTO = "TERREMOTO"
    IMPACTO_AERONAVES = "IMPACTO_AERONAVES"
    PAISAGISMO = "PAISAGISMO"
    INCENDIO = "INCENDIO"
    QUEDA_RAIO = "QUEDA_RAIO"
    EXPLOSAO = "EXPLOSAO"
    OUTROS = "OUTROS"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnumHomeCoverageType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumHomeCoverageType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumHomeCoverageType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
