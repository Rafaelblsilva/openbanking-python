# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento são referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc2.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PremiumPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_methods': 'list[str]',
        'payment_type': 'str',
        'payment_methods_additional_info': 'str'
    }

    attribute_map = {
        'payment_methods': 'paymentMethods',
        'payment_type': 'paymentType',
        'payment_methods_additional_info': 'paymentMethodsAdditionalInfo'
    }

    def __init__(self, payment_methods=None, payment_type=None, payment_methods_additional_info=None):  # noqa: E501
        """PremiumPayment - a model defined in Swagger"""  # noqa: E501
        self._payment_methods = None
        self._payment_type = None
        self._payment_methods_additional_info = None
        self.discriminator = None
        self.payment_methods = payment_methods
        self.payment_type = payment_type
        if payment_methods_additional_info is not None:
            self.payment_methods_additional_info = payment_methods_additional_info

    @property
    def payment_methods(self):
        """Gets the payment_methods of this PremiumPayment.  # noqa: E501


        :return: The payment_methods of this PremiumPayment.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this PremiumPayment.


        :param payment_methods: The payment_methods of this PremiumPayment.  # noqa: E501
        :type: list[str]
        """
        if payment_methods is None:
            raise ValueError("Invalid value for `payment_methods`, must not be `None`")  # noqa: E501
        allowed_values = ["CARTAO_CREDITO", "CARTAO_DEBITO", "DEBITO_CONTA_CORRENTE", "DEBITO_CONTA_POUPANCA", "BOLETO_BANCARIO", "PIX", "CONSIGNACAO_FOLHA_PAGAMENTO", "PONTOS_PROGRAMA_BENEFÍCIO", "OUTROS"]  # noqa: E501
        if not set(payment_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `payment_methods` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(payment_methods) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._payment_methods = payment_methods

    @property
    def payment_type(self):
        """Gets the payment_type of this PremiumPayment.  # noqa: E501

        Forma de pagamento: 1. A vista; 2. Parcelado; 3. Ambos   # noqa: E501

        :return: The payment_type of this PremiumPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PremiumPayment.

        Forma de pagamento: 1. A vista; 2. Parcelado; 3. Ambos   # noqa: E501

        :param payment_type: The payment_type of this PremiumPayment.  # noqa: E501
        :type: str
        """
        if payment_type is None:
            raise ValueError("Invalid value for `payment_type`, must not be `None`")  # noqa: E501
        allowed_values = ["A_VISTA", "PARCELADO", "AMBOS"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def payment_methods_additional_info(self):
        """Gets the payment_methods_additional_info of this PremiumPayment.  # noqa: E501

        Texto livre para complementar informação relativa ao paymentMethods, quando for selecionada a opção 'Outros'. Restrição: Campo de preenchimento obrigatório se \"paymentMethods\" estiver preenchida a opção \"OUTROS\"   # noqa: E501

        :return: The payment_methods_additional_info of this PremiumPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_methods_additional_info

    @payment_methods_additional_info.setter
    def payment_methods_additional_info(self, payment_methods_additional_info):
        """Sets the payment_methods_additional_info of this PremiumPayment.

        Texto livre para complementar informação relativa ao paymentMethods, quando for selecionada a opção 'Outros'. Restrição: Campo de preenchimento obrigatório se \"paymentMethods\" estiver preenchida a opção \"OUTROS\"   # noqa: E501

        :param payment_methods_additional_info: The payment_methods_additional_info of this PremiumPayment.  # noqa: E501
        :type: str
        """

        self._payment_methods_additional_info = payment_methods_additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PremiumPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PremiumPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
