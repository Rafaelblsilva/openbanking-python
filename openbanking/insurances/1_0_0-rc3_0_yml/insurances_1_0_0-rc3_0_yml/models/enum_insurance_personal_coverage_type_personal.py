# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento s√£o referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc3.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumInsurancePersonalCoverageTypePersonal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ADIANTAMENTO_DOENCA_ESTAGIO_TERMINAL = "ADIANTAMENTO_DOENCA_ESTAGIO_TERMINAL"
    AUXILIO_CESTA_BASICA = "AUXILIO_CESTA_BASICA"
    AUXILIO_FINANCEIRO_IMEDIATO = "AUXILIO_FINANCEIRO_IMEDIATO"
    CANCELAMENTO_VIAGEM = "CANCELAMENTO_VIAGEM"
    CIRURGIA = "CIRURGIA"
    COBERTURA_HERNIA = "COBERTURA_HERNIA"
    COBERTURA_LER_DORT = "COBERTURA_LER_DORT"
    CUIDADOS_PROLONGADOS_ACIDENTE = "CUIDADOS_PROLONGADOS_ACIDENTE"
    DESEMPREGO_PERDA_RENDA = "DESEMPREGO_PERDA_RENDA"
    DESPESAS_EXTRA_INVALIDEZ_PERMANENTE_TOTAL_PARCIAL_ACIDENTE_DEI = "DESPESAS_EXTRA_INVALIDEZ_PERMANENTE_TOTAL_PARCIAL_ACIDENTE_DEI"
    DESPESAS_EXTRA_MORTE_DEM = "DESPESAS_EXTRA_MORTE_DEM"
    DESPESAS_MEDICAS_HOSPITALARES_ODONTOLOGICAS = "DESPESAS_MEDICAS_HOSPITALARES_ODONTOLOGICAS"
    DESPESAS_MEDICAS_HOSPITALARES_ODONTOLOGICAS_BRASIL = "DESPESAS_MEDICAS_HOSPITALARES_ODONTOLOGICAS_BRASIL"
    DESPESAS_MEDICAS_HOSPITALARES_ODONTOLOGICAS_EXTERIOR = "DESPESAS_MEDICAS_HOSPITALARES_ODONTOLOGICAS_EXTERIOR"
    DIARIA_INCAPACIDADE_TOTAL_TEMPORARIA = "DIARIA_INCAPACIDADE_TOTAL_TEMPORARIA"
    DIARIA_INTERNACAO_HOSPITALAR = "DIARIA_INTERNACAO_HOSPITALAR"
    INTERNACAO_HOSPITALAR = "INTERNACAO_HOSPITALAR"
    DIARIAS_INCAPACIDADE_PECUNIARIA_DIP = "DIARIAS_INCAPACIDADE_PECUNIARIA_DIP"
    DOENCA_CONGENITA_FILHOS_DCF = "DOENCA_CONGENITA_FILHOS_DCF"
    FRATURA_OSSEA = "FRATURA_OSSEA"
    DOENCAS_TROPICAIS = "DOENCAS_TROPICAIS"
    INCAPACIDADE_TOTAL_OU_TEMPORARIA = "INCAPACIDADE_TOTAL_OU_TEMPORARIA"
    INVALIDEZ_PERMANENTE_TOTAL_PARCIAL = "INVALIDEZ_PERMANENTE_TOTAL_PARCIAL"
    INVALIDEZ_TOTAL_ACIDENTE = "INVALIDEZ_TOTAL_ACIDENTE"
    INVALIDEZ_PARCIAL_ACIDENTE = "INVALIDEZ_PARCIAL_ACIDENTE"
    INVALIDEZ_FUNCIONAL_PERMANENTE_DOENCA = "INVALIDEZ_FUNCIONAL_PERMANENTE_DOENCA"
    INVALIDEZ_LABORATIVA_DOENCA = "INVALIDEZ_LABORATIVA_DOENCA"
    MORTE = "MORTE"
    MORTE_ACIDENTAL = "MORTE_ACIDENTAL"
    MORTE_CONJUGE = "MORTE_CONJUGE"
    MORTE_FILHOS = "MORTE_FILHOS"
    MORTE_ADIATAMENTO_DOENCA_ESTAGIO_TERMINAL = "MORTE_ADIATAMENTO_DOENCA_ESTAGIO_TERMINAL"
    PAGAMENTO_ANTECIPADO_ESPECIAL_DOENCA_PROFISSIONAL_PAED = "PAGAMENTO_ANTECIPADO_ESPECIAL_DOENCA_PROFISSIONAL_PAED"
    PERDA_AUTONOMIA_PESSOAL = "PERDA_AUTONOMIA_PESSOAL"
    PERDA_INVOLUNTARIA_EMPREGO = "PERDA_INVOLUNTARIA_EMPREGO"
    QUEIMADURA_GRAVE = "QUEIMADURA_GRAVE"
    REGRESSO_ANTECIPADO_SANITARIO = "REGRESSO_ANTECIPADO_SANITARIO"
    RENDA_INCAPACIDADE_TEMPORARIA = "RENDA_INCAPACIDADE_TEMPORARIA"
    RESCISAO_CONTRATUAL_CASO_MORTE_RCM = "RESCISAO_CONTRATUAL_CASO_MORTE_RCM"
    RESCISAO_TRABALHISTA = "RESCISAO_TRABALHISTA"
    SERVICO_AUXILIO_FUNERAL = "SERVICO_AUXILIO_FUNERAL"
    SOBREVIVENCIA = "SOBREVIVENCIA"
    TRANSPLANTE_ORGAOS = "TRANSPLANTE_ORGAOS"
    TRASLADO = "TRASLADO"
    TRANSLADO_CORPO = "TRANSLADO_CORPO"
    VERBA_RESCISORIA = "VERBA_RESCISORIA"
    DOENCA_GRAVE = "DOENCA_GRAVE"
    TRANSLADO_MEDICO = "TRANSLADO_MEDICO"
    OUTROS = "OUTROS"
    NA = "NA"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnumInsurancePersonalCoverageTypePersonal - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumInsurancePersonalCoverageTypePersonal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumInsurancePersonalCoverageTypePersonal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
