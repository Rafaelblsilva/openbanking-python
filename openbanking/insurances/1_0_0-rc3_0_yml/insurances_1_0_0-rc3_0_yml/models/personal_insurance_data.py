# coding: utf-8

"""
    API Seguros - Open Finance Brasil

    As APIs descritas neste documento são referentes a API de Seguros da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc3.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonalInsuranceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'Participant',
        'society': 'PersonalInsuranceSociety',
        'name': 'str',
        'code': 'str',
        'category': 'str',
        'modality': 'EnumProductModality',
        'coverages': 'list[PersonalCoverageItem]',
        'assistance_types': 'list[str]',
        'assistance_types_additional_infos': 'list[str]',
        'additionals': 'list[str]',
        'terms_and_conditions': 'list[TermsAndConditionsItem]',
        'global_capital': 'bool',
        'terms': 'list[str]',
        'pmbac_remuneration': 'InsurancePensionEnumPmbacRemuneration',
        'benefit_recalculation': 'BenefitRecalculation',
        'age_adjustment': 'AgeAdjustment',
        'financial_regimes': 'list[InsurancePensionEnumFinancialRegime]',
        'reclaim': 'PersonalInsuranceReclaim',
        'other_guaranteed_values': 'list[EnumPersonalInsuranceOtherGuaranteedValues]',
        'allow_portability': 'bool',
        'portability_grace_time': 'PersonalInsurancePortabilityGraceTime',
        'indemnity_payment_methods': 'list[EnumPersonalInsuranceIndemnityPaymentMethod]',
        'indemnity_payment_incomes': 'list[EnumPersonalInsuranceIndemnityPaymentIncome]',
        'premium_payment': 'PersonalInsurancePremiumPayment',
        'minimum_requirement': 'PersonalInsuranceMinimumRequirement',
        'target_audience': 'str'
    }

    attribute_map = {
        'participant': 'participant',
        'society': 'society',
        'name': 'name',
        'code': 'code',
        'category': 'category',
        'modality': 'modality',
        'coverages': 'coverages',
        'assistance_types': 'assistanceTypes',
        'assistance_types_additional_infos': 'assistanceTypesAdditionalInfos',
        'additionals': 'additionals',
        'terms_and_conditions': 'termsAndConditions',
        'global_capital': 'globalCapital',
        'terms': 'terms',
        'pmbac_remuneration': 'pmbacRemuneration',
        'benefit_recalculation': 'benefitRecalculation',
        'age_adjustment': 'ageAdjustment',
        'financial_regimes': 'financialRegimes',
        'reclaim': 'reclaim',
        'other_guaranteed_values': 'otherGuaranteedValues',
        'allow_portability': 'allowPortability',
        'portability_grace_time': 'portabilityGraceTime',
        'indemnity_payment_methods': 'indemnityPaymentMethods',
        'indemnity_payment_incomes': 'indemnityPaymentIncomes',
        'premium_payment': 'premiumPayment',
        'minimum_requirement': 'minimumRequirement',
        'target_audience': 'targetAudience'
    }

    def __init__(self, participant=None, society=None, name=None, code=None, category=None, modality=None, coverages=None, assistance_types=None, assistance_types_additional_infos=None, additionals=None, terms_and_conditions=None, global_capital=None, terms=None, pmbac_remuneration=None, benefit_recalculation=None, age_adjustment=None, financial_regimes=None, reclaim=None, other_guaranteed_values=None, allow_portability=None, portability_grace_time=None, indemnity_payment_methods=None, indemnity_payment_incomes=None, premium_payment=None, minimum_requirement=None, target_audience=None):  # noqa: E501
        """PersonalInsuranceData - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._society = None
        self._name = None
        self._code = None
        self._category = None
        self._modality = None
        self._coverages = None
        self._assistance_types = None
        self._assistance_types_additional_infos = None
        self._additionals = None
        self._terms_and_conditions = None
        self._global_capital = None
        self._terms = None
        self._pmbac_remuneration = None
        self._benefit_recalculation = None
        self._age_adjustment = None
        self._financial_regimes = None
        self._reclaim = None
        self._other_guaranteed_values = None
        self._allow_portability = None
        self._portability_grace_time = None
        self._indemnity_payment_methods = None
        self._indemnity_payment_incomes = None
        self._premium_payment = None
        self._minimum_requirement = None
        self._target_audience = None
        self.discriminator = None
        self.participant = participant
        self.society = society
        self.name = name
        self.code = code
        if category is not None:
            self.category = category
        self.modality = modality
        self.coverages = coverages
        if assistance_types is not None:
            self.assistance_types = assistance_types
        if assistance_types_additional_infos is not None:
            self.assistance_types_additional_infos = assistance_types_additional_infos
        self.additionals = additionals
        self.terms_and_conditions = terms_and_conditions
        if global_capital is not None:
            self.global_capital = global_capital
        self.terms = terms
        if pmbac_remuneration is not None:
            self.pmbac_remuneration = pmbac_remuneration
        if benefit_recalculation is not None:
            self.benefit_recalculation = benefit_recalculation
        if age_adjustment is not None:
            self.age_adjustment = age_adjustment
        self.financial_regimes = financial_regimes
        if reclaim is not None:
            self.reclaim = reclaim
        if other_guaranteed_values is not None:
            self.other_guaranteed_values = other_guaranteed_values
        if allow_portability is not None:
            self.allow_portability = allow_portability
        if portability_grace_time is not None:
            self.portability_grace_time = portability_grace_time
        self.indemnity_payment_methods = indemnity_payment_methods
        if indemnity_payment_incomes is not None:
            self.indemnity_payment_incomes = indemnity_payment_incomes
        if premium_payment is not None:
            self.premium_payment = premium_payment
        if minimum_requirement is not None:
            self.minimum_requirement = minimum_requirement
        self.target_audience = target_audience

    @property
    def participant(self):
        """Gets the participant of this PersonalInsuranceData.  # noqa: E501


        :return: The participant of this PersonalInsuranceData.  # noqa: E501
        :rtype: Participant
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this PersonalInsuranceData.


        :param participant: The participant of this PersonalInsuranceData.  # noqa: E501
        :type: Participant
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def society(self):
        """Gets the society of this PersonalInsuranceData.  # noqa: E501


        :return: The society of this PersonalInsuranceData.  # noqa: E501
        :rtype: PersonalInsuranceSociety
        """
        return self._society

    @society.setter
    def society(self, society):
        """Sets the society of this PersonalInsuranceData.


        :param society: The society of this PersonalInsuranceData.  # noqa: E501
        :type: PersonalInsuranceSociety
        """
        if society is None:
            raise ValueError("Invalid value for `society`, must not be `None`")  # noqa: E501

        self._society = society

    @property
    def name(self):
        """Gets the name of this PersonalInsuranceData.  # noqa: E501

        Nome comercial do produto, pelo qual é identificado nos canais de distribuição e atendimento da sociedade.  # noqa: E501

        :return: The name of this PersonalInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonalInsuranceData.

        Nome comercial do produto, pelo qual é identificado nos canais de distribuição e atendimento da sociedade.  # noqa: E501

        :param name: The name of this PersonalInsuranceData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this PersonalInsuranceData.  # noqa: E501

        Código único a ser definido pela sociedade.  # noqa: E501

        :return: The code of this PersonalInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PersonalInsuranceData.

        Código único a ser definido pela sociedade.  # noqa: E501

        :param code: The code of this PersonalInsuranceData.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def category(self):
        """Gets the category of this PersonalInsuranceData.  # noqa: E501

        Indicar a categoria do Produto&#58;<br><ol><li>Tradicional</li><li>Microsseguro</li><li>NA</li></ol>  # noqa: E501

        :return: The category of this PersonalInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PersonalInsuranceData.

        Indicar a categoria do Produto&#58;<br><ol><li>Tradicional</li><li>Microsseguro</li><li>NA</li></ol>  # noqa: E501

        :param category: The category of this PersonalInsuranceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRADICIONAL", "MICROSSEGURO", "NA"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def modality(self):
        """Gets the modality of this PersonalInsuranceData.  # noqa: E501


        :return: The modality of this PersonalInsuranceData.  # noqa: E501
        :rtype: EnumProductModality
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this PersonalInsuranceData.


        :param modality: The modality of this PersonalInsuranceData.  # noqa: E501
        :type: EnumProductModality
        """
        if modality is None:
            raise ValueError("Invalid value for `modality`, must not be `None`")  # noqa: E501

        self._modality = modality

    @property
    def coverages(self):
        """Gets the coverages of this PersonalInsuranceData.  # noqa: E501


        :return: The coverages of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[PersonalCoverageItem]
        """
        return self._coverages

    @coverages.setter
    def coverages(self, coverages):
        """Sets the coverages of this PersonalInsuranceData.


        :param coverages: The coverages of this PersonalInsuranceData.  # noqa: E501
        :type: list[PersonalCoverageItem]
        """
        if coverages is None:
            raise ValueError("Invalid value for `coverages`, must not be `None`")  # noqa: E501

        self._coverages = coverages

    @property
    def assistance_types(self):
        """Gets the assistance_types of this PersonalInsuranceData.  # noqa: E501


        :return: The assistance_types of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._assistance_types

    @assistance_types.setter
    def assistance_types(self, assistance_types):
        """Sets the assistance_types of this PersonalInsuranceData.


        :param assistance_types: The assistance_types of this PersonalInsuranceData.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ACOMPANHANTE_CASO_HOSPITALIZACAO_PROLONGADA", "ARQUITETO_VIRTUAL", "ASSESSORIA_FINANCEIRA", "AUTOMOVEL", "AUXILIO_NATALIDADE", "AVALIACAO_CLINICA_PREVENTIVA", "BOLSA_PROTEGIDA", "CESTA_BASICA", "CHECKUP_ODONTOLOGICO", "CLUBE_VANTAGENS_BENEFICIOS", "CONVALESCENCIA", "DECESSO", "DESCONTO_FARMACIAS_MEDICAMENTOS", "DESPESAS_FARMACEUTICAS_VIAGEM", "DIGITAL", "EDUCACIONAL", "EMPRESARIAL", "ENCANADOR", "ENTRETENIMENTO", "EQUIPAMENTOS_MEDICOS", "FIANCAS_DESPESAS_LEGAIS", "FISIOTERAPIA", "FUNERAL", "HELP_LINE", "HOSPEDAGEM_ACOMPANHANTE", "INTERRUPCAO_VIAGEM", "INVENTARIO", "MAIS_VIDA", "MAMAE_BEBE", "MEDICA_ACIDENTE_DOENCA", "MOTOCICLETA", "MULHER", "NUTRICIONISTA", "ODONTOLOGICA", "ORIENTACAO_FITNESS", "ORIENTACAO_JURIDICA", "ORIENTACAO_NUTRICIONAL", "PERSONAL_FITNESS", "ORIENTACAO_PSICOSSOCIAL_FAMILIAR", "PERDA_ROUBO_CARTAO", "PET", "PRORROGACAO_ESTADIA", "PROTECAO_DADOS", "RECOLOCACAO_PROFISSIONAL", "REDE_DESCONTO_NUTRICIONAL", "RESIDENCIAL", "RETORNO_MENORES_SEGURADO", "SAQUE_COACAO", "SAUDE_BEM_ESTAR", "SEGUNDA_OPINIAO_MEDICA", "SENIOR", "SUSTENTAVEL_DESCARTE_ECOLOGICO", "TELEMEDICINA", "VIAGEM", "VITIMA", "OUTROS", "NA"]  # noqa: E501
        if not set(assistance_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `assistance_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(assistance_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._assistance_types = assistance_types

    @property
    def assistance_types_additional_infos(self):
        """Gets the assistance_types_additional_infos of this PersonalInsuranceData.  # noqa: E501

        Lista a ser preenchido pelas participantes quando houver ‘Outros’ no campo ‘Tipo de Assistência’  # noqa: E501

        :return: The assistance_types_additional_infos of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._assistance_types_additional_infos

    @assistance_types_additional_infos.setter
    def assistance_types_additional_infos(self, assistance_types_additional_infos):
        """Sets the assistance_types_additional_infos of this PersonalInsuranceData.

        Lista a ser preenchido pelas participantes quando houver ‘Outros’ no campo ‘Tipo de Assistência’  # noqa: E501

        :param assistance_types_additional_infos: The assistance_types_additional_infos of this PersonalInsuranceData.  # noqa: E501
        :type: list[str]
        """

        self._assistance_types_additional_infos = assistance_types_additional_infos

    @property
    def additionals(self):
        """Gets the additionals of this PersonalInsuranceData.  # noqa: E501


        :return: The additionals of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._additionals

    @additionals.setter
    def additionals(self, additionals):
        """Sets the additionals of this PersonalInsuranceData.


        :param additionals: The additionals of this PersonalInsuranceData.  # noqa: E501
        :type: list[str]
        """
        if additionals is None:
            raise ValueError("Invalid value for `additionals`, must not be `None`")  # noqa: E501
        allowed_values = ["SORTEIO", "SERVICOS_ASSISTENCIAS_COMPLEMENTARES_PAGO", "SERVICOS_ASSISTENCIA_COMPLEMENTARES_GRATUITO", "OUTROS", "NAO_HA", "NA"]  # noqa: E501
        if not set(additionals).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `additionals` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(additionals) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._additionals = additionals

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this PersonalInsuranceData.  # noqa: E501


        :return: The terms_and_conditions of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[TermsAndConditionsItem]
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this PersonalInsuranceData.


        :param terms_and_conditions: The terms_and_conditions of this PersonalInsuranceData.  # noqa: E501
        :type: list[TermsAndConditionsItem]
        """
        if terms_and_conditions is None:
            raise ValueError("Invalid value for `terms_and_conditions`, must not be `None`")  # noqa: E501

        self._terms_and_conditions = terms_and_conditions

    @property
    def global_capital(self):
        """Gets the global_capital of this PersonalInsuranceData.  # noqa: E501

        A considerar os seguintes domínios:   1. true   2. false   # noqa: E501

        :return: The global_capital of this PersonalInsuranceData.  # noqa: E501
        :rtype: bool
        """
        return self._global_capital

    @global_capital.setter
    def global_capital(self, global_capital):
        """Sets the global_capital of this PersonalInsuranceData.

        A considerar os seguintes domínios:   1. true   2. false   # noqa: E501

        :param global_capital: The global_capital of this PersonalInsuranceData.  # noqa: E501
        :type: bool
        """

        self._global_capital = global_capital

    @property
    def terms(self):
        """Gets the terms of this PersonalInsuranceData.  # noqa: E501


        :return: The terms of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this PersonalInsuranceData.


        :param terms: The terms of this PersonalInsuranceData.  # noqa: E501
        :type: list[str]
        """
        if terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")  # noqa: E501
        allowed_values = ["VITALICIA", "TEMPORARIA_PRAZO_FIXO", "TEMPORARIA_INTERMITENTE", "NA"]  # noqa: E501
        if not set(terms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `terms` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(terms) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._terms = terms

    @property
    def pmbac_remuneration(self):
        """Gets the pmbac_remuneration of this PersonalInsuranceData.  # noqa: E501


        :return: The pmbac_remuneration of this PersonalInsuranceData.  # noqa: E501
        :rtype: InsurancePensionEnumPmbacRemuneration
        """
        return self._pmbac_remuneration

    @pmbac_remuneration.setter
    def pmbac_remuneration(self, pmbac_remuneration):
        """Sets the pmbac_remuneration of this PersonalInsuranceData.


        :param pmbac_remuneration: The pmbac_remuneration of this PersonalInsuranceData.  # noqa: E501
        :type: InsurancePensionEnumPmbacRemuneration
        """

        self._pmbac_remuneration = pmbac_remuneration

    @property
    def benefit_recalculation(self):
        """Gets the benefit_recalculation of this PersonalInsuranceData.  # noqa: E501


        :return: The benefit_recalculation of this PersonalInsuranceData.  # noqa: E501
        :rtype: BenefitRecalculation
        """
        return self._benefit_recalculation

    @benefit_recalculation.setter
    def benefit_recalculation(self, benefit_recalculation):
        """Sets the benefit_recalculation of this PersonalInsuranceData.


        :param benefit_recalculation: The benefit_recalculation of this PersonalInsuranceData.  # noqa: E501
        :type: BenefitRecalculation
        """

        self._benefit_recalculation = benefit_recalculation

    @property
    def age_adjustment(self):
        """Gets the age_adjustment of this PersonalInsuranceData.  # noqa: E501


        :return: The age_adjustment of this PersonalInsuranceData.  # noqa: E501
        :rtype: AgeAdjustment
        """
        return self._age_adjustment

    @age_adjustment.setter
    def age_adjustment(self, age_adjustment):
        """Sets the age_adjustment of this PersonalInsuranceData.


        :param age_adjustment: The age_adjustment of this PersonalInsuranceData.  # noqa: E501
        :type: AgeAdjustment
        """

        self._age_adjustment = age_adjustment

    @property
    def financial_regimes(self):
        """Gets the financial_regimes of this PersonalInsuranceData.  # noqa: E501


        :return: The financial_regimes of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[InsurancePensionEnumFinancialRegime]
        """
        return self._financial_regimes

    @financial_regimes.setter
    def financial_regimes(self, financial_regimes):
        """Sets the financial_regimes of this PersonalInsuranceData.


        :param financial_regimes: The financial_regimes of this PersonalInsuranceData.  # noqa: E501
        :type: list[InsurancePensionEnumFinancialRegime]
        """
        if financial_regimes is None:
            raise ValueError("Invalid value for `financial_regimes`, must not be `None`")  # noqa: E501

        self._financial_regimes = financial_regimes

    @property
    def reclaim(self):
        """Gets the reclaim of this PersonalInsuranceData.  # noqa: E501


        :return: The reclaim of this PersonalInsuranceData.  # noqa: E501
        :rtype: PersonalInsuranceReclaim
        """
        return self._reclaim

    @reclaim.setter
    def reclaim(self, reclaim):
        """Sets the reclaim of this PersonalInsuranceData.


        :param reclaim: The reclaim of this PersonalInsuranceData.  # noqa: E501
        :type: PersonalInsuranceReclaim
        """

        self._reclaim = reclaim

    @property
    def other_guaranteed_values(self):
        """Gets the other_guaranteed_values of this PersonalInsuranceData.  # noqa: E501


        :return: The other_guaranteed_values of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[EnumPersonalInsuranceOtherGuaranteedValues]
        """
        return self._other_guaranteed_values

    @other_guaranteed_values.setter
    def other_guaranteed_values(self, other_guaranteed_values):
        """Sets the other_guaranteed_values of this PersonalInsuranceData.


        :param other_guaranteed_values: The other_guaranteed_values of this PersonalInsuranceData.  # noqa: E501
        :type: list[EnumPersonalInsuranceOtherGuaranteedValues]
        """

        self._other_guaranteed_values = other_guaranteed_values

    @property
    def allow_portability(self):
        """Gets the allow_portability of this PersonalInsuranceData.  # noqa: E501

        1. true 2. false   # noqa: E501

        :return: The allow_portability of this PersonalInsuranceData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_portability

    @allow_portability.setter
    def allow_portability(self, allow_portability):
        """Sets the allow_portability of this PersonalInsuranceData.

        1. true 2. false   # noqa: E501

        :param allow_portability: The allow_portability of this PersonalInsuranceData.  # noqa: E501
        :type: bool
        """

        self._allow_portability = allow_portability

    @property
    def portability_grace_time(self):
        """Gets the portability_grace_time of this PersonalInsuranceData.  # noqa: E501


        :return: The portability_grace_time of this PersonalInsuranceData.  # noqa: E501
        :rtype: PersonalInsurancePortabilityGraceTime
        """
        return self._portability_grace_time

    @portability_grace_time.setter
    def portability_grace_time(self, portability_grace_time):
        """Sets the portability_grace_time of this PersonalInsuranceData.


        :param portability_grace_time: The portability_grace_time of this PersonalInsuranceData.  # noqa: E501
        :type: PersonalInsurancePortabilityGraceTime
        """

        self._portability_grace_time = portability_grace_time

    @property
    def indemnity_payment_methods(self):
        """Gets the indemnity_payment_methods of this PersonalInsuranceData.  # noqa: E501


        :return: The indemnity_payment_methods of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[EnumPersonalInsuranceIndemnityPaymentMethod]
        """
        return self._indemnity_payment_methods

    @indemnity_payment_methods.setter
    def indemnity_payment_methods(self, indemnity_payment_methods):
        """Sets the indemnity_payment_methods of this PersonalInsuranceData.


        :param indemnity_payment_methods: The indemnity_payment_methods of this PersonalInsuranceData.  # noqa: E501
        :type: list[EnumPersonalInsuranceIndemnityPaymentMethod]
        """
        if indemnity_payment_methods is None:
            raise ValueError("Invalid value for `indemnity_payment_methods`, must not be `None`")  # noqa: E501

        self._indemnity_payment_methods = indemnity_payment_methods

    @property
    def indemnity_payment_incomes(self):
        """Gets the indemnity_payment_incomes of this PersonalInsuranceData.  # noqa: E501


        :return: The indemnity_payment_incomes of this PersonalInsuranceData.  # noqa: E501
        :rtype: list[EnumPersonalInsuranceIndemnityPaymentIncome]
        """
        return self._indemnity_payment_incomes

    @indemnity_payment_incomes.setter
    def indemnity_payment_incomes(self, indemnity_payment_incomes):
        """Sets the indemnity_payment_incomes of this PersonalInsuranceData.


        :param indemnity_payment_incomes: The indemnity_payment_incomes of this PersonalInsuranceData.  # noqa: E501
        :type: list[EnumPersonalInsuranceIndemnityPaymentIncome]
        """

        self._indemnity_payment_incomes = indemnity_payment_incomes

    @property
    def premium_payment(self):
        """Gets the premium_payment of this PersonalInsuranceData.  # noqa: E501


        :return: The premium_payment of this PersonalInsuranceData.  # noqa: E501
        :rtype: PersonalInsurancePremiumPayment
        """
        return self._premium_payment

    @premium_payment.setter
    def premium_payment(self, premium_payment):
        """Sets the premium_payment of this PersonalInsuranceData.


        :param premium_payment: The premium_payment of this PersonalInsuranceData.  # noqa: E501
        :type: PersonalInsurancePremiumPayment
        """

        self._premium_payment = premium_payment

    @property
    def minimum_requirement(self):
        """Gets the minimum_requirement of this PersonalInsuranceData.  # noqa: E501


        :return: The minimum_requirement of this PersonalInsuranceData.  # noqa: E501
        :rtype: PersonalInsuranceMinimumRequirement
        """
        return self._minimum_requirement

    @minimum_requirement.setter
    def minimum_requirement(self, minimum_requirement):
        """Sets the minimum_requirement of this PersonalInsuranceData.


        :param minimum_requirement: The minimum_requirement of this PersonalInsuranceData.  # noqa: E501
        :type: PersonalInsuranceMinimumRequirement
        """

        self._minimum_requirement = minimum_requirement

    @property
    def target_audience(self):
        """Gets the target_audience of this PersonalInsuranceData.  # noqa: E501

        A considerar os domínios abaixo:    1. Pessoa Natural   2. Pessoa Jurídica   3. Ambas (Pessoa Natural e Jurídica)   4. NA   # noqa: E501

        :return: The target_audience of this PersonalInsuranceData.  # noqa: E501
        :rtype: str
        """
        return self._target_audience

    @target_audience.setter
    def target_audience(self, target_audience):
        """Sets the target_audience of this PersonalInsuranceData.

        A considerar os domínios abaixo:    1. Pessoa Natural   2. Pessoa Jurídica   3. Ambas (Pessoa Natural e Jurídica)   4. NA   # noqa: E501

        :param target_audience: The target_audience of this PersonalInsuranceData.  # noqa: E501
        :type: str
        """
        if target_audience is None:
            raise ValueError("Invalid value for `target_audience`, must not be `None`")  # noqa: E501
        allowed_values = ["PESSOA_NATURAL", "PESSOA_JURIDICA", "PESSOA_NATURAL_JURIDICA", "NA"]  # noqa: E501
        if target_audience not in allowed_values:
            raise ValueError(
                "Invalid value for `target_audience` ({0}), must be one of {1}"  # noqa: E501
                .format(target_audience, allowed_values)
            )

        self._target_audience = target_audience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalInsuranceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalInsuranceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
