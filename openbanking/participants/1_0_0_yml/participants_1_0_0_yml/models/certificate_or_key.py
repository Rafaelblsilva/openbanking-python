# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateOrKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organisation_id': 'OrganisationId',
        'software_statement_ids': 'list[SoftwareStatementId]',
        'client_name': 'str',
        'status': 'str',
        'valid_from_date_time': 'str',
        'expiry_date_time': 'str',
        'e': 'str',
        'key_type': 'str',
        'kid': 'str',
        'kty': 'str',
        'n': 'str',
        'use': 'str',
        'x5c': 'list[str]',
        'x5t': 'str',
        'x5thash_s256': 'str',
        'x5u': 'str',
        'signed_cert_path': 'str',
        'jwk_path': 'str',
        'org_jwk_path': 'str'
    }

    attribute_map = {
        'organisation_id': 'OrganisationId',
        'software_statement_ids': 'SoftwareStatementIds',
        'client_name': 'ClientName',
        'status': 'Status',
        'valid_from_date_time': 'ValidFromDateTime',
        'expiry_date_time': 'ExpiryDateTime',
        'e': 'e',
        'key_type': 'keyType',
        'kid': 'kid',
        'kty': 'kty',
        'n': 'n',
        'use': 'use',
        'x5c': 'x5c',
        'x5t': 'x5t',
        'x5thash_s256': 'x5thashS256',
        'x5u': 'x5u',
        'signed_cert_path': 'SignedCertPath',
        'jwk_path': 'JwkPath',
        'org_jwk_path': 'OrgJwkPath'
    }

    def __init__(self, organisation_id=None, software_statement_ids=None, client_name=None, status=None, valid_from_date_time=None, expiry_date_time=None, e=None, key_type=None, kid=None, kty=None, n=None, use=None, x5c=None, x5t=None, x5thash_s256=None, x5u=None, signed_cert_path=None, jwk_path=None, org_jwk_path=None):  # noqa: E501
        """CertificateOrKey - a model defined in Swagger"""  # noqa: E501
        self._organisation_id = None
        self._software_statement_ids = None
        self._client_name = None
        self._status = None
        self._valid_from_date_time = None
        self._expiry_date_time = None
        self._e = None
        self._key_type = None
        self._kid = None
        self._kty = None
        self._n = None
        self._use = None
        self._x5c = None
        self._x5t = None
        self._x5thash_s256 = None
        self._x5u = None
        self._signed_cert_path = None
        self._jwk_path = None
        self._org_jwk_path = None
        self.discriminator = None
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if software_statement_ids is not None:
            self.software_statement_ids = software_statement_ids
        if client_name is not None:
            self.client_name = client_name
        if status is not None:
            self.status = status
        if valid_from_date_time is not None:
            self.valid_from_date_time = valid_from_date_time
        if expiry_date_time is not None:
            self.expiry_date_time = expiry_date_time
        if e is not None:
            self.e = e
        if key_type is not None:
            self.key_type = key_type
        if kid is not None:
            self.kid = kid
        if kty is not None:
            self.kty = kty
        if n is not None:
            self.n = n
        if use is not None:
            self.use = use
        if x5c is not None:
            self.x5c = x5c
        if x5t is not None:
            self.x5t = x5t
        if x5thash_s256 is not None:
            self.x5thash_s256 = x5thash_s256
        if x5u is not None:
            self.x5u = x5u
        if signed_cert_path is not None:
            self.signed_cert_path = signed_cert_path
        if jwk_path is not None:
            self.jwk_path = jwk_path
        if org_jwk_path is not None:
            self.org_jwk_path = org_jwk_path

    @property
    def organisation_id(self):
        """Gets the organisation_id of this CertificateOrKey.  # noqa: E501


        :return: The organisation_id of this CertificateOrKey.  # noqa: E501
        :rtype: OrganisationId
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this CertificateOrKey.


        :param organisation_id: The organisation_id of this CertificateOrKey.  # noqa: E501
        :type: OrganisationId
        """

        self._organisation_id = organisation_id

    @property
    def software_statement_ids(self):
        """Gets the software_statement_ids of this CertificateOrKey.  # noqa: E501


        :return: The software_statement_ids of this CertificateOrKey.  # noqa: E501
        :rtype: list[SoftwareStatementId]
        """
        return self._software_statement_ids

    @software_statement_ids.setter
    def software_statement_ids(self, software_statement_ids):
        """Sets the software_statement_ids of this CertificateOrKey.


        :param software_statement_ids: The software_statement_ids of this CertificateOrKey.  # noqa: E501
        :type: list[SoftwareStatementId]
        """

        self._software_statement_ids = software_statement_ids

    @property
    def client_name(self):
        """Gets the client_name of this CertificateOrKey.  # noqa: E501


        :return: The client_name of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this CertificateOrKey.


        :param client_name: The client_name of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def status(self):
        """Gets the status of this CertificateOrKey.  # noqa: E501


        :return: The status of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertificateOrKey.


        :param status: The status of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def valid_from_date_time(self):
        """Gets the valid_from_date_time of this CertificateOrKey.  # noqa: E501


        :return: The valid_from_date_time of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._valid_from_date_time

    @valid_from_date_time.setter
    def valid_from_date_time(self, valid_from_date_time):
        """Sets the valid_from_date_time of this CertificateOrKey.


        :param valid_from_date_time: The valid_from_date_time of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._valid_from_date_time = valid_from_date_time

    @property
    def expiry_date_time(self):
        """Gets the expiry_date_time of this CertificateOrKey.  # noqa: E501


        :return: The expiry_date_time of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date_time

    @expiry_date_time.setter
    def expiry_date_time(self, expiry_date_time):
        """Sets the expiry_date_time of this CertificateOrKey.


        :param expiry_date_time: The expiry_date_time of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._expiry_date_time = expiry_date_time

    @property
    def e(self):
        """Gets the e of this CertificateOrKey.  # noqa: E501


        :return: The e of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._e

    @e.setter
    def e(self, e):
        """Sets the e of this CertificateOrKey.


        :param e: The e of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._e = e

    @property
    def key_type(self):
        """Gets the key_type of this CertificateOrKey.  # noqa: E501


        :return: The key_type of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this CertificateOrKey.


        :param key_type: The key_type of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._key_type = key_type

    @property
    def kid(self):
        """Gets the kid of this CertificateOrKey.  # noqa: E501


        :return: The kid of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this CertificateOrKey.


        :param kid: The kid of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._kid = kid

    @property
    def kty(self):
        """Gets the kty of this CertificateOrKey.  # noqa: E501


        :return: The kty of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this CertificateOrKey.


        :param kty: The kty of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._kty = kty

    @property
    def n(self):
        """Gets the n of this CertificateOrKey.  # noqa: E501


        :return: The n of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this CertificateOrKey.


        :param n: The n of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._n = n

    @property
    def use(self):
        """Gets the use of this CertificateOrKey.  # noqa: E501


        :return: The use of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this CertificateOrKey.


        :param use: The use of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._use = use

    @property
    def x5c(self):
        """Gets the x5c of this CertificateOrKey.  # noqa: E501


        :return: The x5c of this CertificateOrKey.  # noqa: E501
        :rtype: list[str]
        """
        return self._x5c

    @x5c.setter
    def x5c(self, x5c):
        """Sets the x5c of this CertificateOrKey.


        :param x5c: The x5c of this CertificateOrKey.  # noqa: E501
        :type: list[str]
        """

        self._x5c = x5c

    @property
    def x5t(self):
        """Gets the x5t of this CertificateOrKey.  # noqa: E501


        :return: The x5t of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._x5t

    @x5t.setter
    def x5t(self, x5t):
        """Sets the x5t of this CertificateOrKey.


        :param x5t: The x5t of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._x5t = x5t

    @property
    def x5thash_s256(self):
        """Gets the x5thash_s256 of this CertificateOrKey.  # noqa: E501


        :return: The x5thash_s256 of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._x5thash_s256

    @x5thash_s256.setter
    def x5thash_s256(self, x5thash_s256):
        """Sets the x5thash_s256 of this CertificateOrKey.


        :param x5thash_s256: The x5thash_s256 of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._x5thash_s256 = x5thash_s256

    @property
    def x5u(self):
        """Gets the x5u of this CertificateOrKey.  # noqa: E501


        :return: The x5u of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._x5u

    @x5u.setter
    def x5u(self, x5u):
        """Sets the x5u of this CertificateOrKey.


        :param x5u: The x5u of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._x5u = x5u

    @property
    def signed_cert_path(self):
        """Gets the signed_cert_path of this CertificateOrKey.  # noqa: E501

        Used to display location of the signed certificate in PEM format  # noqa: E501

        :return: The signed_cert_path of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._signed_cert_path

    @signed_cert_path.setter
    def signed_cert_path(self, signed_cert_path):
        """Sets the signed_cert_path of this CertificateOrKey.

        Used to display location of the signed certificate in PEM format  # noqa: E501

        :param signed_cert_path: The signed_cert_path of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._signed_cert_path = signed_cert_path

    @property
    def jwk_path(self):
        """Gets the jwk_path of this CertificateOrKey.  # noqa: E501

        Used to display path to JWKS containing this certificate  # noqa: E501

        :return: The jwk_path of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._jwk_path

    @jwk_path.setter
    def jwk_path(self, jwk_path):
        """Sets the jwk_path of this CertificateOrKey.

        Used to display path to JWKS containing this certificate  # noqa: E501

        :param jwk_path: The jwk_path of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._jwk_path = jwk_path

    @property
    def org_jwk_path(self):
        """Gets the org_jwk_path of this CertificateOrKey.  # noqa: E501

        Used to display path to Org JWKS containing org certificates  # noqa: E501

        :return: The org_jwk_path of this CertificateOrKey.  # noqa: E501
        :rtype: str
        """
        return self._org_jwk_path

    @org_jwk_path.setter
    def org_jwk_path(self, org_jwk_path):
        """Sets the org_jwk_path of this CertificateOrKey.

        Used to display path to Org JWKS containing org certificates  # noqa: E501

        :param org_jwk_path: The org_jwk_path of this CertificateOrKey.  # noqa: E501
        :type: str
        """

        self._org_jwk_path = org_jwk_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateOrKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateOrKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
