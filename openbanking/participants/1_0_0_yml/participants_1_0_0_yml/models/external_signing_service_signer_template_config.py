# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalSigningServiceSignerTemplateConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_id_signer1': 'str',
        'template_id_signer2': 'str',
        'template_id_signer3': 'str',
        'template_id_signer4': 'str',
        'template_id_signer5': 'str',
        'template_id_signer6': 'str'
    }

    attribute_map = {
        'template_id_signer1': 'TemplateIdSigner1',
        'template_id_signer2': 'TemplateIdSigner2',
        'template_id_signer3': 'TemplateIdSigner3',
        'template_id_signer4': 'TemplateIdSigner4',
        'template_id_signer5': 'TemplateIdSigner5',
        'template_id_signer6': 'TemplateIdSigner6'
    }

    def __init__(self, template_id_signer1=None, template_id_signer2=None, template_id_signer3=None, template_id_signer4=None, template_id_signer5=None, template_id_signer6=None):  # noqa: E501
        """ExternalSigningServiceSignerTemplateConfig - a model defined in Swagger"""  # noqa: E501
        self._template_id_signer1 = None
        self._template_id_signer2 = None
        self._template_id_signer3 = None
        self._template_id_signer4 = None
        self._template_id_signer5 = None
        self._template_id_signer6 = None
        self.discriminator = None
        if template_id_signer1 is not None:
            self.template_id_signer1 = template_id_signer1
        if template_id_signer2 is not None:
            self.template_id_signer2 = template_id_signer2
        if template_id_signer3 is not None:
            self.template_id_signer3 = template_id_signer3
        if template_id_signer4 is not None:
            self.template_id_signer4 = template_id_signer4
        if template_id_signer5 is not None:
            self.template_id_signer5 = template_id_signer5
        if template_id_signer6 is not None:
            self.template_id_signer6 = template_id_signer6

    @property
    def template_id_signer1(self):
        """Gets the template_id_signer1 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501

        Template ID for 1 signer  # noqa: E501

        :return: The template_id_signer1 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :rtype: str
        """
        return self._template_id_signer1

    @template_id_signer1.setter
    def template_id_signer1(self, template_id_signer1):
        """Sets the template_id_signer1 of this ExternalSigningServiceSignerTemplateConfig.

        Template ID for 1 signer  # noqa: E501

        :param template_id_signer1: The template_id_signer1 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :type: str
        """

        self._template_id_signer1 = template_id_signer1

    @property
    def template_id_signer2(self):
        """Gets the template_id_signer2 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501

        Template ID for 2 signers  # noqa: E501

        :return: The template_id_signer2 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :rtype: str
        """
        return self._template_id_signer2

    @template_id_signer2.setter
    def template_id_signer2(self, template_id_signer2):
        """Sets the template_id_signer2 of this ExternalSigningServiceSignerTemplateConfig.

        Template ID for 2 signers  # noqa: E501

        :param template_id_signer2: The template_id_signer2 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :type: str
        """

        self._template_id_signer2 = template_id_signer2

    @property
    def template_id_signer3(self):
        """Gets the template_id_signer3 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501

        Template ID for 3 signers  # noqa: E501

        :return: The template_id_signer3 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :rtype: str
        """
        return self._template_id_signer3

    @template_id_signer3.setter
    def template_id_signer3(self, template_id_signer3):
        """Sets the template_id_signer3 of this ExternalSigningServiceSignerTemplateConfig.

        Template ID for 3 signers  # noqa: E501

        :param template_id_signer3: The template_id_signer3 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :type: str
        """

        self._template_id_signer3 = template_id_signer3

    @property
    def template_id_signer4(self):
        """Gets the template_id_signer4 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501

        Template ID for 4 signers  # noqa: E501

        :return: The template_id_signer4 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :rtype: str
        """
        return self._template_id_signer4

    @template_id_signer4.setter
    def template_id_signer4(self, template_id_signer4):
        """Sets the template_id_signer4 of this ExternalSigningServiceSignerTemplateConfig.

        Template ID for 4 signers  # noqa: E501

        :param template_id_signer4: The template_id_signer4 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :type: str
        """

        self._template_id_signer4 = template_id_signer4

    @property
    def template_id_signer5(self):
        """Gets the template_id_signer5 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501

        Template ID for 5 signers  # noqa: E501

        :return: The template_id_signer5 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :rtype: str
        """
        return self._template_id_signer5

    @template_id_signer5.setter
    def template_id_signer5(self, template_id_signer5):
        """Sets the template_id_signer5 of this ExternalSigningServiceSignerTemplateConfig.

        Template ID for 5 signers  # noqa: E501

        :param template_id_signer5: The template_id_signer5 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :type: str
        """

        self._template_id_signer5 = template_id_signer5

    @property
    def template_id_signer6(self):
        """Gets the template_id_signer6 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501

        Template ID for 6 signers  # noqa: E501

        :return: The template_id_signer6 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :rtype: str
        """
        return self._template_id_signer6

    @template_id_signer6.setter
    def template_id_signer6(self, template_id_signer6):
        """Sets the template_id_signer6 of this ExternalSigningServiceSignerTemplateConfig.

        Template ID for 6 signers  # noqa: E501

        :param template_id_signer6: The template_id_signer6 of this ExternalSigningServiceSignerTemplateConfig.  # noqa: E501
        :type: str
        """

        self._template_id_signer6 = template_id_signer6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalSigningServiceSignerTemplateConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalSigningServiceSignerTemplateConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
