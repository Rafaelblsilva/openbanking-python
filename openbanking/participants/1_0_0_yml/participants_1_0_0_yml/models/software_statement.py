# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SoftwareStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'client_id': 'str',
        'client_name': 'str',
        'description': 'str',
        'environment': 'str',
        'organisation_id': 'OrganisationId',
        'software_statement_id': 'SoftwareStatementId',
        'mode': 'str',
        'rts_client_created': 'bool',
        'on_behalf_of': 'str',
        'policy_uri': 'str',
        'client_uri': 'str',
        'logo_uri': 'str',
        'redirect_uri': 'list[str]',
        'terms_of_service_uri': 'str',
        'version': 'float',
        'locked': 'bool'
    }

    attribute_map = {
        'status': 'Status',
        'client_id': 'ClientId',
        'client_name': 'ClientName',
        'description': 'Description',
        'environment': 'Environment',
        'organisation_id': 'OrganisationId',
        'software_statement_id': 'SoftwareStatementId',
        'mode': 'Mode',
        'rts_client_created': 'RtsClientCreated',
        'on_behalf_of': 'OnBehalfOf',
        'policy_uri': 'PolicyUri',
        'client_uri': 'ClientUri',
        'logo_uri': 'LogoUri',
        'redirect_uri': 'RedirectUri',
        'terms_of_service_uri': 'TermsOfServiceUri',
        'version': 'Version',
        'locked': 'Locked'
    }

    def __init__(self, status='Active', client_id=None, client_name=None, description=None, environment=None, organisation_id=None, software_statement_id=None, mode='Live', rts_client_created=None, on_behalf_of=None, policy_uri=None, client_uri=None, logo_uri=None, redirect_uri=None, terms_of_service_uri=None, version=None, locked=None):  # noqa: E501
        """SoftwareStatement - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._client_id = None
        self._client_name = None
        self._description = None
        self._environment = None
        self._organisation_id = None
        self._software_statement_id = None
        self._mode = None
        self._rts_client_created = None
        self._on_behalf_of = None
        self._policy_uri = None
        self._client_uri = None
        self._logo_uri = None
        self._redirect_uri = None
        self._terms_of_service_uri = None
        self._version = None
        self._locked = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if description is not None:
            self.description = description
        if environment is not None:
            self.environment = environment
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if software_statement_id is not None:
            self.software_statement_id = software_statement_id
        if mode is not None:
            self.mode = mode
        if rts_client_created is not None:
            self.rts_client_created = rts_client_created
        if on_behalf_of is not None:
            self.on_behalf_of = on_behalf_of
        if policy_uri is not None:
            self.policy_uri = policy_uri
        if client_uri is not None:
            self.client_uri = client_uri
        if logo_uri is not None:
            self.logo_uri = logo_uri
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if terms_of_service_uri is not None:
            self.terms_of_service_uri = terms_of_service_uri
        if version is not None:
            self.version = version
        if locked is not None:
            self.locked = locked

    @property
    def status(self):
        """Gets the status of this SoftwareStatement.  # noqa: E501

        Is this software statement Active/Inactive  # noqa: E501

        :return: The status of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SoftwareStatement.

        Is this software statement Active/Inactive  # noqa: E501

        :param status: The status of this SoftwareStatement.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def client_id(self):
        """Gets the client_id of this SoftwareStatement.  # noqa: E501

        Software Statement client Id  # noqa: E501

        :return: The client_id of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SoftwareStatement.

        Software Statement client Id  # noqa: E501

        :param client_id: The client_id of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this SoftwareStatement.  # noqa: E501

        Software Statement client name  # noqa: E501

        :return: The client_name of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this SoftwareStatement.

        Software Statement client name  # noqa: E501

        :param client_name: The client_name of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def description(self):
        """Gets the description of this SoftwareStatement.  # noqa: E501

        Software Statement description  # noqa: E501

        :return: The description of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SoftwareStatement.

        Software Statement description  # noqa: E501

        :param description: The description of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this SoftwareStatement.  # noqa: E501

        The additional check for software statement, this field can avoid  # noqa: E501

        :return: The environment of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this SoftwareStatement.

        The additional check for software statement, this field can avoid  # noqa: E501

        :param environment: The environment of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def organisation_id(self):
        """Gets the organisation_id of this SoftwareStatement.  # noqa: E501


        :return: The organisation_id of this SoftwareStatement.  # noqa: E501
        :rtype: OrganisationId
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this SoftwareStatement.


        :param organisation_id: The organisation_id of this SoftwareStatement.  # noqa: E501
        :type: OrganisationId
        """

        self._organisation_id = organisation_id

    @property
    def software_statement_id(self):
        """Gets the software_statement_id of this SoftwareStatement.  # noqa: E501


        :return: The software_statement_id of this SoftwareStatement.  # noqa: E501
        :rtype: SoftwareStatementId
        """
        return self._software_statement_id

    @software_statement_id.setter
    def software_statement_id(self, software_statement_id):
        """Sets the software_statement_id of this SoftwareStatement.


        :param software_statement_id: The software_statement_id of this SoftwareStatement.  # noqa: E501
        :type: SoftwareStatementId
        """

        self._software_statement_id = software_statement_id

    @property
    def mode(self):
        """Gets the mode of this SoftwareStatement.  # noqa: E501

        Software Statement mode  # noqa: E501

        :return: The mode of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SoftwareStatement.

        Software Statement mode  # noqa: E501

        :param mode: The mode of this SoftwareStatement.  # noqa: E501
        :type: str
        """
        allowed_values = ["Live", "Test"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def rts_client_created(self):
        """Gets the rts_client_created of this SoftwareStatement.  # noqa: E501

        Client created flag  # noqa: E501

        :return: The rts_client_created of this SoftwareStatement.  # noqa: E501
        :rtype: bool
        """
        return self._rts_client_created

    @rts_client_created.setter
    def rts_client_created(self, rts_client_created):
        """Sets the rts_client_created of this SoftwareStatement.

        Client created flag  # noqa: E501

        :param rts_client_created: The rts_client_created of this SoftwareStatement.  # noqa: E501
        :type: bool
        """

        self._rts_client_created = rts_client_created

    @property
    def on_behalf_of(self):
        """Gets the on_behalf_of of this SoftwareStatement.  # noqa: E501

        A reference to fourth party organisation resource on the RTS Directory if the registering Org is acting on behalf of another  # noqa: E501

        :return: The on_behalf_of of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._on_behalf_of

    @on_behalf_of.setter
    def on_behalf_of(self, on_behalf_of):
        """Sets the on_behalf_of of this SoftwareStatement.

        A reference to fourth party organisation resource on the RTS Directory if the registering Org is acting on behalf of another  # noqa: E501

        :param on_behalf_of: The on_behalf_of of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._on_behalf_of = on_behalf_of

    @property
    def policy_uri(self):
        """Gets the policy_uri of this SoftwareStatement.  # noqa: E501

        The Software Statement policy compliant URI  # noqa: E501

        :return: The policy_uri of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """Sets the policy_uri of this SoftwareStatement.

        The Software Statement policy compliant URI  # noqa: E501

        :param policy_uri: The policy_uri of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._policy_uri = policy_uri

    @property
    def client_uri(self):
        """Gets the client_uri of this SoftwareStatement.  # noqa: E501

        The Software Statement client compliant URI  # noqa: E501

        :return: The client_uri of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this SoftwareStatement.

        The Software Statement client compliant URI  # noqa: E501

        :param client_uri: The client_uri of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._client_uri = client_uri

    @property
    def logo_uri(self):
        """Gets the logo_uri of this SoftwareStatement.  # noqa: E501

        The Software Statement logo compliant URI  # noqa: E501

        :return: The logo_uri of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this SoftwareStatement.

        The Software Statement logo compliant URI  # noqa: E501

        :param logo_uri: The logo_uri of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._logo_uri = logo_uri

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this SoftwareStatement.  # noqa: E501

        The Software Statement redirect compliant URI  # noqa: E501

        :return: The redirect_uri of this SoftwareStatement.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this SoftwareStatement.

        The Software Statement redirect compliant URI  # noqa: E501

        :param redirect_uri: The redirect_uri of this SoftwareStatement.  # noqa: E501
        :type: list[str]
        """

        self._redirect_uri = redirect_uri

    @property
    def terms_of_service_uri(self):
        """Gets the terms_of_service_uri of this SoftwareStatement.  # noqa: E501

        The Software Statement terms of service compliant URI  # noqa: E501

        :return: The terms_of_service_uri of this SoftwareStatement.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_service_uri

    @terms_of_service_uri.setter
    def terms_of_service_uri(self, terms_of_service_uri):
        """Sets the terms_of_service_uri of this SoftwareStatement.

        The Software Statement terms of service compliant URI  # noqa: E501

        :param terms_of_service_uri: The terms_of_service_uri of this SoftwareStatement.  # noqa: E501
        :type: str
        """

        self._terms_of_service_uri = terms_of_service_uri

    @property
    def version(self):
        """Gets the version of this SoftwareStatement.  # noqa: E501

        Software Statement version as provided by the organisation's PTC  # noqa: E501

        :return: The version of this SoftwareStatement.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SoftwareStatement.

        Software Statement version as provided by the organisation's PTC  # noqa: E501

        :param version: The version of this SoftwareStatement.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def locked(self):
        """Gets the locked of this SoftwareStatement.  # noqa: E501

        Flag shows if assertion has been generated on the software statement - will be set to true when assertion is generated  # noqa: E501

        :return: The locked of this SoftwareStatement.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this SoftwareStatement.

        Flag shows if assertion has been generated on the software statement - will be set to true when assertion is generated  # noqa: E501

        :param locked: The locked of this SoftwareStatement.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoftwareStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwareStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
