# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganisationEnrol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'redirect_uris': 'list[str]',
        'token_endpoint_auth_method': 'str',
        'grant_types': 'list[str]',
        'response_types': 'list[str]',
        'client_name': 'object',
        'client_uri': 'str',
        'logo_uri': 'str',
        'scope': 'str',
        'tos_uri': 'str',
        'policy_uri': 'str'
    }

    attribute_map = {
        'redirect_uris': 'RedirectUris',
        'token_endpoint_auth_method': 'TokenEndpointAuthMethod',
        'grant_types': 'GrantTypes',
        'response_types': 'ResponseTypes',
        'client_name': 'ClientName',
        'client_uri': 'ClientUri',
        'logo_uri': 'LogoUri',
        'scope': 'Scope',
        'tos_uri': 'TosUri',
        'policy_uri': 'PolicyUri'
    }

    def __init__(self, redirect_uris=None, token_endpoint_auth_method=None, grant_types=None, response_types=None, client_name=None, client_uri=None, logo_uri=None, scope=None, tos_uri=None, policy_uri=None):  # noqa: E501
        """OrganisationEnrol - a model defined in Swagger"""  # noqa: E501
        self._redirect_uris = None
        self._token_endpoint_auth_method = None
        self._grant_types = None
        self._response_types = None
        self._client_name = None
        self._client_uri = None
        self._logo_uri = None
        self._scope = None
        self._tos_uri = None
        self._policy_uri = None
        self.discriminator = None
        self.redirect_uris = redirect_uris
        self.token_endpoint_auth_method = token_endpoint_auth_method
        self.grant_types = grant_types
        self.response_types = response_types
        self.client_name = client_name
        self.client_uri = client_uri
        self.logo_uri = logo_uri
        self.scope = scope
        self.tos_uri = tos_uri
        self.policy_uri = policy_uri

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this OrganisationEnrol.  # noqa: E501


        :return: The redirect_uris of this OrganisationEnrol.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this OrganisationEnrol.


        :param redirect_uris: The redirect_uris of this OrganisationEnrol.  # noqa: E501
        :type: list[str]
        """
        if redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")  # noqa: E501

        self._redirect_uris = redirect_uris

    @property
    def token_endpoint_auth_method(self):
        """Gets the token_endpoint_auth_method of this OrganisationEnrol.  # noqa: E501


        :return: The token_endpoint_auth_method of this OrganisationEnrol.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint_auth_method

    @token_endpoint_auth_method.setter
    def token_endpoint_auth_method(self, token_endpoint_auth_method):
        """Sets the token_endpoint_auth_method of this OrganisationEnrol.


        :param token_endpoint_auth_method: The token_endpoint_auth_method of this OrganisationEnrol.  # noqa: E501
        :type: str
        """
        if token_endpoint_auth_method is None:
            raise ValueError("Invalid value for `token_endpoint_auth_method`, must not be `None`")  # noqa: E501

        self._token_endpoint_auth_method = token_endpoint_auth_method

    @property
    def grant_types(self):
        """Gets the grant_types of this OrganisationEnrol.  # noqa: E501


        :return: The grant_types of this OrganisationEnrol.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this OrganisationEnrol.


        :param grant_types: The grant_types of this OrganisationEnrol.  # noqa: E501
        :type: list[str]
        """
        if grant_types is None:
            raise ValueError("Invalid value for `grant_types`, must not be `None`")  # noqa: E501

        self._grant_types = grant_types

    @property
    def response_types(self):
        """Gets the response_types of this OrganisationEnrol.  # noqa: E501


        :return: The response_types of this OrganisationEnrol.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this OrganisationEnrol.


        :param response_types: The response_types of this OrganisationEnrol.  # noqa: E501
        :type: list[str]
        """
        if response_types is None:
            raise ValueError("Invalid value for `response_types`, must not be `None`")  # noqa: E501

        self._response_types = response_types

    @property
    def client_name(self):
        """Gets the client_name of this OrganisationEnrol.  # noqa: E501

        ORG name as per eIDAS certificate  # noqa: E501

        :return: The client_name of this OrganisationEnrol.  # noqa: E501
        :rtype: object
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this OrganisationEnrol.

        ORG name as per eIDAS certificate  # noqa: E501

        :param client_name: The client_name of this OrganisationEnrol.  # noqa: E501
        :type: object
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")  # noqa: E501

        self._client_name = client_name

    @property
    def client_uri(self):
        """Gets the client_uri of this OrganisationEnrol.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The client_uri of this OrganisationEnrol.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this OrganisationEnrol.

        A compliant URI  # noqa: E501

        :param client_uri: The client_uri of this OrganisationEnrol.  # noqa: E501
        :type: str
        """
        if client_uri is None:
            raise ValueError("Invalid value for `client_uri`, must not be `None`")  # noqa: E501

        self._client_uri = client_uri

    @property
    def logo_uri(self):
        """Gets the logo_uri of this OrganisationEnrol.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The logo_uri of this OrganisationEnrol.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this OrganisationEnrol.

        A compliant URI  # noqa: E501

        :param logo_uri: The logo_uri of this OrganisationEnrol.  # noqa: E501
        :type: str
        """
        if logo_uri is None:
            raise ValueError("Invalid value for `logo_uri`, must not be `None`")  # noqa: E501

        self._logo_uri = logo_uri

    @property
    def scope(self):
        """Gets the scope of this OrganisationEnrol.  # noqa: E501


        :return: The scope of this OrganisationEnrol.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OrganisationEnrol.


        :param scope: The scope of this OrganisationEnrol.  # noqa: E501
        :type: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def tos_uri(self):
        """Gets the tos_uri of this OrganisationEnrol.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The tos_uri of this OrganisationEnrol.  # noqa: E501
        :rtype: str
        """
        return self._tos_uri

    @tos_uri.setter
    def tos_uri(self, tos_uri):
        """Sets the tos_uri of this OrganisationEnrol.

        A compliant URI  # noqa: E501

        :param tos_uri: The tos_uri of this OrganisationEnrol.  # noqa: E501
        :type: str
        """
        if tos_uri is None:
            raise ValueError("Invalid value for `tos_uri`, must not be `None`")  # noqa: E501

        self._tos_uri = tos_uri

    @property
    def policy_uri(self):
        """Gets the policy_uri of this OrganisationEnrol.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The policy_uri of this OrganisationEnrol.  # noqa: E501
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """Sets the policy_uri of this OrganisationEnrol.

        A compliant URI  # noqa: E501

        :param policy_uri: The policy_uri of this OrganisationEnrol.  # noqa: E501
        :type: str
        """
        if policy_uri is None:
            raise ValueError("Invalid value for `policy_uri`, must not be `None`")  # noqa: E501

        self._policy_uri = policy_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganisationEnrol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationEnrol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
