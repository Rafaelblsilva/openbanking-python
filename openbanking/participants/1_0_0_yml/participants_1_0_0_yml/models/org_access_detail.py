# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgAccessDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_admin': 'bool',
        'domain_role_details': 'list[DomainRoleDetail]'
    }

    attribute_map = {
        'org_admin': 'OrgAdmin',
        'domain_role_details': 'DomainRoleDetails'
    }

    def __init__(self, org_admin=None, domain_role_details=None):  # noqa: E501
        """OrgAccessDetail - a model defined in Swagger"""  # noqa: E501
        self._org_admin = None
        self._domain_role_details = None
        self.discriminator = None
        if org_admin is not None:
            self.org_admin = org_admin
        if domain_role_details is not None:
            self.domain_role_details = domain_role_details

    @property
    def org_admin(self):
        """Gets the org_admin of this OrgAccessDetail.  # noqa: E501

        Is the user the org admin of the current org  # noqa: E501

        :return: The org_admin of this OrgAccessDetail.  # noqa: E501
        :rtype: bool
        """
        return self._org_admin

    @org_admin.setter
    def org_admin(self, org_admin):
        """Sets the org_admin of this OrgAccessDetail.

        Is the user the org admin of the current org  # noqa: E501

        :param org_admin: The org_admin of this OrgAccessDetail.  # noqa: E501
        :type: bool
        """

        self._org_admin = org_admin

    @property
    def domain_role_details(self):
        """Gets the domain_role_details of this OrgAccessDetail.  # noqa: E501

        Array of domain, role and status of domain role mapping  # noqa: E501

        :return: The domain_role_details of this OrgAccessDetail.  # noqa: E501
        :rtype: list[DomainRoleDetail]
        """
        return self._domain_role_details

    @domain_role_details.setter
    def domain_role_details(self, domain_role_details):
        """Sets the domain_role_details of this OrgAccessDetail.

        Array of domain, role and status of domain role mapping  # noqa: E501

        :param domain_role_details: The domain_role_details of this OrgAccessDetail.  # noqa: E501
        :type: list[DomainRoleDetail]
        """

        self._domain_role_details = domain_role_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgAccessDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgAccessDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
