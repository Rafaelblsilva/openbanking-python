# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientCreationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_token_signed_response_alg': 'str',
        'token_endpoint_auth_method': 'str',
        'jwks_uri': 'str',
        'tls_client_auth_subject_dn': 'str',
        'redirect_uris': 'list[str]',
        'response_types': 'list[str]',
        'grant_types': 'list[str]',
        'scope': 'str'
    }

    attribute_map = {
        'id_token_signed_response_alg': 'id_token_signed_response_alg',
        'token_endpoint_auth_method': 'token_endpoint_auth_method',
        'jwks_uri': 'jwks_uri',
        'tls_client_auth_subject_dn': 'tls_client_auth_subject_dn',
        'redirect_uris': 'redirect_uris',
        'response_types': 'response_types',
        'grant_types': 'grant_types',
        'scope': 'scope'
    }

    def __init__(self, id_token_signed_response_alg='PS256', token_endpoint_auth_method='private_key_jwt', jwks_uri=None, tls_client_auth_subject_dn=None, redirect_uris=None, response_types=None, grant_types=None, scope=None):  # noqa: E501
        """ClientCreationRequest - a model defined in Swagger"""  # noqa: E501
        self._id_token_signed_response_alg = None
        self._token_endpoint_auth_method = None
        self._jwks_uri = None
        self._tls_client_auth_subject_dn = None
        self._redirect_uris = None
        self._response_types = None
        self._grant_types = None
        self._scope = None
        self.discriminator = None
        self.id_token_signed_response_alg = id_token_signed_response_alg
        self.token_endpoint_auth_method = token_endpoint_auth_method
        self.jwks_uri = jwks_uri
        if tls_client_auth_subject_dn is not None:
            self.tls_client_auth_subject_dn = tls_client_auth_subject_dn
        self.redirect_uris = redirect_uris
        self.response_types = response_types
        self.grant_types = grant_types
        self.scope = scope

    @property
    def id_token_signed_response_alg(self):
        """Gets the id_token_signed_response_alg of this ClientCreationRequest.  # noqa: E501

        Signing algorithim that a client expects the server to return an id_token with. Must be PS256  # noqa: E501

        :return: The id_token_signed_response_alg of this ClientCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._id_token_signed_response_alg

    @id_token_signed_response_alg.setter
    def id_token_signed_response_alg(self, id_token_signed_response_alg):
        """Sets the id_token_signed_response_alg of this ClientCreationRequest.

        Signing algorithim that a client expects the server to return an id_token with. Must be PS256  # noqa: E501

        :param id_token_signed_response_alg: The id_token_signed_response_alg of this ClientCreationRequest.  # noqa: E501
        :type: str
        """
        if id_token_signed_response_alg is None:
            raise ValueError("Invalid value for `id_token_signed_response_alg`, must not be `None`")  # noqa: E501
        allowed_values = ["PS256"]  # noqa: E501
        if id_token_signed_response_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `id_token_signed_response_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(id_token_signed_response_alg, allowed_values)
            )

        self._id_token_signed_response_alg = id_token_signed_response_alg

    @property
    def token_endpoint_auth_method(self):
        """Gets the token_endpoint_auth_method of this ClientCreationRequest.  # noqa: E501

        Token endpoint authentication method  # noqa: E501

        :return: The token_endpoint_auth_method of this ClientCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint_auth_method

    @token_endpoint_auth_method.setter
    def token_endpoint_auth_method(self, token_endpoint_auth_method):
        """Sets the token_endpoint_auth_method of this ClientCreationRequest.

        Token endpoint authentication method  # noqa: E501

        :param token_endpoint_auth_method: The token_endpoint_auth_method of this ClientCreationRequest.  # noqa: E501
        :type: str
        """
        if token_endpoint_auth_method is None:
            raise ValueError("Invalid value for `token_endpoint_auth_method`, must not be `None`")  # noqa: E501
        allowed_values = ["private_key_jwt", "tls_client_auth", "client_secret_basic"]  # noqa: E501
        if token_endpoint_auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `token_endpoint_auth_method` ({0}), must be one of {1}"  # noqa: E501
                .format(token_endpoint_auth_method, allowed_values)
            )

        self._token_endpoint_auth_method = token_endpoint_auth_method

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this ClientCreationRequest.  # noqa: E501

        Link to the application active jwks  # noqa: E501

        :return: The jwks_uri of this ClientCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this ClientCreationRequest.

        Link to the application active jwks  # noqa: E501

        :param jwks_uri: The jwks_uri of this ClientCreationRequest.  # noqa: E501
        :type: str
        """
        if jwks_uri is None:
            raise ValueError("Invalid value for `jwks_uri`, must not be `None`")  # noqa: E501

        self._jwks_uri = jwks_uri

    @property
    def tls_client_auth_subject_dn(self):
        """Gets the tls_client_auth_subject_dn of this ClientCreationRequest.  # noqa: E501

        The DN of the certificate that will be used to authenticate to this client  # noqa: E501

        :return: The tls_client_auth_subject_dn of this ClientCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._tls_client_auth_subject_dn

    @tls_client_auth_subject_dn.setter
    def tls_client_auth_subject_dn(self, tls_client_auth_subject_dn):
        """Sets the tls_client_auth_subject_dn of this ClientCreationRequest.

        The DN of the certificate that will be used to authenticate to this client  # noqa: E501

        :param tls_client_auth_subject_dn: The tls_client_auth_subject_dn of this ClientCreationRequest.  # noqa: E501
        :type: str
        """

        self._tls_client_auth_subject_dn = tls_client_auth_subject_dn

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this ClientCreationRequest.  # noqa: E501

        redirect_uris uri must be provided. For client_credentials this should be an empty array.  # noqa: E501

        :return: The redirect_uris of this ClientCreationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this ClientCreationRequest.

        redirect_uris uri must be provided. For client_credentials this should be an empty array.  # noqa: E501

        :param redirect_uris: The redirect_uris of this ClientCreationRequest.  # noqa: E501
        :type: list[str]
        """
        if redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")  # noqa: E501

        self._redirect_uris = redirect_uris

    @property
    def response_types(self):
        """Gets the response_types of this ClientCreationRequest.  # noqa: E501

        response_types uri must be provided. For client_credentials this should be an empty array  # noqa: E501

        :return: The response_types of this ClientCreationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this ClientCreationRequest.

        response_types uri must be provided. For client_credentials this should be an empty array  # noqa: E501

        :param response_types: The response_types of this ClientCreationRequest.  # noqa: E501
        :type: list[str]
        """
        if response_types is None:
            raise ValueError("Invalid value for `response_types`, must not be `None`")  # noqa: E501

        self._response_types = response_types

    @property
    def grant_types(self):
        """Gets the grant_types of this ClientCreationRequest.  # noqa: E501

        grant_types uri must be provided. For client_credentials this should be array containing [\"client_credentials\"]  # noqa: E501

        :return: The grant_types of this ClientCreationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this ClientCreationRequest.

        grant_types uri must be provided. For client_credentials this should be array containing [\"client_credentials\"]  # noqa: E501

        :param grant_types: The grant_types of this ClientCreationRequest.  # noqa: E501
        :type: list[str]
        """
        if grant_types is None:
            raise ValueError("Invalid value for `grant_types`, must not be `None`")  # noqa: E501

        self._grant_types = grant_types

    @property
    def scope(self):
        """Gets the scope of this ClientCreationRequest.  # noqa: E501

        scopes to be tagged  # noqa: E501

        :return: The scope of this ClientCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ClientCreationRequest.

        scopes to be tagged  # noqa: E501

        :param scope: The scope of this ClientCreationRequest.  # noqa: E501
        :type: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientCreationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCreationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
