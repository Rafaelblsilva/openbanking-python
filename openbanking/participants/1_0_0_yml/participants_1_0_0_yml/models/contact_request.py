# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_type': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'department': 'str',
        'email_address': 'str',
        'phone_number': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'postcode': 'str',
        'country': 'str',
        'additional_information': 'str',
        'pgp_public_key': 'str'
    }

    attribute_map = {
        'contact_type': 'ContactType',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'department': 'Department',
        'email_address': 'EmailAddress',
        'phone_number': 'PhoneNumber',
        'address_line1': 'AddressLine1',
        'address_line2': 'AddressLine2',
        'city': 'City',
        'postcode': 'Postcode',
        'country': 'Country',
        'additional_information': 'AdditionalInformation',
        'pgp_public_key': 'PgpPublicKey'
    }

    def __init__(self, contact_type='Business', first_name=None, last_name=None, department=None, email_address=None, phone_number=None, address_line1=None, address_line2=None, city=None, postcode=None, country=None, additional_information=None, pgp_public_key=None):  # noqa: E501
        """ContactRequest - a model defined in Swagger"""  # noqa: E501
        self._contact_type = None
        self._first_name = None
        self._last_name = None
        self._department = None
        self._email_address = None
        self._phone_number = None
        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._postcode = None
        self._country = None
        self._additional_information = None
        self._pgp_public_key = None
        self.discriminator = None
        self.contact_type = contact_type
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if department is not None:
            self.department = department
        self.email_address = email_address
        self.phone_number = phone_number
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if city is not None:
            self.city = city
        if postcode is not None:
            self.postcode = postcode
        if country is not None:
            self.country = country
        if additional_information is not None:
            self.additional_information = additional_information
        if pgp_public_key is not None:
            self.pgp_public_key = pgp_public_key

    @property
    def contact_type(self):
        """Gets the contact_type of this ContactRequest.  # noqa: E501

        The type of Contact, default contact type is Business.  # noqa: E501

        :return: The contact_type of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this ContactRequest.

        The type of Contact, default contact type is Business.  # noqa: E501

        :param contact_type: The contact_type of this ContactRequest.  # noqa: E501
        :type: str
        """
        if contact_type is None:
            raise ValueError("Invalid value for `contact_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Business", "Technical", "Billing", "Incident", "Security"]  # noqa: E501
        if contact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_type` ({0}), must be one of {1}"  # noqa: E501
                .format(contact_type, allowed_values)
            )

        self._contact_type = contact_type

    @property
    def first_name(self):
        """Gets the first_name of this ContactRequest.  # noqa: E501


        :return: The first_name of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactRequest.


        :param first_name: The first_name of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactRequest.  # noqa: E501


        :return: The last_name of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactRequest.


        :param last_name: The last_name of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def department(self):
        """Gets the department of this ContactRequest.  # noqa: E501


        :return: The department of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this ContactRequest.


        :param department: The department of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def email_address(self):
        """Gets the email_address of this ContactRequest.  # noqa: E501


        :return: The email_address of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ContactRequest.


        :param email_address: The email_address of this ContactRequest.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def phone_number(self):
        """Gets the phone_number of this ContactRequest.  # noqa: E501


        :return: The phone_number of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ContactRequest.


        :param phone_number: The phone_number of this ContactRequest.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def address_line1(self):
        """Gets the address_line1 of this ContactRequest.  # noqa: E501

        Address line 1  # noqa: E501

        :return: The address_line1 of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this ContactRequest.

        Address line 1  # noqa: E501

        :param address_line1: The address_line1 of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this ContactRequest.  # noqa: E501

        Address line 2  # noqa: E501

        :return: The address_line2 of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this ContactRequest.

        Address line 2  # noqa: E501

        :param address_line2: The address_line2 of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this ContactRequest.  # noqa: E501

        City  # noqa: E501

        :return: The city of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactRequest.

        City  # noqa: E501

        :param city: The city of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postcode(self):
        """Gets the postcode of this ContactRequest.  # noqa: E501

        Postcode  # noqa: E501

        :return: The postcode of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this ContactRequest.

        Postcode  # noqa: E501

        :param postcode: The postcode of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def country(self):
        """Gets the country of this ContactRequest.  # noqa: E501

        Country  # noqa: E501

        :return: The country of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactRequest.

        Country  # noqa: E501

        :param country: The country of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def additional_information(self):
        """Gets the additional_information of this ContactRequest.  # noqa: E501

        Any additional user information  # noqa: E501

        :return: The additional_information of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this ContactRequest.

        Any additional user information  # noqa: E501

        :param additional_information: The additional_information of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    @property
    def pgp_public_key(self):
        """Gets the pgp_public_key of this ContactRequest.  # noqa: E501

        A PGP Public Key in text form  # noqa: E501

        :return: The pgp_public_key of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._pgp_public_key

    @pgp_public_key.setter
    def pgp_public_key(self, pgp_public_key):
        """Sets the pgp_public_key of this ContactRequest.

        A PGP Public Key in text form  # noqa: E501

        :param pgp_public_key: The pgp_public_key of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._pgp_public_key = pgp_public_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
