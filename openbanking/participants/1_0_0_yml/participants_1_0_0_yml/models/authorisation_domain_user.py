# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthorisationDomainUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorisation_domain_user_id': 'str',
        'email': 'str',
        'authorisation_domain': 'str',
        'authorisation_domain_role': 'str',
        'status': 'str',
        'contact_role': 'str'
    }

    attribute_map = {
        'authorisation_domain_user_id': 'AuthorisationDomainUserId',
        'email': 'Email',
        'authorisation_domain': 'AuthorisationDomain',
        'authorisation_domain_role': 'AuthorisationDomainRole',
        'status': 'Status',
        'contact_role': 'ContactRole'
    }

    def __init__(self, authorisation_domain_user_id=None, email=None, authorisation_domain=None, authorisation_domain_role=None, status='Active', contact_role=None):  # noqa: E501
        """AuthorisationDomainUser - a model defined in Swagger"""  # noqa: E501
        self._authorisation_domain_user_id = None
        self._email = None
        self._authorisation_domain = None
        self._authorisation_domain_role = None
        self._status = None
        self._contact_role = None
        self.discriminator = None
        if authorisation_domain_user_id is not None:
            self.authorisation_domain_user_id = authorisation_domain_user_id
        if email is not None:
            self.email = email
        if authorisation_domain is not None:
            self.authorisation_domain = authorisation_domain
        if authorisation_domain_role is not None:
            self.authorisation_domain_role = authorisation_domain_role
        if status is not None:
            self.status = status
        if contact_role is not None:
            self.contact_role = contact_role

    @property
    def authorisation_domain_user_id(self):
        """Gets the authorisation_domain_user_id of this AuthorisationDomainUser.  # noqa: E501

        Unique record ID  # noqa: E501

        :return: The authorisation_domain_user_id of this AuthorisationDomainUser.  # noqa: E501
        :rtype: str
        """
        return self._authorisation_domain_user_id

    @authorisation_domain_user_id.setter
    def authorisation_domain_user_id(self, authorisation_domain_user_id):
        """Sets the authorisation_domain_user_id of this AuthorisationDomainUser.

        Unique record ID  # noqa: E501

        :param authorisation_domain_user_id: The authorisation_domain_user_id of this AuthorisationDomainUser.  # noqa: E501
        :type: str
        """

        self._authorisation_domain_user_id = authorisation_domain_user_id

    @property
    def email(self):
        """Gets the email of this AuthorisationDomainUser.  # noqa: E501

        The user email address  # noqa: E501

        :return: The email of this AuthorisationDomainUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AuthorisationDomainUser.

        The user email address  # noqa: E501

        :param email: The email of this AuthorisationDomainUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def authorisation_domain(self):
        """Gets the authorisation_domain of this AuthorisationDomainUser.  # noqa: E501

        The authorisation domain for this user  # noqa: E501

        :return: The authorisation_domain of this AuthorisationDomainUser.  # noqa: E501
        :rtype: str
        """
        return self._authorisation_domain

    @authorisation_domain.setter
    def authorisation_domain(self, authorisation_domain):
        """Sets the authorisation_domain of this AuthorisationDomainUser.

        The authorisation domain for this user  # noqa: E501

        :param authorisation_domain: The authorisation_domain of this AuthorisationDomainUser.  # noqa: E501
        :type: str
        """

        self._authorisation_domain = authorisation_domain

    @property
    def authorisation_domain_role(self):
        """Gets the authorisation_domain_role of this AuthorisationDomainUser.  # noqa: E501

        The authorisation domain role for this user  # noqa: E501

        :return: The authorisation_domain_role of this AuthorisationDomainUser.  # noqa: E501
        :rtype: str
        """
        return self._authorisation_domain_role

    @authorisation_domain_role.setter
    def authorisation_domain_role(self, authorisation_domain_role):
        """Sets the authorisation_domain_role of this AuthorisationDomainUser.

        The authorisation domain role for this user  # noqa: E501

        :param authorisation_domain_role: The authorisation_domain_role of this AuthorisationDomainUser.  # noqa: E501
        :type: str
        """

        self._authorisation_domain_role = authorisation_domain_role

    @property
    def status(self):
        """Gets the status of this AuthorisationDomainUser.  # noqa: E501

        Is this user Active or Inactive  # noqa: E501

        :return: The status of this AuthorisationDomainUser.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthorisationDomainUser.

        Is this user Active or Inactive  # noqa: E501

        :param status: The status of this AuthorisationDomainUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def contact_role(self):
        """Gets the contact_role of this AuthorisationDomainUser.  # noqa: E501

        Type of role for this user  # noqa: E501

        :return: The contact_role of this AuthorisationDomainUser.  # noqa: E501
        :rtype: str
        """
        return self._contact_role

    @contact_role.setter
    def contact_role(self, contact_role):
        """Sets the contact_role of this AuthorisationDomainUser.

        Type of role for this user  # noqa: E501

        :param contact_role: The contact_role of this AuthorisationDomainUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["PTC", "STC", "PBC", "SBC"]  # noqa: E501
        if contact_role not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_role` ({0}), must be one of {1}"  # noqa: E501
                .format(contact_role, allowed_values)
            )

        self._contact_role = contact_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorisationDomainUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorisationDomainUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
