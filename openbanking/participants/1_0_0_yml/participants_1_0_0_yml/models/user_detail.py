# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'super_user': 'bool',
        'system_user': 'bool',
        'basic_information': 'UserDetailBasicInformation',
        'org_access_details': 'dict(str, OrgAccessDetail)',
        'directory_terms_and_conditions_details': 'TermsAndConditionsDetails'
    }

    attribute_map = {
        'super_user': 'SuperUser',
        'system_user': 'SystemUser',
        'basic_information': 'BasicInformation',
        'org_access_details': 'OrgAccessDetails',
        'directory_terms_and_conditions_details': 'DirectoryTermsAndConditionsDetails'
    }

    def __init__(self, super_user=None, system_user=None, basic_information=None, org_access_details=None, directory_terms_and_conditions_details=None):  # noqa: E501
        """UserDetail - a model defined in Swagger"""  # noqa: E501
        self._super_user = None
        self._system_user = None
        self._basic_information = None
        self._org_access_details = None
        self._directory_terms_and_conditions_details = None
        self.discriminator = None
        if super_user is not None:
            self.super_user = super_user
        if system_user is not None:
            self.system_user = system_user
        if basic_information is not None:
            self.basic_information = basic_information
        if org_access_details is not None:
            self.org_access_details = org_access_details
        if directory_terms_and_conditions_details is not None:
            self.directory_terms_and_conditions_details = directory_terms_and_conditions_details

    @property
    def super_user(self):
        """Gets the super_user of this UserDetail.  # noqa: E501

        Is the user a super user  # noqa: E501

        :return: The super_user of this UserDetail.  # noqa: E501
        :rtype: bool
        """
        return self._super_user

    @super_user.setter
    def super_user(self, super_user):
        """Sets the super_user of this UserDetail.

        Is the user a super user  # noqa: E501

        :param super_user: The super_user of this UserDetail.  # noqa: E501
        :type: bool
        """

        self._super_user = super_user

    @property
    def system_user(self):
        """Gets the system_user of this UserDetail.  # noqa: E501

        Is the user a system user  # noqa: E501

        :return: The system_user of this UserDetail.  # noqa: E501
        :rtype: bool
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this UserDetail.

        Is the user a system user  # noqa: E501

        :param system_user: The system_user of this UserDetail.  # noqa: E501
        :type: bool
        """

        self._system_user = system_user

    @property
    def basic_information(self):
        """Gets the basic_information of this UserDetail.  # noqa: E501


        :return: The basic_information of this UserDetail.  # noqa: E501
        :rtype: UserDetailBasicInformation
        """
        return self._basic_information

    @basic_information.setter
    def basic_information(self, basic_information):
        """Sets the basic_information of this UserDetail.


        :param basic_information: The basic_information of this UserDetail.  # noqa: E501
        :type: UserDetailBasicInformation
        """

        self._basic_information = basic_information

    @property
    def org_access_details(self):
        """Gets the org_access_details of this UserDetail.  # noqa: E501

        Map Key - Org ID, Map Value - Org Access Detail(contaning info about org admin and domain role details)  # noqa: E501

        :return: The org_access_details of this UserDetail.  # noqa: E501
        :rtype: dict(str, OrgAccessDetail)
        """
        return self._org_access_details

    @org_access_details.setter
    def org_access_details(self, org_access_details):
        """Sets the org_access_details of this UserDetail.

        Map Key - Org ID, Map Value - Org Access Detail(contaning info about org admin and domain role details)  # noqa: E501

        :param org_access_details: The org_access_details of this UserDetail.  # noqa: E501
        :type: dict(str, OrgAccessDetail)
        """

        self._org_access_details = org_access_details

    @property
    def directory_terms_and_conditions_details(self):
        """Gets the directory_terms_and_conditions_details of this UserDetail.  # noqa: E501


        :return: The directory_terms_and_conditions_details of this UserDetail.  # noqa: E501
        :rtype: TermsAndConditionsDetails
        """
        return self._directory_terms_and_conditions_details

    @directory_terms_and_conditions_details.setter
    def directory_terms_and_conditions_details(self, directory_terms_and_conditions_details):
        """Sets the directory_terms_and_conditions_details of this UserDetail.


        :param directory_terms_and_conditions_details: The directory_terms_and_conditions_details of this UserDetail.  # noqa: E501
        :type: TermsAndConditionsDetails
        """

        self._directory_terms_and_conditions_details = directory_terms_and_conditions_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
