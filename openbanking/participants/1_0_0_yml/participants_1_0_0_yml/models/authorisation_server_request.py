# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthorisationServerRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_registration_supported': 'bool',
        'customer_friendly_description': 'str',
        'customer_friendly_logo_uri': 'str',
        'customer_friendly_name': 'str',
        'developer_portal_uri': 'str',
        'terms_of_service_uri': 'str',
        'notification_webhook': 'str',
        'open_id_discovery_document': 'str',
        'payload_signing_cert_location_uri': 'str',
        'parent_authorisation_server_id': 'AuthorisationServerId'
    }

    attribute_map = {
        'auto_registration_supported': 'AutoRegistrationSupported',
        'customer_friendly_description': 'CustomerFriendlyDescription',
        'customer_friendly_logo_uri': 'CustomerFriendlyLogoUri',
        'customer_friendly_name': 'CustomerFriendlyName',
        'developer_portal_uri': 'DeveloperPortalUri',
        'terms_of_service_uri': 'TermsOfServiceUri',
        'notification_webhook': 'NotificationWebhook',
        'open_id_discovery_document': 'OpenIDDiscoveryDocument',
        'payload_signing_cert_location_uri': 'PayloadSigningCertLocationUri',
        'parent_authorisation_server_id': 'ParentAuthorisationServerId'
    }

    def __init__(self, auto_registration_supported=None, customer_friendly_description=None, customer_friendly_logo_uri=None, customer_friendly_name=None, developer_portal_uri=None, terms_of_service_uri=None, notification_webhook=None, open_id_discovery_document=None, payload_signing_cert_location_uri=None, parent_authorisation_server_id=None):  # noqa: E501
        """AuthorisationServerRequest - a model defined in Swagger"""  # noqa: E501
        self._auto_registration_supported = None
        self._customer_friendly_description = None
        self._customer_friendly_logo_uri = None
        self._customer_friendly_name = None
        self._developer_portal_uri = None
        self._terms_of_service_uri = None
        self._notification_webhook = None
        self._open_id_discovery_document = None
        self._payload_signing_cert_location_uri = None
        self._parent_authorisation_server_id = None
        self.discriminator = None
        self.auto_registration_supported = auto_registration_supported
        if customer_friendly_description is not None:
            self.customer_friendly_description = customer_friendly_description
        self.customer_friendly_logo_uri = customer_friendly_logo_uri
        self.customer_friendly_name = customer_friendly_name
        self.developer_portal_uri = developer_portal_uri
        self.terms_of_service_uri = terms_of_service_uri
        if notification_webhook is not None:
            self.notification_webhook = notification_webhook
        self.open_id_discovery_document = open_id_discovery_document
        self.payload_signing_cert_location_uri = payload_signing_cert_location_uri
        if parent_authorisation_server_id is not None:
            self.parent_authorisation_server_id = parent_authorisation_server_id

    @property
    def auto_registration_supported(self):
        """Gets the auto_registration_supported of this AuthorisationServerRequest.  # noqa: E501

        Default is true  # noqa: E501

        :return: The auto_registration_supported of this AuthorisationServerRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_registration_supported

    @auto_registration_supported.setter
    def auto_registration_supported(self, auto_registration_supported):
        """Sets the auto_registration_supported of this AuthorisationServerRequest.

        Default is true  # noqa: E501

        :param auto_registration_supported: The auto_registration_supported of this AuthorisationServerRequest.  # noqa: E501
        :type: bool
        """
        if auto_registration_supported is None:
            raise ValueError("Invalid value for `auto_registration_supported`, must not be `None`")  # noqa: E501

        self._auto_registration_supported = auto_registration_supported

    @property
    def customer_friendly_description(self):
        """Gets the customer_friendly_description of this AuthorisationServerRequest.  # noqa: E501

        A customer friendly description  # noqa: E501

        :return: The customer_friendly_description of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_friendly_description

    @customer_friendly_description.setter
    def customer_friendly_description(self, customer_friendly_description):
        """Sets the customer_friendly_description of this AuthorisationServerRequest.

        A customer friendly description  # noqa: E501

        :param customer_friendly_description: The customer_friendly_description of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """

        self._customer_friendly_description = customer_friendly_description

    @property
    def customer_friendly_logo_uri(self):
        """Gets the customer_friendly_logo_uri of this AuthorisationServerRequest.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The customer_friendly_logo_uri of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_friendly_logo_uri

    @customer_friendly_logo_uri.setter
    def customer_friendly_logo_uri(self, customer_friendly_logo_uri):
        """Sets the customer_friendly_logo_uri of this AuthorisationServerRequest.

        A compliant URI  # noqa: E501

        :param customer_friendly_logo_uri: The customer_friendly_logo_uri of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """
        if customer_friendly_logo_uri is None:
            raise ValueError("Invalid value for `customer_friendly_logo_uri`, must not be `None`")  # noqa: E501

        self._customer_friendly_logo_uri = customer_friendly_logo_uri

    @property
    def customer_friendly_name(self):
        """Gets the customer_friendly_name of this AuthorisationServerRequest.  # noqa: E501


        :return: The customer_friendly_name of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_friendly_name

    @customer_friendly_name.setter
    def customer_friendly_name(self, customer_friendly_name):
        """Sets the customer_friendly_name of this AuthorisationServerRequest.


        :param customer_friendly_name: The customer_friendly_name of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """
        if customer_friendly_name is None:
            raise ValueError("Invalid value for `customer_friendly_name`, must not be `None`")  # noqa: E501

        self._customer_friendly_name = customer_friendly_name

    @property
    def developer_portal_uri(self):
        """Gets the developer_portal_uri of this AuthorisationServerRequest.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The developer_portal_uri of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._developer_portal_uri

    @developer_portal_uri.setter
    def developer_portal_uri(self, developer_portal_uri):
        """Sets the developer_portal_uri of this AuthorisationServerRequest.

        A compliant URI  # noqa: E501

        :param developer_portal_uri: The developer_portal_uri of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """
        if developer_portal_uri is None:
            raise ValueError("Invalid value for `developer_portal_uri`, must not be `None`")  # noqa: E501

        self._developer_portal_uri = developer_portal_uri

    @property
    def terms_of_service_uri(self):
        """Gets the terms_of_service_uri of this AuthorisationServerRequest.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The terms_of_service_uri of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_service_uri

    @terms_of_service_uri.setter
    def terms_of_service_uri(self, terms_of_service_uri):
        """Sets the terms_of_service_uri of this AuthorisationServerRequest.

        A compliant URI  # noqa: E501

        :param terms_of_service_uri: The terms_of_service_uri of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """
        if terms_of_service_uri is None:
            raise ValueError("Invalid value for `terms_of_service_uri`, must not be `None`")  # noqa: E501

        self._terms_of_service_uri = terms_of_service_uri

    @property
    def notification_webhook(self):
        """Gets the notification_webhook of this AuthorisationServerRequest.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The notification_webhook of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._notification_webhook

    @notification_webhook.setter
    def notification_webhook(self, notification_webhook):
        """Sets the notification_webhook of this AuthorisationServerRequest.

        A compliant URI  # noqa: E501

        :param notification_webhook: The notification_webhook of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """

        self._notification_webhook = notification_webhook

    @property
    def open_id_discovery_document(self):
        """Gets the open_id_discovery_document of this AuthorisationServerRequest.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The open_id_discovery_document of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._open_id_discovery_document

    @open_id_discovery_document.setter
    def open_id_discovery_document(self, open_id_discovery_document):
        """Sets the open_id_discovery_document of this AuthorisationServerRequest.

        A compliant URI  # noqa: E501

        :param open_id_discovery_document: The open_id_discovery_document of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """
        if open_id_discovery_document is None:
            raise ValueError("Invalid value for `open_id_discovery_document`, must not be `None`")  # noqa: E501

        self._open_id_discovery_document = open_id_discovery_document

    @property
    def payload_signing_cert_location_uri(self):
        """Gets the payload_signing_cert_location_uri of this AuthorisationServerRequest.  # noqa: E501

        A compliant URI  # noqa: E501

        :return: The payload_signing_cert_location_uri of this AuthorisationServerRequest.  # noqa: E501
        :rtype: str
        """
        return self._payload_signing_cert_location_uri

    @payload_signing_cert_location_uri.setter
    def payload_signing_cert_location_uri(self, payload_signing_cert_location_uri):
        """Sets the payload_signing_cert_location_uri of this AuthorisationServerRequest.

        A compliant URI  # noqa: E501

        :param payload_signing_cert_location_uri: The payload_signing_cert_location_uri of this AuthorisationServerRequest.  # noqa: E501
        :type: str
        """
        if payload_signing_cert_location_uri is None:
            raise ValueError("Invalid value for `payload_signing_cert_location_uri`, must not be `None`")  # noqa: E501

        self._payload_signing_cert_location_uri = payload_signing_cert_location_uri

    @property
    def parent_authorisation_server_id(self):
        """Gets the parent_authorisation_server_id of this AuthorisationServerRequest.  # noqa: E501


        :return: The parent_authorisation_server_id of this AuthorisationServerRequest.  # noqa: E501
        :rtype: AuthorisationServerId
        """
        return self._parent_authorisation_server_id

    @parent_authorisation_server_id.setter
    def parent_authorisation_server_id(self, parent_authorisation_server_id):
        """Sets the parent_authorisation_server_id of this AuthorisationServerRequest.


        :param parent_authorisation_server_id: The parent_authorisation_server_id of this AuthorisationServerRequest.  # noqa: E501
        :type: AuthorisationServerId
        """

        self._parent_authorisation_server_id = parent_authorisation_server_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorisationServerRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorisationServerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
