# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthorityRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authority_name': 'str',
        'authority_code': 'str',
        'authority_uri': 'str',
        'authority_country': 'str'
    }

    attribute_map = {
        'authority_name': 'AuthorityName',
        'authority_code': 'AuthorityCode',
        'authority_uri': 'AuthorityUri',
        'authority_country': 'AuthorityCountry'
    }

    def __init__(self, authority_name=None, authority_code=None, authority_uri=None, authority_country=None):  # noqa: E501
        """AuthorityRequest - a model defined in Swagger"""  # noqa: E501
        self._authority_name = None
        self._authority_code = None
        self._authority_uri = None
        self._authority_country = None
        self.discriminator = None
        self.authority_name = authority_name
        self.authority_code = authority_code
        self.authority_uri = authority_uri
        self.authority_country = authority_country

    @property
    def authority_name(self):
        """Gets the authority_name of this AuthorityRequest.  # noqa: E501

        The ID of the Authority i.e GBFCA, etc  # noqa: E501

        :return: The authority_name of this AuthorityRequest.  # noqa: E501
        :rtype: str
        """
        return self._authority_name

    @authority_name.setter
    def authority_name(self, authority_name):
        """Sets the authority_name of this AuthorityRequest.

        The ID of the Authority i.e GBFCA, etc  # noqa: E501

        :param authority_name: The authority_name of this AuthorityRequest.  # noqa: E501
        :type: str
        """
        if authority_name is None:
            raise ValueError("Invalid value for `authority_name`, must not be `None`")  # noqa: E501

        self._authority_name = authority_name

    @property
    def authority_code(self):
        """Gets the authority_code of this AuthorityRequest.  # noqa: E501

        Code of the Authority i.e. GBFCA, etc  # noqa: E501

        :return: The authority_code of this AuthorityRequest.  # noqa: E501
        :rtype: str
        """
        return self._authority_code

    @authority_code.setter
    def authority_code(self, authority_code):
        """Sets the authority_code of this AuthorityRequest.

        Code of the Authority i.e. GBFCA, etc  # noqa: E501

        :param authority_code: The authority_code of this AuthorityRequest.  # noqa: E501
        :type: str
        """
        if authority_code is None:
            raise ValueError("Invalid value for `authority_code`, must not be `None`")  # noqa: E501

        self._authority_code = authority_code

    @property
    def authority_uri(self):
        """Gets the authority_uri of this AuthorityRequest.  # noqa: E501

        URI of the authority  # noqa: E501

        :return: The authority_uri of this AuthorityRequest.  # noqa: E501
        :rtype: str
        """
        return self._authority_uri

    @authority_uri.setter
    def authority_uri(self, authority_uri):
        """Sets the authority_uri of this AuthorityRequest.

        URI of the authority  # noqa: E501

        :param authority_uri: The authority_uri of this AuthorityRequest.  # noqa: E501
        :type: str
        """
        if authority_uri is None:
            raise ValueError("Invalid value for `authority_uri`, must not be `None`")  # noqa: E501

        self._authority_uri = authority_uri

    @property
    def authority_country(self):
        """Gets the authority_country of this AuthorityRequest.  # noqa: E501

        Country of the authority  # noqa: E501

        :return: The authority_country of this AuthorityRequest.  # noqa: E501
        :rtype: str
        """
        return self._authority_country

    @authority_country.setter
    def authority_country(self, authority_country):
        """Sets the authority_country of this AuthorityRequest.

        Country of the authority  # noqa: E501

        :param authority_country: The authority_country of this AuthorityRequest.  # noqa: E501
        :type: str
        """
        if authority_country is None:
            raise ValueError("Invalid value for `authority_country`, must not be `None`")  # noqa: E501

        self._authority_country = authority_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorityRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorityRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
