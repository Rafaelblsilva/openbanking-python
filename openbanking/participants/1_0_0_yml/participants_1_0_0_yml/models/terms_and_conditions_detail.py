# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TermsAndConditionsDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'terms_and_conditions_item': 'TermsAndConditionsItem',
        'inititated_date': 'str',
        'external_signing_service_envelope_id': 'ExternalSigningServiceEnvelopeId',
        'external_signing_service_envelope_status': 'ExternalSigningServiceEnvelopeStatus',
        'external_signing_service_envelope_passcode': 'str'
    }

    attribute_map = {
        'terms_and_conditions_item': 'TermsAndConditionsItem',
        'inititated_date': 'InititatedDate',
        'external_signing_service_envelope_id': 'ExternalSigningServiceEnvelopeId',
        'external_signing_service_envelope_status': 'ExternalSigningServiceEnvelopeStatus',
        'external_signing_service_envelope_passcode': 'ExternalSigningServiceEnvelopePasscode'
    }

    def __init__(self, terms_and_conditions_item=None, inititated_date=None, external_signing_service_envelope_id=None, external_signing_service_envelope_status=None, external_signing_service_envelope_passcode=None):  # noqa: E501
        """TermsAndConditionsDetail - a model defined in Swagger"""  # noqa: E501
        self._terms_and_conditions_item = None
        self._inititated_date = None
        self._external_signing_service_envelope_id = None
        self._external_signing_service_envelope_status = None
        self._external_signing_service_envelope_passcode = None
        self.discriminator = None
        if terms_and_conditions_item is not None:
            self.terms_and_conditions_item = terms_and_conditions_item
        if inititated_date is not None:
            self.inititated_date = inititated_date
        if external_signing_service_envelope_id is not None:
            self.external_signing_service_envelope_id = external_signing_service_envelope_id
        if external_signing_service_envelope_status is not None:
            self.external_signing_service_envelope_status = external_signing_service_envelope_status
        if external_signing_service_envelope_passcode is not None:
            self.external_signing_service_envelope_passcode = external_signing_service_envelope_passcode

    @property
    def terms_and_conditions_item(self):
        """Gets the terms_and_conditions_item of this TermsAndConditionsDetail.  # noqa: E501


        :return: The terms_and_conditions_item of this TermsAndConditionsDetail.  # noqa: E501
        :rtype: TermsAndConditionsItem
        """
        return self._terms_and_conditions_item

    @terms_and_conditions_item.setter
    def terms_and_conditions_item(self, terms_and_conditions_item):
        """Sets the terms_and_conditions_item of this TermsAndConditionsDetail.


        :param terms_and_conditions_item: The terms_and_conditions_item of this TermsAndConditionsDetail.  # noqa: E501
        :type: TermsAndConditionsItem
        """

        self._terms_and_conditions_item = terms_and_conditions_item

    @property
    def inititated_date(self):
        """Gets the inititated_date of this TermsAndConditionsDetail.  # noqa: E501

        Terms and Conditions initiated date  # noqa: E501

        :return: The inititated_date of this TermsAndConditionsDetail.  # noqa: E501
        :rtype: str
        """
        return self._inititated_date

    @inititated_date.setter
    def inititated_date(self, inititated_date):
        """Sets the inititated_date of this TermsAndConditionsDetail.

        Terms and Conditions initiated date  # noqa: E501

        :param inititated_date: The inititated_date of this TermsAndConditionsDetail.  # noqa: E501
        :type: str
        """

        self._inititated_date = inititated_date

    @property
    def external_signing_service_envelope_id(self):
        """Gets the external_signing_service_envelope_id of this TermsAndConditionsDetail.  # noqa: E501


        :return: The external_signing_service_envelope_id of this TermsAndConditionsDetail.  # noqa: E501
        :rtype: ExternalSigningServiceEnvelopeId
        """
        return self._external_signing_service_envelope_id

    @external_signing_service_envelope_id.setter
    def external_signing_service_envelope_id(self, external_signing_service_envelope_id):
        """Sets the external_signing_service_envelope_id of this TermsAndConditionsDetail.


        :param external_signing_service_envelope_id: The external_signing_service_envelope_id of this TermsAndConditionsDetail.  # noqa: E501
        :type: ExternalSigningServiceEnvelopeId
        """

        self._external_signing_service_envelope_id = external_signing_service_envelope_id

    @property
    def external_signing_service_envelope_status(self):
        """Gets the external_signing_service_envelope_status of this TermsAndConditionsDetail.  # noqa: E501


        :return: The external_signing_service_envelope_status of this TermsAndConditionsDetail.  # noqa: E501
        :rtype: ExternalSigningServiceEnvelopeStatus
        """
        return self._external_signing_service_envelope_status

    @external_signing_service_envelope_status.setter
    def external_signing_service_envelope_status(self, external_signing_service_envelope_status):
        """Sets the external_signing_service_envelope_status of this TermsAndConditionsDetail.


        :param external_signing_service_envelope_status: The external_signing_service_envelope_status of this TermsAndConditionsDetail.  # noqa: E501
        :type: ExternalSigningServiceEnvelopeStatus
        """

        self._external_signing_service_envelope_status = external_signing_service_envelope_status

    @property
    def external_signing_service_envelope_passcode(self):
        """Gets the external_signing_service_envelope_passcode of this TermsAndConditionsDetail.  # noqa: E501

        Access code for the specifier to fill in the signer details. This will be populated only once, when signing is initiated  # noqa: E501

        :return: The external_signing_service_envelope_passcode of this TermsAndConditionsDetail.  # noqa: E501
        :rtype: str
        """
        return self._external_signing_service_envelope_passcode

    @external_signing_service_envelope_passcode.setter
    def external_signing_service_envelope_passcode(self, external_signing_service_envelope_passcode):
        """Sets the external_signing_service_envelope_passcode of this TermsAndConditionsDetail.

        Access code for the specifier to fill in the signer details. This will be populated only once, when signing is initiated  # noqa: E501

        :param external_signing_service_envelope_passcode: The external_signing_service_envelope_passcode of this TermsAndConditionsDetail.  # noqa: E501
        :type: str
        """

        self._external_signing_service_envelope_passcode = external_signing_service_envelope_passcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TermsAndConditionsDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermsAndConditionsDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
