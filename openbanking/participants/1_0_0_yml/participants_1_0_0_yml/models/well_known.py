# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellKnown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acr_values_supported': 'list[object]',
        'authorization_endpoint': 'str',
        'claims_parameter_supported': 'bool',
        'claims_supported': 'list[object]',
        'code_challenge_methods_supported': 'list[object]',
        'end_session_endpoint': 'str',
        'check_session_endpoint': 'str',
        'grant_types_supported': 'list[object]',
        'id_token_signing_alg_values_supported': 'list[object]',
        'issuer': 'str',
        'jwks_uri': 'str',
        'registration_endpoint': 'str',
        'request_object_signing_alg_values_supported': 'str',
        'request_parameter_supported': 'bool',
        'request_uri_parameter_supported': 'bool',
        'require_request_uri_registration': 'bool',
        'pushed_authorization_request_endpoint': 'list[object]',
        'response_modes_supported': 'list[object]',
        'response_types_supported': 'list[object]',
        'scopes_supported': 'list[object]',
        'subject_types_supported': 'list[object]',
        'token_endpoint_auth_methods_supported': 'list[object]',
        'token_endpoint_auth_signing_alg_values_supported': 'list[object]',
        'token_endpoint': 'str',
        'userinfo_endpoint': 'str',
        'userinfo_signing_alg_values_supported': 'list[object]',
        'authorization_signing_alg_values_supported': 'list[object]',
        'introspection_endpoint': 'str',
        'introspection_endpoint_auth_methods_supported': 'list[object]',
        'introspection_endpoint_auth_signing_alg_values_supported': 'list[object]',
        'revocation_endpoint': 'str',
        'revocation_endpoint_auth_methods_supported': 'list[object]',
        'revocation_endpoint_auth_signing_alg_values_supported': 'list[object]',
        'frontchannel_logout_supported': 'bool',
        'frontchannel_logout_session_supported': 'bool',
        'tls_client_certificate_bound_access_tokens': 'bool',
        'claim_types_supported': 'list[object]'
    }

    attribute_map = {
        'acr_values_supported': 'acr_values_supported',
        'authorization_endpoint': 'authorization_endpoint',
        'claims_parameter_supported': 'claims_parameter_supported',
        'claims_supported': 'claims_supported',
        'code_challenge_methods_supported': 'code_challenge_methods_supported',
        'end_session_endpoint': 'end_session_endpoint',
        'check_session_endpoint': 'check_session_endpoint',
        'grant_types_supported': 'grant_types_supported',
        'id_token_signing_alg_values_supported': 'id_token_signing_alg_values_supported',
        'issuer': 'issuer',
        'jwks_uri': 'jwks_uri',
        'registration_endpoint': 'registration_endpoint',
        'request_object_signing_alg_values_supported': 'request_object_signing_alg_values_supported',
        'request_parameter_supported': 'request_parameter_supported',
        'request_uri_parameter_supported': 'request_uri_parameter_supported',
        'require_request_uri_registration': 'require_request_uri_registration',
        'pushed_authorization_request_endpoint': 'pushed_authorization_request_endpoint',
        'response_modes_supported': 'response_modes_supported',
        'response_types_supported': 'response_types_supported',
        'scopes_supported': 'scopes_supported',
        'subject_types_supported': 'subject_types_supported',
        'token_endpoint_auth_methods_supported': 'token_endpoint_auth_methods_supported',
        'token_endpoint_auth_signing_alg_values_supported': 'token_endpoint_auth_signing_alg_values_supported',
        'token_endpoint': 'token_endpoint',
        'userinfo_endpoint': 'userinfo_endpoint',
        'userinfo_signing_alg_values_supported': 'userinfo_signing_alg_values_supported',
        'authorization_signing_alg_values_supported': 'authorization_signing_alg_values_supported',
        'introspection_endpoint': 'introspection_endpoint',
        'introspection_endpoint_auth_methods_supported': 'introspection_endpoint_auth_methods_supported',
        'introspection_endpoint_auth_signing_alg_values_supported': 'introspection_endpoint_auth_signing_alg_values_supported',
        'revocation_endpoint': 'revocation_endpoint',
        'revocation_endpoint_auth_methods_supported': 'revocation_endpoint_auth_methods_supported',
        'revocation_endpoint_auth_signing_alg_values_supported': 'revocation_endpoint_auth_signing_alg_values_supported',
        'frontchannel_logout_supported': 'frontchannel_logout_supported',
        'frontchannel_logout_session_supported': 'frontchannel_logout_session_supported',
        'tls_client_certificate_bound_access_tokens': 'tls_client_certificate_bound_access_tokens',
        'claim_types_supported': 'claim_types_supported'
    }

    def __init__(self, acr_values_supported=None, authorization_endpoint=None, claims_parameter_supported=None, claims_supported=None, code_challenge_methods_supported=None, end_session_endpoint=None, check_session_endpoint=None, grant_types_supported=None, id_token_signing_alg_values_supported=None, issuer=None, jwks_uri=None, registration_endpoint=None, request_object_signing_alg_values_supported=None, request_parameter_supported=None, request_uri_parameter_supported=None, require_request_uri_registration=None, pushed_authorization_request_endpoint=None, response_modes_supported=None, response_types_supported=None, scopes_supported=None, subject_types_supported=None, token_endpoint_auth_methods_supported=None, token_endpoint_auth_signing_alg_values_supported=None, token_endpoint=None, userinfo_endpoint=None, userinfo_signing_alg_values_supported=None, authorization_signing_alg_values_supported=None, introspection_endpoint=None, introspection_endpoint_auth_methods_supported=None, introspection_endpoint_auth_signing_alg_values_supported=None, revocation_endpoint=None, revocation_endpoint_auth_methods_supported=None, revocation_endpoint_auth_signing_alg_values_supported=None, frontchannel_logout_supported=None, frontchannel_logout_session_supported=None, tls_client_certificate_bound_access_tokens=None, claim_types_supported=None):  # noqa: E501
        """WellKnown - a model defined in Swagger"""  # noqa: E501
        self._acr_values_supported = None
        self._authorization_endpoint = None
        self._claims_parameter_supported = None
        self._claims_supported = None
        self._code_challenge_methods_supported = None
        self._end_session_endpoint = None
        self._check_session_endpoint = None
        self._grant_types_supported = None
        self._id_token_signing_alg_values_supported = None
        self._issuer = None
        self._jwks_uri = None
        self._registration_endpoint = None
        self._request_object_signing_alg_values_supported = None
        self._request_parameter_supported = None
        self._request_uri_parameter_supported = None
        self._require_request_uri_registration = None
        self._pushed_authorization_request_endpoint = None
        self._response_modes_supported = None
        self._response_types_supported = None
        self._scopes_supported = None
        self._subject_types_supported = None
        self._token_endpoint_auth_methods_supported = None
        self._token_endpoint_auth_signing_alg_values_supported = None
        self._token_endpoint = None
        self._userinfo_endpoint = None
        self._userinfo_signing_alg_values_supported = None
        self._authorization_signing_alg_values_supported = None
        self._introspection_endpoint = None
        self._introspection_endpoint_auth_methods_supported = None
        self._introspection_endpoint_auth_signing_alg_values_supported = None
        self._revocation_endpoint = None
        self._revocation_endpoint_auth_methods_supported = None
        self._revocation_endpoint_auth_signing_alg_values_supported = None
        self._frontchannel_logout_supported = None
        self._frontchannel_logout_session_supported = None
        self._tls_client_certificate_bound_access_tokens = None
        self._claim_types_supported = None
        self.discriminator = None
        if acr_values_supported is not None:
            self.acr_values_supported = acr_values_supported
        if authorization_endpoint is not None:
            self.authorization_endpoint = authorization_endpoint
        if claims_parameter_supported is not None:
            self.claims_parameter_supported = claims_parameter_supported
        if claims_supported is not None:
            self.claims_supported = claims_supported
        if code_challenge_methods_supported is not None:
            self.code_challenge_methods_supported = code_challenge_methods_supported
        if end_session_endpoint is not None:
            self.end_session_endpoint = end_session_endpoint
        if check_session_endpoint is not None:
            self.check_session_endpoint = check_session_endpoint
        if grant_types_supported is not None:
            self.grant_types_supported = grant_types_supported
        if id_token_signing_alg_values_supported is not None:
            self.id_token_signing_alg_values_supported = id_token_signing_alg_values_supported
        if issuer is not None:
            self.issuer = issuer
        if jwks_uri is not None:
            self.jwks_uri = jwks_uri
        if registration_endpoint is not None:
            self.registration_endpoint = registration_endpoint
        if request_object_signing_alg_values_supported is not None:
            self.request_object_signing_alg_values_supported = request_object_signing_alg_values_supported
        if request_parameter_supported is not None:
            self.request_parameter_supported = request_parameter_supported
        if request_uri_parameter_supported is not None:
            self.request_uri_parameter_supported = request_uri_parameter_supported
        if require_request_uri_registration is not None:
            self.require_request_uri_registration = require_request_uri_registration
        if pushed_authorization_request_endpoint is not None:
            self.pushed_authorization_request_endpoint = pushed_authorization_request_endpoint
        if response_modes_supported is not None:
            self.response_modes_supported = response_modes_supported
        if response_types_supported is not None:
            self.response_types_supported = response_types_supported
        if scopes_supported is not None:
            self.scopes_supported = scopes_supported
        if subject_types_supported is not None:
            self.subject_types_supported = subject_types_supported
        if token_endpoint_auth_methods_supported is not None:
            self.token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported
        if token_endpoint_auth_signing_alg_values_supported is not None:
            self.token_endpoint_auth_signing_alg_values_supported = token_endpoint_auth_signing_alg_values_supported
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint
        if userinfo_endpoint is not None:
            self.userinfo_endpoint = userinfo_endpoint
        if userinfo_signing_alg_values_supported is not None:
            self.userinfo_signing_alg_values_supported = userinfo_signing_alg_values_supported
        if authorization_signing_alg_values_supported is not None:
            self.authorization_signing_alg_values_supported = authorization_signing_alg_values_supported
        if introspection_endpoint is not None:
            self.introspection_endpoint = introspection_endpoint
        if introspection_endpoint_auth_methods_supported is not None:
            self.introspection_endpoint_auth_methods_supported = introspection_endpoint_auth_methods_supported
        if introspection_endpoint_auth_signing_alg_values_supported is not None:
            self.introspection_endpoint_auth_signing_alg_values_supported = introspection_endpoint_auth_signing_alg_values_supported
        if revocation_endpoint is not None:
            self.revocation_endpoint = revocation_endpoint
        if revocation_endpoint_auth_methods_supported is not None:
            self.revocation_endpoint_auth_methods_supported = revocation_endpoint_auth_methods_supported
        if revocation_endpoint_auth_signing_alg_values_supported is not None:
            self.revocation_endpoint_auth_signing_alg_values_supported = revocation_endpoint_auth_signing_alg_values_supported
        if frontchannel_logout_supported is not None:
            self.frontchannel_logout_supported = frontchannel_logout_supported
        if frontchannel_logout_session_supported is not None:
            self.frontchannel_logout_session_supported = frontchannel_logout_session_supported
        if tls_client_certificate_bound_access_tokens is not None:
            self.tls_client_certificate_bound_access_tokens = tls_client_certificate_bound_access_tokens
        if claim_types_supported is not None:
            self.claim_types_supported = claim_types_supported

    @property
    def acr_values_supported(self):
        """Gets the acr_values_supported of this WellKnown.  # noqa: E501


        :return: The acr_values_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._acr_values_supported

    @acr_values_supported.setter
    def acr_values_supported(self, acr_values_supported):
        """Sets the acr_values_supported of this WellKnown.


        :param acr_values_supported: The acr_values_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._acr_values_supported = acr_values_supported

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this WellKnown.  # noqa: E501

        REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint  # noqa: E501

        :return: The authorization_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this WellKnown.

        REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint  # noqa: E501

        :param authorization_endpoint: The authorization_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def claims_parameter_supported(self):
        """Gets the claims_parameter_supported of this WellKnown.  # noqa: E501

        OPTIONAL. Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support. If omitted, the default value is false  # noqa: E501

        :return: The claims_parameter_supported of this WellKnown.  # noqa: E501
        :rtype: bool
        """
        return self._claims_parameter_supported

    @claims_parameter_supported.setter
    def claims_parameter_supported(self, claims_parameter_supported):
        """Sets the claims_parameter_supported of this WellKnown.

        OPTIONAL. Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support. If omitted, the default value is false  # noqa: E501

        :param claims_parameter_supported: The claims_parameter_supported of this WellKnown.  # noqa: E501
        :type: bool
        """

        self._claims_parameter_supported = claims_parameter_supported

    @property
    def claims_supported(self):
        """Gets the claims_supported of this WellKnown.  # noqa: E501

        RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for  # noqa: E501

        :return: The claims_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._claims_supported

    @claims_supported.setter
    def claims_supported(self, claims_supported):
        """Sets the claims_supported of this WellKnown.

        RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for  # noqa: E501

        :param claims_supported: The claims_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._claims_supported = claims_supported

    @property
    def code_challenge_methods_supported(self):
        """Gets the code_challenge_methods_supported of this WellKnown.  # noqa: E501


        :return: The code_challenge_methods_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._code_challenge_methods_supported

    @code_challenge_methods_supported.setter
    def code_challenge_methods_supported(self, code_challenge_methods_supported):
        """Sets the code_challenge_methods_supported of this WellKnown.


        :param code_challenge_methods_supported: The code_challenge_methods_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._code_challenge_methods_supported = code_challenge_methods_supported

    @property
    def end_session_endpoint(self):
        """Gets the end_session_endpoint of this WellKnown.  # noqa: E501


        :return: The end_session_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._end_session_endpoint

    @end_session_endpoint.setter
    def end_session_endpoint(self, end_session_endpoint):
        """Sets the end_session_endpoint of this WellKnown.


        :param end_session_endpoint: The end_session_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._end_session_endpoint = end_session_endpoint

    @property
    def check_session_endpoint(self):
        """Gets the check_session_endpoint of this WellKnown.  # noqa: E501


        :return: The check_session_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._check_session_endpoint

    @check_session_endpoint.setter
    def check_session_endpoint(self, check_session_endpoint):
        """Sets the check_session_endpoint of this WellKnown.


        :param check_session_endpoint: The check_session_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._check_session_endpoint = check_session_endpoint

    @property
    def grant_types_supported(self):
        """Gets the grant_types_supported of this WellKnown.  # noqa: E501

        OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports  # noqa: E501

        :return: The grant_types_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._grant_types_supported

    @grant_types_supported.setter
    def grant_types_supported(self, grant_types_supported):
        """Sets the grant_types_supported of this WellKnown.

        OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports  # noqa: E501

        :param grant_types_supported: The grant_types_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._grant_types_supported = grant_types_supported

    @property
    def id_token_signing_alg_values_supported(self):
        """Gets the id_token_signing_alg_values_supported of this WellKnown.  # noqa: E501

        REQUIRED. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT  # noqa: E501

        :return: The id_token_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._id_token_signing_alg_values_supported

    @id_token_signing_alg_values_supported.setter
    def id_token_signing_alg_values_supported(self, id_token_signing_alg_values_supported):
        """Sets the id_token_signing_alg_values_supported of this WellKnown.

        REQUIRED. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT  # noqa: E501

        :param id_token_signing_alg_values_supported: The id_token_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._id_token_signing_alg_values_supported = id_token_signing_alg_values_supported

    @property
    def issuer(self):
        """Gets the issuer of this WellKnown.  # noqa: E501

        REQUIRED. URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier  # noqa: E501

        :return: The issuer of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this WellKnown.

        REQUIRED. URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier  # noqa: E501

        :param issuer: The issuer of this WellKnown.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this WellKnown.  # noqa: E501

        REQUIRED. URL of the OP's JSON Web Key Set [JWK] document.  # noqa: E501

        :return: The jwks_uri of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this WellKnown.

        REQUIRED. URL of the OP's JSON Web Key Set [JWK] document.  # noqa: E501

        :param jwks_uri: The jwks_uri of this WellKnown.  # noqa: E501
        :type: str
        """

        self._jwks_uri = jwks_uri

    @property
    def registration_endpoint(self):
        """Gets the registration_endpoint of this WellKnown.  # noqa: E501

        RECOMMENDED. URL of the OP's Dynamic Client Registration Endpoint  # noqa: E501

        :return: The registration_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._registration_endpoint

    @registration_endpoint.setter
    def registration_endpoint(self, registration_endpoint):
        """Sets the registration_endpoint of this WellKnown.

        RECOMMENDED. URL of the OP's Dynamic Client Registration Endpoint  # noqa: E501

        :param registration_endpoint: The registration_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._registration_endpoint = registration_endpoint

    @property
    def request_object_signing_alg_values_supported(self):
        """Gets the request_object_signing_alg_values_supported of this WellKnown.  # noqa: E501

        OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects  # noqa: E501

        :return: The request_object_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._request_object_signing_alg_values_supported

    @request_object_signing_alg_values_supported.setter
    def request_object_signing_alg_values_supported(self, request_object_signing_alg_values_supported):
        """Sets the request_object_signing_alg_values_supported of this WellKnown.

        OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects  # noqa: E501

        :param request_object_signing_alg_values_supported: The request_object_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :type: str
        """

        self._request_object_signing_alg_values_supported = request_object_signing_alg_values_supported

    @property
    def request_parameter_supported(self):
        """Gets the request_parameter_supported of this WellKnown.  # noqa: E501

        OPTIONAL. Boolean value specifying whether the OP supports use of the request parameter, with true indicating support. If omitted, the default value is false  # noqa: E501

        :return: The request_parameter_supported of this WellKnown.  # noqa: E501
        :rtype: bool
        """
        return self._request_parameter_supported

    @request_parameter_supported.setter
    def request_parameter_supported(self, request_parameter_supported):
        """Sets the request_parameter_supported of this WellKnown.

        OPTIONAL. Boolean value specifying whether the OP supports use of the request parameter, with true indicating support. If omitted, the default value is false  # noqa: E501

        :param request_parameter_supported: The request_parameter_supported of this WellKnown.  # noqa: E501
        :type: bool
        """

        self._request_parameter_supported = request_parameter_supported

    @property
    def request_uri_parameter_supported(self):
        """Gets the request_uri_parameter_supported of this WellKnown.  # noqa: E501

        OPTIONAL. Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support. If omitted, the default value is true  # noqa: E501

        :return: The request_uri_parameter_supported of this WellKnown.  # noqa: E501
        :rtype: bool
        """
        return self._request_uri_parameter_supported

    @request_uri_parameter_supported.setter
    def request_uri_parameter_supported(self, request_uri_parameter_supported):
        """Sets the request_uri_parameter_supported of this WellKnown.

        OPTIONAL. Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support. If omitted, the default value is true  # noqa: E501

        :param request_uri_parameter_supported: The request_uri_parameter_supported of this WellKnown.  # noqa: E501
        :type: bool
        """

        self._request_uri_parameter_supported = request_uri_parameter_supported

    @property
    def require_request_uri_registration(self):
        """Gets the require_request_uri_registration of this WellKnown.  # noqa: E501

        OPTIONAL. Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter  # noqa: E501

        :return: The require_request_uri_registration of this WellKnown.  # noqa: E501
        :rtype: bool
        """
        return self._require_request_uri_registration

    @require_request_uri_registration.setter
    def require_request_uri_registration(self, require_request_uri_registration):
        """Sets the require_request_uri_registration of this WellKnown.

        OPTIONAL. Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter  # noqa: E501

        :param require_request_uri_registration: The require_request_uri_registration of this WellKnown.  # noqa: E501
        :type: bool
        """

        self._require_request_uri_registration = require_request_uri_registration

    @property
    def pushed_authorization_request_endpoint(self):
        """Gets the pushed_authorization_request_endpoint of this WellKnown.  # noqa: E501


        :return: The pushed_authorization_request_endpoint of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._pushed_authorization_request_endpoint

    @pushed_authorization_request_endpoint.setter
    def pushed_authorization_request_endpoint(self, pushed_authorization_request_endpoint):
        """Sets the pushed_authorization_request_endpoint of this WellKnown.


        :param pushed_authorization_request_endpoint: The pushed_authorization_request_endpoint of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._pushed_authorization_request_endpoint = pushed_authorization_request_endpoint

    @property
    def response_modes_supported(self):
        """Gets the response_modes_supported of this WellKnown.  # noqa: E501

        OPTIONAL. JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports  # noqa: E501

        :return: The response_modes_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._response_modes_supported

    @response_modes_supported.setter
    def response_modes_supported(self, response_modes_supported):
        """Sets the response_modes_supported of this WellKnown.

        OPTIONAL. JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports  # noqa: E501

        :param response_modes_supported: The response_modes_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._response_modes_supported = response_modes_supported

    @property
    def response_types_supported(self):
        """Gets the response_types_supported of this WellKnown.  # noqa: E501

        REQUIRED. JSON array containing a list of the OAuth 2.0 response_type values that this OP supports  # noqa: E501

        :return: The response_types_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._response_types_supported

    @response_types_supported.setter
    def response_types_supported(self, response_types_supported):
        """Sets the response_types_supported of this WellKnown.

        REQUIRED. JSON array containing a list of the OAuth 2.0 response_type values that this OP supports  # noqa: E501

        :param response_types_supported: The response_types_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._response_types_supported = response_types_supported

    @property
    def scopes_supported(self):
        """Gets the scopes_supported of this WellKnown.  # noqa: E501

        RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports  # noqa: E501

        :return: The scopes_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._scopes_supported

    @scopes_supported.setter
    def scopes_supported(self, scopes_supported):
        """Sets the scopes_supported of this WellKnown.

        RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports  # noqa: E501

        :param scopes_supported: The scopes_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._scopes_supported = scopes_supported

    @property
    def subject_types_supported(self):
        """Gets the subject_types_supported of this WellKnown.  # noqa: E501

        REQUIRED. JSON array containing a list of the Subject Identifier types that this OP supports  # noqa: E501

        :return: The subject_types_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._subject_types_supported

    @subject_types_supported.setter
    def subject_types_supported(self, subject_types_supported):
        """Sets the subject_types_supported of this WellKnown.

        REQUIRED. JSON array containing a list of the Subject Identifier types that this OP supports  # noqa: E501

        :param subject_types_supported: The subject_types_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._subject_types_supported = subject_types_supported

    @property
    def token_endpoint_auth_methods_supported(self):
        """Gets the token_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501

        OPTIONAL. JSON array containing a list of Client Authentication methods supported by this Token Endpoint  # noqa: E501

        :return: The token_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._token_endpoint_auth_methods_supported

    @token_endpoint_auth_methods_supported.setter
    def token_endpoint_auth_methods_supported(self, token_endpoint_auth_methods_supported):
        """Sets the token_endpoint_auth_methods_supported of this WellKnown.

        OPTIONAL. JSON array containing a list of Client Authentication methods supported by this Token Endpoint  # noqa: E501

        :param token_endpoint_auth_methods_supported: The token_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported

    @property
    def token_endpoint_auth_signing_alg_values_supported(self):
        """Gets the token_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501

        OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT  # noqa: E501

        :return: The token_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._token_endpoint_auth_signing_alg_values_supported

    @token_endpoint_auth_signing_alg_values_supported.setter
    def token_endpoint_auth_signing_alg_values_supported(self, token_endpoint_auth_signing_alg_values_supported):
        """Sets the token_endpoint_auth_signing_alg_values_supported of this WellKnown.

        OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT  # noqa: E501

        :param token_endpoint_auth_signing_alg_values_supported: The token_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._token_endpoint_auth_signing_alg_values_supported = token_endpoint_auth_signing_alg_values_supported

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this WellKnown.  # noqa: E501

        URL of the OP's OAuth 2.0 Token Endpoint  # noqa: E501

        :return: The token_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this WellKnown.

        URL of the OP's OAuth 2.0 Token Endpoint  # noqa: E501

        :param token_endpoint: The token_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._token_endpoint = token_endpoint

    @property
    def userinfo_endpoint(self):
        """Gets the userinfo_endpoint of this WellKnown.  # noqa: E501

        RECOMMENDED. URL of the OP's UserInfo Endpoint  # noqa: E501

        :return: The userinfo_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._userinfo_endpoint

    @userinfo_endpoint.setter
    def userinfo_endpoint(self, userinfo_endpoint):
        """Sets the userinfo_endpoint of this WellKnown.

        RECOMMENDED. URL of the OP's UserInfo Endpoint  # noqa: E501

        :param userinfo_endpoint: The userinfo_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._userinfo_endpoint = userinfo_endpoint

    @property
    def userinfo_signing_alg_values_supported(self):
        """Gets the userinfo_signing_alg_values_supported of this WellKnown.  # noqa: E501

        OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT  # noqa: E501

        :return: The userinfo_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._userinfo_signing_alg_values_supported

    @userinfo_signing_alg_values_supported.setter
    def userinfo_signing_alg_values_supported(self, userinfo_signing_alg_values_supported):
        """Sets the userinfo_signing_alg_values_supported of this WellKnown.

        OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT  # noqa: E501

        :param userinfo_signing_alg_values_supported: The userinfo_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._userinfo_signing_alg_values_supported = userinfo_signing_alg_values_supported

    @property
    def authorization_signing_alg_values_supported(self):
        """Gets the authorization_signing_alg_values_supported of this WellKnown.  # noqa: E501


        :return: The authorization_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._authorization_signing_alg_values_supported

    @authorization_signing_alg_values_supported.setter
    def authorization_signing_alg_values_supported(self, authorization_signing_alg_values_supported):
        """Sets the authorization_signing_alg_values_supported of this WellKnown.


        :param authorization_signing_alg_values_supported: The authorization_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._authorization_signing_alg_values_supported = authorization_signing_alg_values_supported

    @property
    def introspection_endpoint(self):
        """Gets the introspection_endpoint of this WellKnown.  # noqa: E501


        :return: The introspection_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._introspection_endpoint

    @introspection_endpoint.setter
    def introspection_endpoint(self, introspection_endpoint):
        """Sets the introspection_endpoint of this WellKnown.


        :param introspection_endpoint: The introspection_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._introspection_endpoint = introspection_endpoint

    @property
    def introspection_endpoint_auth_methods_supported(self):
        """Gets the introspection_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501


        :return: The introspection_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._introspection_endpoint_auth_methods_supported

    @introspection_endpoint_auth_methods_supported.setter
    def introspection_endpoint_auth_methods_supported(self, introspection_endpoint_auth_methods_supported):
        """Sets the introspection_endpoint_auth_methods_supported of this WellKnown.


        :param introspection_endpoint_auth_methods_supported: The introspection_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._introspection_endpoint_auth_methods_supported = introspection_endpoint_auth_methods_supported

    @property
    def introspection_endpoint_auth_signing_alg_values_supported(self):
        """Gets the introspection_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501


        :return: The introspection_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._introspection_endpoint_auth_signing_alg_values_supported

    @introspection_endpoint_auth_signing_alg_values_supported.setter
    def introspection_endpoint_auth_signing_alg_values_supported(self, introspection_endpoint_auth_signing_alg_values_supported):
        """Sets the introspection_endpoint_auth_signing_alg_values_supported of this WellKnown.


        :param introspection_endpoint_auth_signing_alg_values_supported: The introspection_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._introspection_endpoint_auth_signing_alg_values_supported = introspection_endpoint_auth_signing_alg_values_supported

    @property
    def revocation_endpoint(self):
        """Gets the revocation_endpoint of this WellKnown.  # noqa: E501


        :return: The revocation_endpoint of this WellKnown.  # noqa: E501
        :rtype: str
        """
        return self._revocation_endpoint

    @revocation_endpoint.setter
    def revocation_endpoint(self, revocation_endpoint):
        """Sets the revocation_endpoint of this WellKnown.


        :param revocation_endpoint: The revocation_endpoint of this WellKnown.  # noqa: E501
        :type: str
        """

        self._revocation_endpoint = revocation_endpoint

    @property
    def revocation_endpoint_auth_methods_supported(self):
        """Gets the revocation_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501


        :return: The revocation_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._revocation_endpoint_auth_methods_supported

    @revocation_endpoint_auth_methods_supported.setter
    def revocation_endpoint_auth_methods_supported(self, revocation_endpoint_auth_methods_supported):
        """Sets the revocation_endpoint_auth_methods_supported of this WellKnown.


        :param revocation_endpoint_auth_methods_supported: The revocation_endpoint_auth_methods_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._revocation_endpoint_auth_methods_supported = revocation_endpoint_auth_methods_supported

    @property
    def revocation_endpoint_auth_signing_alg_values_supported(self):
        """Gets the revocation_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501


        :return: The revocation_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._revocation_endpoint_auth_signing_alg_values_supported

    @revocation_endpoint_auth_signing_alg_values_supported.setter
    def revocation_endpoint_auth_signing_alg_values_supported(self, revocation_endpoint_auth_signing_alg_values_supported):
        """Sets the revocation_endpoint_auth_signing_alg_values_supported of this WellKnown.


        :param revocation_endpoint_auth_signing_alg_values_supported: The revocation_endpoint_auth_signing_alg_values_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._revocation_endpoint_auth_signing_alg_values_supported = revocation_endpoint_auth_signing_alg_values_supported

    @property
    def frontchannel_logout_supported(self):
        """Gets the frontchannel_logout_supported of this WellKnown.  # noqa: E501


        :return: The frontchannel_logout_supported of this WellKnown.  # noqa: E501
        :rtype: bool
        """
        return self._frontchannel_logout_supported

    @frontchannel_logout_supported.setter
    def frontchannel_logout_supported(self, frontchannel_logout_supported):
        """Sets the frontchannel_logout_supported of this WellKnown.


        :param frontchannel_logout_supported: The frontchannel_logout_supported of this WellKnown.  # noqa: E501
        :type: bool
        """

        self._frontchannel_logout_supported = frontchannel_logout_supported

    @property
    def frontchannel_logout_session_supported(self):
        """Gets the frontchannel_logout_session_supported of this WellKnown.  # noqa: E501


        :return: The frontchannel_logout_session_supported of this WellKnown.  # noqa: E501
        :rtype: bool
        """
        return self._frontchannel_logout_session_supported

    @frontchannel_logout_session_supported.setter
    def frontchannel_logout_session_supported(self, frontchannel_logout_session_supported):
        """Sets the frontchannel_logout_session_supported of this WellKnown.


        :param frontchannel_logout_session_supported: The frontchannel_logout_session_supported of this WellKnown.  # noqa: E501
        :type: bool
        """

        self._frontchannel_logout_session_supported = frontchannel_logout_session_supported

    @property
    def tls_client_certificate_bound_access_tokens(self):
        """Gets the tls_client_certificate_bound_access_tokens of this WellKnown.  # noqa: E501


        :return: The tls_client_certificate_bound_access_tokens of this WellKnown.  # noqa: E501
        :rtype: bool
        """
        return self._tls_client_certificate_bound_access_tokens

    @tls_client_certificate_bound_access_tokens.setter
    def tls_client_certificate_bound_access_tokens(self, tls_client_certificate_bound_access_tokens):
        """Sets the tls_client_certificate_bound_access_tokens of this WellKnown.


        :param tls_client_certificate_bound_access_tokens: The tls_client_certificate_bound_access_tokens of this WellKnown.  # noqa: E501
        :type: bool
        """

        self._tls_client_certificate_bound_access_tokens = tls_client_certificate_bound_access_tokens

    @property
    def claim_types_supported(self):
        """Gets the claim_types_supported of this WellKnown.  # noqa: E501

        OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports  # noqa: E501

        :return: The claim_types_supported of this WellKnown.  # noqa: E501
        :rtype: list[object]
        """
        return self._claim_types_supported

    @claim_types_supported.setter
    def claim_types_supported(self, claim_types_supported):
        """Sets the claim_types_supported of this WellKnown.

        OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports  # noqa: E501

        :param claim_types_supported: The claim_types_supported of this WellKnown.  # noqa: E501
        :type: list[object]
        """

        self._claim_types_supported = claim_types_supported

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellKnown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellKnown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
