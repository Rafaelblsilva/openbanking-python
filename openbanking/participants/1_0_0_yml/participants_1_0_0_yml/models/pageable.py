# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pageable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'sort': 'Sort',
        'size': 'int',
        'offset': 'int',
        'sorted': 'bool'
    }

    attribute_map = {
        'number': 'number',
        'sort': 'sort',
        'size': 'size',
        'offset': 'offset',
        'sorted': 'sorted'
    }

    def __init__(self, number=None, sort=None, size=None, offset=None, sorted=None):  # noqa: E501
        """Pageable - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._sort = None
        self._size = None
        self._offset = None
        self._sorted = None
        self.discriminator = None
        if number is not None:
            self.number = number
        if sort is not None:
            self.sort = sort
        if size is not None:
            self.size = size
        if offset is not None:
            self.offset = offset
        if sorted is not None:
            self.sorted = sorted

    @property
    def number(self):
        """Gets the number of this Pageable.  # noqa: E501

        Page number  # noqa: E501

        :return: The number of this Pageable.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Pageable.

        Page number  # noqa: E501

        :param number: The number of this Pageable.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def sort(self):
        """Gets the sort of this Pageable.  # noqa: E501


        :return: The sort of this Pageable.  # noqa: E501
        :rtype: Sort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Pageable.


        :param sort: The sort of this Pageable.  # noqa: E501
        :type: Sort
        """

        self._sort = sort

    @property
    def size(self):
        """Gets the size of this Pageable.  # noqa: E501

        Size of the page  # noqa: E501

        :return: The size of this Pageable.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Pageable.

        Size of the page  # noqa: E501

        :param size: The size of this Pageable.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def offset(self):
        """Gets the offset of this Pageable.  # noqa: E501

        Offset  # noqa: E501

        :return: The offset of this Pageable.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Pageable.

        Offset  # noqa: E501

        :param offset: The offset of this Pageable.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def sorted(self):
        """Gets the sorted of this Pageable.  # noqa: E501

        Is the page sorted  # noqa: E501

        :return: The sorted of this Pageable.  # noqa: E501
        :rtype: bool
        """
        return self._sorted

    @sorted.setter
    def sorted(self, sorted):
        """Sets the sorted of this Pageable.

        Is the page sorted  # noqa: E501

        :param sorted: The sorted of this Pageable.  # noqa: E501
        :type: bool
        """

        self._sorted = sorted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pageable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pageable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
