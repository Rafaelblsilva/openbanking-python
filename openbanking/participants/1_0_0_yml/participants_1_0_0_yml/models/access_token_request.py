# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessTokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grant_type': 'str',
        'client_assertion_type': 'str',
        'assertion': 'str'
    }

    attribute_map = {
        'grant_type': 'grant_type',
        'client_assertion_type': 'client_assertion_type',
        'assertion': 'assertion'
    }

    def __init__(self, grant_type='client_credentials', client_assertion_type=None, assertion=None):  # noqa: E501
        """AccessTokenRequest - a model defined in Swagger"""  # noqa: E501
        self._grant_type = None
        self._client_assertion_type = None
        self._assertion = None
        self.discriminator = None
        self.grant_type = grant_type
        self.client_assertion_type = client_assertion_type
        self.assertion = assertion

    @property
    def grant_type(self):
        """Gets the grant_type of this AccessTokenRequest.  # noqa: E501

        The Grant Type  # noqa: E501

        :return: The grant_type of this AccessTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this AccessTokenRequest.

        The Grant Type  # noqa: E501

        :param grant_type: The grant_type of this AccessTokenRequest.  # noqa: E501
        :type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")  # noqa: E501
        allowed_values = ["client_credentials"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"  # noqa: E501
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def client_assertion_type(self):
        """Gets the client_assertion_type of this AccessTokenRequest.  # noqa: E501

        Restrict to private_key_jwt  # noqa: E501

        :return: The client_assertion_type of this AccessTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_assertion_type

    @client_assertion_type.setter
    def client_assertion_type(self, client_assertion_type):
        """Sets the client_assertion_type of this AccessTokenRequest.

        Restrict to private_key_jwt  # noqa: E501

        :param client_assertion_type: The client_assertion_type of this AccessTokenRequest.  # noqa: E501
        :type: str
        """
        if client_assertion_type is None:
            raise ValueError("Invalid value for `client_assertion_type`, must not be `None`")  # noqa: E501
        allowed_values = ["urn:ietf:params:oauth:client-assertion-type:jwt-bearer"]  # noqa: E501
        if client_assertion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_assertion_type` ({0}), must be one of {1}"  # noqa: E501
                .format(client_assertion_type, allowed_values)
            )

        self._client_assertion_type = client_assertion_type

    @property
    def assertion(self):
        """Gets the assertion of this AccessTokenRequest.  # noqa: E501

        The assertion that is used to get a token  # noqa: E501

        :return: The assertion of this AccessTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._assertion

    @assertion.setter
    def assertion(self, assertion):
        """Sets the assertion of this AccessTokenRequest.

        The assertion that is used to get a token  # noqa: E501

        :param assertion: The assertion of this AccessTokenRequest.  # noqa: E501
        :type: str
        """
        if assertion is None:
            raise ValueError("Invalid value for `assertion`, must not be `None`")  # noqa: E501

        self._assertion = assertion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessTokenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessTokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
