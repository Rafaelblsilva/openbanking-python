# coding: utf-8

"""
    Participantes Open Finance Brasil

    Informações sobre os participantes do Open Finance Brasil que estão registrados no Diretório.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TermsAndConditionsItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tn_cid': 'int',
        'version': 'int',
        'name': 'str',
        'type': 'str',
        'content': 'str',
        'status': 'str',
        'external_signing_service': 'TermsAndConditionsItemExternalSigningService'
    }

    attribute_map = {
        'tn_cid': 'TnCId',
        'version': 'Version',
        'name': 'Name',
        'type': 'Type',
        'content': 'Content',
        'status': 'Status',
        'external_signing_service': 'ExternalSigningService'
    }

    def __init__(self, tn_cid=None, version=None, name=None, type=None, content=None, status=None, external_signing_service=None):  # noqa: E501
        """TermsAndConditionsItem - a model defined in Swagger"""  # noqa: E501
        self._tn_cid = None
        self._version = None
        self._name = None
        self._type = None
        self._content = None
        self._status = None
        self._external_signing_service = None
        self.discriminator = None
        if tn_cid is not None:
            self.tn_cid = tn_cid
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if content is not None:
            self.content = content
        if status is not None:
            self.status = status
        if external_signing_service is not None:
            self.external_signing_service = external_signing_service

    @property
    def tn_cid(self):
        """Gets the tn_cid of this TermsAndConditionsItem.  # noqa: E501

        Unique identifier for the Terms and Conditions Item  # noqa: E501

        :return: The tn_cid of this TermsAndConditionsItem.  # noqa: E501
        :rtype: int
        """
        return self._tn_cid

    @tn_cid.setter
    def tn_cid(self, tn_cid):
        """Sets the tn_cid of this TermsAndConditionsItem.

        Unique identifier for the Terms and Conditions Item  # noqa: E501

        :param tn_cid: The tn_cid of this TermsAndConditionsItem.  # noqa: E501
        :type: int
        """

        self._tn_cid = tn_cid

    @property
    def version(self):
        """Gets the version of this TermsAndConditionsItem.  # noqa: E501


        :return: The version of this TermsAndConditionsItem.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TermsAndConditionsItem.


        :param version: The version of this TermsAndConditionsItem.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this TermsAndConditionsItem.  # noqa: E501


        :return: The name of this TermsAndConditionsItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TermsAndConditionsItem.


        :param name: The name of this TermsAndConditionsItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this TermsAndConditionsItem.  # noqa: E501

        Identifies Participant or Directory  # noqa: E501

        :return: The type of this TermsAndConditionsItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TermsAndConditionsItem.

        Identifies Participant or Directory  # noqa: E501

        :param type: The type of this TermsAndConditionsItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def content(self):
        """Gets the content of this TermsAndConditionsItem.  # noqa: E501

        Contains the MarkDown of the actual TnCs  # noqa: E501

        :return: The content of this TermsAndConditionsItem.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this TermsAndConditionsItem.

        Contains the MarkDown of the actual TnCs  # noqa: E501

        :param content: The content of this TermsAndConditionsItem.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def status(self):
        """Gets the status of this TermsAndConditionsItem.  # noqa: E501

        Is the TnC Active or Inactive  # noqa: E501

        :return: The status of this TermsAndConditionsItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TermsAndConditionsItem.

        Is the TnC Active or Inactive  # noqa: E501

        :param status: The status of this TermsAndConditionsItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def external_signing_service(self):
        """Gets the external_signing_service of this TermsAndConditionsItem.  # noqa: E501


        :return: The external_signing_service of this TermsAndConditionsItem.  # noqa: E501
        :rtype: TermsAndConditionsItemExternalSigningService
        """
        return self._external_signing_service

    @external_signing_service.setter
    def external_signing_service(self, external_signing_service):
        """Sets the external_signing_service of this TermsAndConditionsItem.


        :param external_signing_service: The external_signing_service of this TermsAndConditionsItem.  # noqa: E501
        :type: TermsAndConditionsItemExternalSigningService
        """

        self._external_signing_service = external_signing_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TermsAndConditionsItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermsAndConditionsItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
