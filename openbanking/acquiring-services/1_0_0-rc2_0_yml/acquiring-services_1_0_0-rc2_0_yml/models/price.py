# coding: utf-8

"""
    API Acquiring Services - Open Finance Brasil

    API de Credenciamento do Open Finance Brasil – Fase 4. API que retorna informações de Credenciamento.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc2.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Price(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'EnumAcquiringServicesInterval',
        'value': 'str',
        'customer_rate': 'str'
    }

    attribute_map = {
        'interval': 'interval',
        'value': 'value',
        'customer_rate': 'customerRate'
    }

    def __init__(self, interval=None, value=None, customer_rate=None):  # noqa: E501
        """Price - a model defined in Swagger"""  # noqa: E501
        self._interval = None
        self._value = None
        self._customer_rate = None
        self.discriminator = None
        self.interval = interval
        self.value = value
        self.customer_rate = customer_rate

    @property
    def interval(self):
        """Gets the interval of this Price.  # noqa: E501


        :return: The interval of this Price.  # noqa: E501
        :rtype: EnumAcquiringServicesInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Price.


        :param interval: The interval of this Price.  # noqa: E501
        :type: EnumAcquiringServicesInterval
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def value(self):
        """Gets the value of this Price.  # noqa: E501

        Mediana referente a taxa de desconto de débito ou crédito a cada intervalo.  # noqa: E501

        :return: The value of this Price.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Price.

        Mediana referente a taxa de desconto de débito ou crédito a cada intervalo.  # noqa: E501

        :param value: The value of this Price.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def customer_rate(self):
        """Gets the customer_rate of this Price.  # noqa: E501

        Percentual de cliente em cada intervalo.  # noqa: E501

        :return: The customer_rate of this Price.  # noqa: E501
        :rtype: str
        """
        return self._customer_rate

    @customer_rate.setter
    def customer_rate(self, customer_rate):
        """Sets the customer_rate of this Price.

        Percentual de cliente em cada intervalo.  # noqa: E501

        :param customer_rate: The customer_rate of this Price.  # noqa: E501
        :type: str
        """
        if customer_rate is None:
            raise ValueError("Invalid value for `customer_rate`, must not be `None`")  # noqa: E501

        self._customer_rate = customer_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Price, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Price):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
