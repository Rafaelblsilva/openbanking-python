# coding: utf-8

"""
    API Payment Initiation - Open Banking Brasil

    API de Iniciação de Pagamentos, responsável por viabilizar as operações de iniciação de pagamentos para o Open Banking Brasil. Para cada uma das formas de pagamento previstas é necessário obter prévio consentimento do cliente através dos `endpoints` dedicados ao consentimento nesta API.  # Orientações No diretório de participantes duas `Roles` estão relacionadas à presente API: - `CONTA`, referente às instituições detentoras de conta participantes do Open Banking Brasil; - `PAGTO`, referente às instituições iniciadoras de transação de pagamento de conta participantes do Open Banking Brasil. Os tokens utilizados para consumo dos `endpoints` desta API devem possuir os `scopes` `openid` e `payments`. Esta API não requer a implementação de `permissions` para sua utilização. Todas as requisições e respostas devem ser assinadas seguindo o protocolo estabelecido na sessão <a href=\"https://openbanking-brasil.github.io/areadesenvolvedor/#assinaturas\" target=\"_blank\">Assinaturas</a> do guia de segurança.  ## Assinatura de payloads  No contexto da API Payment Initiation, os `payloads` de mensagem que trafegam tanto por parte da instituição iniciadora de transação de pagamento quanto por parte da instituição detentora de conta devem estar assinados. Para o processo de assinatura destes `payloads` as instituições devem seguir as especificações de segurança publicadas no Portal do desenvolvedor:  - Certificados exigidos para assinatura de mensagens: [Padrões de certificados digitais Open Banking Brasil](https://github.com/OpenBanking-Brasil/specs-seguranca/blob/main/open-banking-brasil-certificate-standards-1_ID1.md#certificado-de-assinatura-certificadoassinatura)  - Como assinar o payload JWS: [https://openbanking-brasil.github.io/areadesenvolvedor/#como-assinar-o-payload](https://openbanking-brasil.github.io/areadesenvolvedor/#como-assinar-o-payload)  ## Controle de acesso  O endpoint de consulta de pagamento GET /pix/payments/{​​​paymentId}​​​ deve suportar acesso a partir de access_token emitido por meio de um grant_type do tipo `client credentials`, como opção do uso do token vinculado ao consentimento (hybrid flow).  Para evitar vazamento de informação, a detentora deve validar que o pagamento consultado pertence ao ClientId que o criou e, caso haja divergências, retorne um erro HTTP 400.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumRejectionReasonType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ABORTED_SETTLEMENT_TIMEOUT = "ABORTED_SETTLEMENT_TIMEOUT"
    ERROR_CREDITOR_AGENT = "ERROR_CREDITOR_AGENT"
    TIMEOUT_DEBTOR_AGENT = "TIMEOUT_DEBTOR_AGENT"
    INVALID_CREDITOR_ACCOUNT_NUMBER = "INVALID_CREDITOR_ACCOUNT_NUMBER"
    BLOCKED_ACCOUNT = "BLOCKED_ACCOUNT"
    CLOSED_CREDITOR_ACCOUNT_NUMBER = "CLOSED_CREDITOR_ACCOUNT_NUMBER"
    INVALID_CREDITOR_ACCOUNTTYPE = "INVALID_CREDITOR_ACCOUNTTYPE"
    TRANSACTION_NOT_SUPPORTED = "TRANSACTION_NOT_SUPPORTED"
    NOT_ALLOWED_BOOK_TRANSFER = "NOT_ALLOWED_BOOK_TRANSFER"
    FORBIDDEN_RETURN_PAYMENT = "FORBIDDEN_RETURN_PAYMENT"
    INCORRECT_AGENT = "INCORRECT_AGENT"
    ZERO_AMOUNT = "ZERO_AMOUNT"
    NOT_ALLOWED_AMOUNT = "NOT_ALLOWED_AMOUNT"
    INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS"
    WRONG_AMOUNT = "WRONG_AMOUNT"
    INVALID_AMOUNT = "INVALID_AMOUNT"
    INVALID_NUMBER_OF_TRANSACTIONS = "INVALID_NUMBER_OF_TRANSACTIONS"
    INCONSISTENT_WITH_END_CUSTOMER = "INCONSISTENT_WITH_END_CUSTOMER"
    INVALID_IDENTIFICATION_CODE = "INVALID_IDENTIFICATION_CODE"
    INVALID_CREDITOR_IDENTIFICATION_CODE = "INVALID_CREDITOR_IDENTIFICATION_CODE"
    CREDITOR_IDENTIFIER_INCORRECT = "CREDITOR_IDENTIFIER_INCORRECT"
    ELEMENT_CONTENT_FORMALLY_INCORRECT = "ELEMENT_CONTENT_FORMALLY_INCORRECT"
    ORDER_REJECTED = "ORDER_REJECTED"
    NOT_ALLOWED_PAYMENT = "NOT_ALLOWED_PAYMENT"
    NOT_ALLOWED_ACCOUNT = "NOT_ALLOWED_ACCOUNT"
    USER_NOT_YET_ACTIVATED = "USER_NOT_YET_ACTIVATED"
    INVALID_CREATION_DATE = "INVALID_CREATION_DATE"
    INVALID_CUT_OFF_DATE = "INVALID_CUT_OFF_DATE"
    SETTLEMENT_FAILED = "SETTLEMENT_FAILED"
    INVALID_PURPOSE = "INVALID_PURPOSE"
    INVALID_END_TO_END_ID = "INVALID_END_TO_END_ID"
    INVALID_DEBTOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER = "INVALID_DEBTOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER"
    INVALID_CREDITOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER = "INVALID_CREDITOR_CLEARING_SYSTEM_MEMBER_IDENTIFIER"
    REGULATORY_REASON = "REGULATORY_REASON"
    SPECIFIC_SERVICE_OFFERED_BY_CREDITOR_AGENT = "SPECIFIC_SERVICE_OFFERED_BY_CREDITOR_AGENT"
    INVALID_BILL = "INVALID_BILL"
    OPERATION_WINDOW = "OPERATION_WINDOW"
    INCOMPATIBLE_DATE = "INCOMPATIBLE_DATE"
    MISMATCH_AMOUNT = "MISMATCH_AMOUNT"
    OVER_LIMIT = "OVER_LIMIT"
    INVALID_CONSENT = "INVALID_CONSENT"
    DENIED_MULTIPLE_AUTHORISATIONS = "DENIED_MULTIPLE_AUTHORISATIONS"
    EXPIRED_MULTIPLE_AUTHORISATIONS = "EXPIRED_MULTIPLE_AUTHORISATIONS"
    EXPIRED_BILL = "EXPIRED_BILL"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnumRejectionReasonType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumRejectionReasonType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumRejectionReasonType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
