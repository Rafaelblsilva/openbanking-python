# coding: utf-8

"""
    API Payment Initiation - Open Banking Brasil

    API de Iniciação de Pagamentos, reponsável por viabilizar as operações de iniciação de pagamentos para o Open Banking Brasil.   Para cada uma das formas de pagamento previstas é necessário obter prévio consentimento do cliente através dos `endpoints` dedicados ao consentimento nesta API.  # Orientações No diretório de participantes duas `Roles` estão relacionadas à presente API:  - `CONTA`, referente às instituições detentoras de conta participantes do Open Banking Brasil; - `PAGTO`, referente às instituições iniciadoras de transação de pagamento de conta participantes do Open Banking Brasil.    Os tokens utilizados para consumo dos `endpoints` desta API devem possuir os `scopes` `openId` e `payments`.   Esta API não requer a implementação de `permissions` para sua utilização.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponsePaymentConsentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_id': 'str',
        'creation_date_time': 'datetime',
        'status_update_date_time': 'datetime',
        'status': 'str',
        'creditor': 'Identification',
        'payment': 'PaymentConsent',
        'debtor_account': 'DebtorAccount'
    }

    attribute_map = {
        'consent_id': 'consentId',
        'creation_date_time': 'creationDateTime',
        'status_update_date_time': 'statusUpdateDateTime',
        'status': 'status',
        'creditor': 'creditor',
        'payment': 'payment',
        'debtor_account': 'debtorAccount'
    }

    def __init__(self, consent_id=None, creation_date_time=None, status_update_date_time=None, status=None, creditor=None, payment=None, debtor_account=None):  # noqa: E501
        """ResponsePaymentConsentData - a model defined in Swagger"""  # noqa: E501
        self._consent_id = None
        self._creation_date_time = None
        self._status_update_date_time = None
        self._status = None
        self._creditor = None
        self._payment = None
        self._debtor_account = None
        self.discriminator = None
        self.consent_id = consent_id
        self.creation_date_time = creation_date_time
        self.status_update_date_time = status_update_date_time
        self.status = status
        self.creditor = creditor
        self.payment = payment
        if debtor_account is not None:
            self.debtor_account = debtor_account

    @property
    def consent_id(self):
        """Gets the consent_id of this ResponsePaymentConsentData.  # noqa: E501

        Identificador único do consentimento criado para a iniciação de pagamento solicitada.   # noqa: E501

        :return: The consent_id of this ResponsePaymentConsentData.  # noqa: E501
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ResponsePaymentConsentData.

        Identificador único do consentimento criado para a iniciação de pagamento solicitada.   # noqa: E501

        :param consent_id: The consent_id of this ResponsePaymentConsentData.  # noqa: E501
        :type: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")  # noqa: E501

        self._consent_id = consent_id

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this ResponsePaymentConsentData.  # noqa: E501

        Data e hora em que o consentimento foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).  # noqa: E501

        :return: The creation_date_time of this ResponsePaymentConsentData.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this ResponsePaymentConsentData.

        Data e hora em que o consentimento foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).  # noqa: E501

        :param creation_date_time: The creation_date_time of this ResponsePaymentConsentData.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def status_update_date_time(self):
        """Gets the status_update_date_time of this ResponsePaymentConsentData.  # noqa: E501

        Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).   # noqa: E501

        :return: The status_update_date_time of this ResponsePaymentConsentData.  # noqa: E501
        :rtype: datetime
        """
        return self._status_update_date_time

    @status_update_date_time.setter
    def status_update_date_time(self, status_update_date_time):
        """Sets the status_update_date_time of this ResponsePaymentConsentData.

        Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).   # noqa: E501

        :param status_update_date_time: The status_update_date_time of this ResponsePaymentConsentData.  # noqa: E501
        :type: datetime
        """
        if status_update_date_time is None:
            raise ValueError("Invalid value for `status_update_date_time`, must not be `None`")  # noqa: E501

        self._status_update_date_time = status_update_date_time

    @property
    def status(self):
        """Gets the status of this ResponsePaymentConsentData.  # noqa: E501

        Retorna o estado do consentimento, o qual no momento de sua criação será AWAITING_AUTHORISATION. Este estado será alterado depois da autorização do consentimento na detentora da conta do pagador (Debtor) para AUTHORISED ou REJECTED.  O consentimento fica no estado CONSUMED após ocorrer a iniciação do pagamento referente ao consentimento.   Em caso de consentimento expirado a detentora deverá retornar o status REJECTED.   Estados possíveis:   AWAITING_AUTHORISATION - Aguardando autorização   AUTHORISED - Autorizado    REJECTED - Rejeitado   CONSUMED - Consumido    # noqa: E501

        :return: The status of this ResponsePaymentConsentData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponsePaymentConsentData.

        Retorna o estado do consentimento, o qual no momento de sua criação será AWAITING_AUTHORISATION. Este estado será alterado depois da autorização do consentimento na detentora da conta do pagador (Debtor) para AUTHORISED ou REJECTED.  O consentimento fica no estado CONSUMED após ocorrer a iniciação do pagamento referente ao consentimento.   Em caso de consentimento expirado a detentora deverá retornar o status REJECTED.   Estados possíveis:   AWAITING_AUTHORISATION - Aguardando autorização   AUTHORISED - Autorizado    REJECTED - Rejeitado   CONSUMED - Consumido    # noqa: E501

        :param status: The status of this ResponsePaymentConsentData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["AWAITING_AUTHORISATION", "AUTHORISED", "REJECTED", "CONSUMED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def creditor(self):
        """Gets the creditor of this ResponsePaymentConsentData.  # noqa: E501


        :return: The creditor of this ResponsePaymentConsentData.  # noqa: E501
        :rtype: Identification
        """
        return self._creditor

    @creditor.setter
    def creditor(self, creditor):
        """Sets the creditor of this ResponsePaymentConsentData.


        :param creditor: The creditor of this ResponsePaymentConsentData.  # noqa: E501
        :type: Identification
        """
        if creditor is None:
            raise ValueError("Invalid value for `creditor`, must not be `None`")  # noqa: E501

        self._creditor = creditor

    @property
    def payment(self):
        """Gets the payment of this ResponsePaymentConsentData.  # noqa: E501


        :return: The payment of this ResponsePaymentConsentData.  # noqa: E501
        :rtype: PaymentConsent
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this ResponsePaymentConsentData.


        :param payment: The payment of this ResponsePaymentConsentData.  # noqa: E501
        :type: PaymentConsent
        """
        if payment is None:
            raise ValueError("Invalid value for `payment`, must not be `None`")  # noqa: E501

        self._payment = payment

    @property
    def debtor_account(self):
        """Gets the debtor_account of this ResponsePaymentConsentData.  # noqa: E501


        :return: The debtor_account of this ResponsePaymentConsentData.  # noqa: E501
        :rtype: DebtorAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this ResponsePaymentConsentData.


        :param debtor_account: The debtor_account of this ResponsePaymentConsentData.  # noqa: E501
        :type: DebtorAccount
        """

        self._debtor_account = debtor_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponsePaymentConsentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsePaymentConsentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
