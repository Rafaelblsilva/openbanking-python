# coding: utf-8

"""
    API Exchange - Open Finance Brasil

    API de Câmbio do Open Finance Brasil – Fase 4. API que retorna informações de Câmbio.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnlineRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'foreign_currency': 'str',
        'delivery_foreign_currency': 'EnumExchangeDeliveryForeignCurrency',
        'transaction_type': 'EnumExchangeTransactionType',
        'transaction_category': 'EnumExchangeTransactionCategory',
        'target_audience': 'EnumDistinctTargetAudience',
        'value': 'str'
    }

    attribute_map = {
        'foreign_currency': 'foreignCurrency',
        'delivery_foreign_currency': 'deliveryForeignCurrency',
        'transaction_type': 'transactionType',
        'transaction_category': 'transactionCategory',
        'target_audience': 'targetAudience',
        'value': 'value'
    }

    def __init__(self, foreign_currency=None, delivery_foreign_currency=None, transaction_type=None, transaction_category=None, target_audience=None, value=None):  # noqa: E501
        """OnlineRate - a model defined in Swagger"""  # noqa: E501
        self._foreign_currency = None
        self._delivery_foreign_currency = None
        self._transaction_type = None
        self._transaction_category = None
        self._target_audience = None
        self._value = None
        self.discriminator = None
        self.foreign_currency = foreign_currency
        self.delivery_foreign_currency = delivery_foreign_currency
        self.transaction_type = transaction_type
        self.transaction_category = transaction_category
        self.target_audience = target_audience
        self.value = value

    @property
    def foreign_currency(self):
        """Gets the foreign_currency of this OnlineRate.  # noqa: E501

        Moeda referente ao valor monetário, seguindo o modelo ISO-4217.  # noqa: E501

        :return: The foreign_currency of this OnlineRate.  # noqa: E501
        :rtype: str
        """
        return self._foreign_currency

    @foreign_currency.setter
    def foreign_currency(self, foreign_currency):
        """Sets the foreign_currency of this OnlineRate.

        Moeda referente ao valor monetário, seguindo o modelo ISO-4217.  # noqa: E501

        :param foreign_currency: The foreign_currency of this OnlineRate.  # noqa: E501
        :type: str
        """
        if foreign_currency is None:
            raise ValueError("Invalid value for `foreign_currency`, must not be `None`")  # noqa: E501

        self._foreign_currency = foreign_currency

    @property
    def delivery_foreign_currency(self):
        """Gets the delivery_foreign_currency of this OnlineRate.  # noqa: E501


        :return: The delivery_foreign_currency of this OnlineRate.  # noqa: E501
        :rtype: EnumExchangeDeliveryForeignCurrency
        """
        return self._delivery_foreign_currency

    @delivery_foreign_currency.setter
    def delivery_foreign_currency(self, delivery_foreign_currency):
        """Sets the delivery_foreign_currency of this OnlineRate.


        :param delivery_foreign_currency: The delivery_foreign_currency of this OnlineRate.  # noqa: E501
        :type: EnumExchangeDeliveryForeignCurrency
        """
        if delivery_foreign_currency is None:
            raise ValueError("Invalid value for `delivery_foreign_currency`, must not be `None`")  # noqa: E501

        self._delivery_foreign_currency = delivery_foreign_currency

    @property
    def transaction_type(self):
        """Gets the transaction_type of this OnlineRate.  # noqa: E501


        :return: The transaction_type of this OnlineRate.  # noqa: E501
        :rtype: EnumExchangeTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this OnlineRate.


        :param transaction_type: The transaction_type of this OnlineRate.  # noqa: E501
        :type: EnumExchangeTransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def transaction_category(self):
        """Gets the transaction_category of this OnlineRate.  # noqa: E501


        :return: The transaction_category of this OnlineRate.  # noqa: E501
        :rtype: EnumExchangeTransactionCategory
        """
        return self._transaction_category

    @transaction_category.setter
    def transaction_category(self, transaction_category):
        """Sets the transaction_category of this OnlineRate.


        :param transaction_category: The transaction_category of this OnlineRate.  # noqa: E501
        :type: EnumExchangeTransactionCategory
        """
        if transaction_category is None:
            raise ValueError("Invalid value for `transaction_category`, must not be `None`")  # noqa: E501

        self._transaction_category = transaction_category

    @property
    def target_audience(self):
        """Gets the target_audience of this OnlineRate.  # noqa: E501


        :return: The target_audience of this OnlineRate.  # noqa: E501
        :rtype: EnumDistinctTargetAudience
        """
        return self._target_audience

    @target_audience.setter
    def target_audience(self, target_audience):
        """Sets the target_audience of this OnlineRate.


        :param target_audience: The target_audience of this OnlineRate.  # noqa: E501
        :type: EnumDistinctTargetAudience
        """
        if target_audience is None:
            raise ValueError("Invalid value for `target_audience`, must not be `None`")  # noqa: E501

        self._target_audience = target_audience

    @property
    def value(self):
        """Gets the value of this OnlineRate.  # noqa: E501

        Valor da operação.  # noqa: E501

        :return: The value of this OnlineRate.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OnlineRate.

        Valor da operação.  # noqa: E501

        :param value: The value of this OnlineRate.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnlineRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnlineRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
