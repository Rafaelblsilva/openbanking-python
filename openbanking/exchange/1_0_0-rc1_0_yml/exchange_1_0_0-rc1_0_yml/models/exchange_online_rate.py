# coding: utf-8

"""
    API Exchange - Open Finance Brasil

    API de Câmbio do Open Finance Brasil – Fase 4. API que retorna informações de Câmbio.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExchangeOnlineRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'Participant',
        'values': 'list[OnlineRate]',
        'timestamp': 'datetime',
        'disclaimer': 'str'
    }

    attribute_map = {
        'participant': 'participant',
        'values': 'values',
        'timestamp': 'timestamp',
        'disclaimer': 'disclaimer'
    }

    def __init__(self, participant=None, values=None, timestamp=None, disclaimer=None):  # noqa: E501
        """ExchangeOnlineRate - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._values = None
        self._timestamp = None
        self._disclaimer = None
        self.discriminator = None
        self.participant = participant
        self.values = values
        self.timestamp = timestamp
        self.disclaimer = disclaimer

    @property
    def participant(self):
        """Gets the participant of this ExchangeOnlineRate.  # noqa: E501


        :return: The participant of this ExchangeOnlineRate.  # noqa: E501
        :rtype: Participant
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this ExchangeOnlineRate.


        :param participant: The participant of this ExchangeOnlineRate.  # noqa: E501
        :type: Participant
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def values(self):
        """Gets the values of this ExchangeOnlineRate.  # noqa: E501


        :return: The values of this ExchangeOnlineRate.  # noqa: E501
        :rtype: list[OnlineRate]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ExchangeOnlineRate.


        :param values: The values of this ExchangeOnlineRate.  # noqa: E501
        :type: list[OnlineRate]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def timestamp(self):
        """Gets the timestamp of this ExchangeOnlineRate.  # noqa: E501

        Timestamp do momento da consulta  # noqa: E501

        :return: The timestamp of this ExchangeOnlineRate.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ExchangeOnlineRate.

        Timestamp do momento da consulta  # noqa: E501

        :param timestamp: The timestamp of this ExchangeOnlineRate.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def disclaimer(self):
        """Gets the disclaimer of this ExchangeOnlineRate.  # noqa: E501

        Disclaimer informando que a taxa apresentada é somente informativa, para a contratação de uma operação, deverá ser consultado o canal correspondente de cada instituição.  # noqa: E501

        :return: The disclaimer of this ExchangeOnlineRate.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer

    @disclaimer.setter
    def disclaimer(self, disclaimer):
        """Sets the disclaimer of this ExchangeOnlineRate.

        Disclaimer informando que a taxa apresentada é somente informativa, para a contratação de uma operação, deverá ser consultado o canal correspondente de cada instituição.  # noqa: E501

        :param disclaimer: The disclaimer of this ExchangeOnlineRate.  # noqa: E501
        :type: str
        """
        if disclaimer is None:
            raise ValueError("Invalid value for `disclaimer`, must not be `None`")  # noqa: E501

        self._disclaimer = disclaimer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangeOnlineRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeOnlineRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
