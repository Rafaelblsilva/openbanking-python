# coding: utf-8

"""
    API Exchanges - Open Finance Brasil

    API de informações de operações de Câmbio Open Finance Brasil – Fase 4.  API que retorna informações de operações de Câmbio realizadas nas instituições transmissoras por seus clientes, incluindo dados como informações da operação contratada, valor da operação em moeda nacional e moeda estrangeira, classificação da operação, forma de entrega, VET e, quando aplicável, valor a liquidar.  Também serão compartilhados os eventos de alteração da operação, caso existam, com as informações modificadas.  Não possui segregação entre pessoa natural e pessoa jurídica.  Requer consentimento do cliente para todos os endpoints.  __São escopo de compartilhamento as operações de compra e venda de moeda estrangeira de liquidação pronta ou futura, inclusive com adiantamento.  Operações de câmbio anuladas não são escopo de exposição, bem como eventos de vinculação de operações.  A exposição se dará por cada operação de câmbio contratada pelo cliente.__   # noqa: E501

    OpenAPI spec version: 1.0.0-rc.3
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumExchangesDeliveryForeignCurrency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CONTA_DEPOSITO_MOEDA_ESTRANGEIRA_PAIS = "CONTA_DEPOSITO_MOEDA_ESTRANGEIRA_PAIS"
    CONTA_DEPOSITO_OU_PAGAMENTO_EXPORTADOR_INSTITUICAO_EXTERIOR = "CONTA_DEPOSITO_OU_PAGAMENTO_EXPORTADOR_INSTITUICAO_EXTERIOR"
    ESPECIE_CHEQUES_VIAGEM = "ESPECIE_CHEQUES_VIAGEM"
    CARTAO_PREPAGO = "CARTAO_PREPAGO"
    TELETRANSMISSAO = "TELETRANSMISSAO"
    SEM_MOVIMENTACAO_VALORES = "SEM_MOVIMENTACAO_VALORES"
    DEMAIS = "DEMAIS"
    CARTA_CREDITO_A_VISTA = "CARTA_CREDITO_A_VISTA"
    CARTA_CREDITO_A_PRAZO = "CARTA_CREDITO_A_PRAZO"
    CONTA_DEPOSITO = "CONTA_DEPOSITO"
    CHEQUE = "CHEQUE"
    TITULOS_VALORES = "TITULOS_VALORES"
    SIMBOLICA = "SIMBOLICA"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnumExchangesDeliveryForeignCurrency - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumExchangesDeliveryForeignCurrency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumExchangesDeliveryForeignCurrency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
