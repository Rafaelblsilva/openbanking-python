# coding: utf-8

"""
    API Exchanges - Open Finance Brasil

    API de informações de operações de Câmbio Open Finance Brasil – Fase 4.  API que retorna informações de operações de Câmbio realizadas nas instituições transmissoras por seus clientes, incluindo dados como informações da operação contratada, valor da operação em moeda nacional e moeda estrangeira, classificação da operação, forma de entrega, VET e, quando aplicável, valor a liquidar.  Também serão compartilhados os eventos de alteração da operação, caso existam, com as informações modificadas.  Não possui segregação entre pessoa natural e pessoa jurídica.  Requer consentimento do cliente para todos os endpoints.  __São escopo de compartilhamento as operações de compra e venda de moeda estrangeira de liquidação pronta ou futura, inclusive com adiantamento.  Operações de câmbio anuladas não são escopo de exposição, bem como eventos de vinculação de operações.  A exposição se dará por cada operação de câmbio contratada pelo cliente.__   # noqa: E501

    OpenAPI spec version: 1.0.0-rc.4
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventsForeignPartie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relationship_code': 'str',
        'foreign_partie_name': 'str',
        'foreign_partie_country_code': 'str'
    }

    attribute_map = {
        'relationship_code': 'relationshipCode',
        'foreign_partie_name': 'foreignPartieName',
        'foreign_partie_country_code': 'foreignPartieCountryCode'
    }

    def __init__(self, relationship_code=None, foreign_partie_name=None, foreign_partie_country_code=None):  # noqa: E501
        """EventsForeignPartie - a model defined in Swagger"""  # noqa: E501
        self._relationship_code = None
        self._foreign_partie_name = None
        self._foreign_partie_country_code = None
        self.discriminator = None
        self.relationship_code = relationship_code
        self.foreign_partie_name = foreign_partie_name
        self.foreign_partie_country_code = foreign_partie_country_code

    @property
    def relationship_code(self):
        """Gets the relationship_code of this EventsForeignPartie.  # noqa: E501

        Código de Relação de vínculo entre o Cliente e o Pagador/Recebedor no Exterior. Deve respeitar os códigos de vínculo referenciados na resolução 277 ou na Circular 3690, conforme se aplicar ao contrato de câmbio.   # noqa: E501

        :return: The relationship_code of this EventsForeignPartie.  # noqa: E501
        :rtype: str
        """
        return self._relationship_code

    @relationship_code.setter
    def relationship_code(self, relationship_code):
        """Sets the relationship_code of this EventsForeignPartie.

        Código de Relação de vínculo entre o Cliente e o Pagador/Recebedor no Exterior. Deve respeitar os códigos de vínculo referenciados na resolução 277 ou na Circular 3690, conforme se aplicar ao contrato de câmbio.   # noqa: E501

        :param relationship_code: The relationship_code of this EventsForeignPartie.  # noqa: E501
        :type: str
        """
        if relationship_code is None:
            raise ValueError("Invalid value for `relationship_code`, must not be `None`")  # noqa: E501

        self._relationship_code = relationship_code

    @property
    def foreign_partie_name(self):
        """Gets the foreign_partie_name of this EventsForeignPartie.  # noqa: E501

        Nome do pagador ou recebedor no exterior.   # noqa: E501

        :return: The foreign_partie_name of this EventsForeignPartie.  # noqa: E501
        :rtype: str
        """
        return self._foreign_partie_name

    @foreign_partie_name.setter
    def foreign_partie_name(self, foreign_partie_name):
        """Sets the foreign_partie_name of this EventsForeignPartie.

        Nome do pagador ou recebedor no exterior.   # noqa: E501

        :param foreign_partie_name: The foreign_partie_name of this EventsForeignPartie.  # noqa: E501
        :type: str
        """
        if foreign_partie_name is None:
            raise ValueError("Invalid value for `foreign_partie_name`, must not be `None`")  # noqa: E501

        self._foreign_partie_name = foreign_partie_name

    @property
    def foreign_partie_country_code(self):
        """Gets the foreign_partie_country_code of this EventsForeignPartie.  # noqa: E501

        País do pagador ou recebedor. Código do país segundo a norma ISO 3166-1.   # noqa: E501

        :return: The foreign_partie_country_code of this EventsForeignPartie.  # noqa: E501
        :rtype: str
        """
        return self._foreign_partie_country_code

    @foreign_partie_country_code.setter
    def foreign_partie_country_code(self, foreign_partie_country_code):
        """Sets the foreign_partie_country_code of this EventsForeignPartie.

        País do pagador ou recebedor. Código do país segundo a norma ISO 3166-1.   # noqa: E501

        :param foreign_partie_country_code: The foreign_partie_country_code of this EventsForeignPartie.  # noqa: E501
        :type: str
        """
        if foreign_partie_country_code is None:
            raise ValueError("Invalid value for `foreign_partie_country_code`, must not be `None`")  # noqa: E501

        self._foreign_partie_country_code = foreign_partie_country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventsForeignPartie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsForeignPartie):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
