# coding: utf-8

"""
    API Capitalization-bonds - Open Finance Brasil

    As APIs descritas neste documento é referente a API de Capitalização da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CapitalizationBondsProductCapitalizationPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interest_rate': 'str',
        'update_index': 'CapitalizationBondsProductUpdateIndex',
        'update_index_additional_info': 'str',
        'contribution_amount': 'list[CapitalizationPeriodContributionAmount]',
        'early_redemptions': 'list[CapitalizationBondsProductCapitalizationPeriodEarlyRedemptions]',
        'redemption_percentage_end_term': 'str',
        'grace_period_redemption': 'float'
    }

    attribute_map = {
        'interest_rate': 'interestRate',
        'update_index': 'updateIndex',
        'update_index_additional_info': 'updateIndexAdditionalInfo',
        'contribution_amount': 'contributionAmount',
        'early_redemptions': 'earlyRedemptions',
        'redemption_percentage_end_term': 'redemptionPercentageEndTerm',
        'grace_period_redemption': 'gracePeriodRedemption'
    }

    def __init__(self, interest_rate=None, update_index=None, update_index_additional_info=None, contribution_amount=None, early_redemptions=None, redemption_percentage_end_term=None, grace_period_redemption=None):  # noqa: E501
        """CapitalizationBondsProductCapitalizationPeriod - a model defined in Swagger"""  # noqa: E501
        self._interest_rate = None
        self._update_index = None
        self._update_index_additional_info = None
        self._contribution_amount = None
        self._early_redemptions = None
        self._redemption_percentage_end_term = None
        self._grace_period_redemption = None
        self.discriminator = None
        self.interest_rate = interest_rate
        self.update_index = update_index
        if update_index_additional_info is not None:
            self.update_index_additional_info = update_index_additional_info
        self.contribution_amount = contribution_amount
        self.early_redemptions = early_redemptions
        self.redemption_percentage_end_term = redemption_percentage_end_term
        self.grace_period_redemption = grace_period_redemption

    @property
    def interest_rate(self):
        """Gets the interest_rate of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501

        Taxa que remunera a parte da mensalidade destinada a formar o Capital, ou seja, a Provisão Matemática de Resgate, também chamada de saldo de capitalização. Em porcentagem ao mês (% a.m.).  # noqa: E501

        :return: The interest_rate of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :rtype: str
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this CapitalizationBondsProductCapitalizationPeriod.

        Taxa que remunera a parte da mensalidade destinada a formar o Capital, ou seja, a Provisão Matemática de Resgate, também chamada de saldo de capitalização. Em porcentagem ao mês (% a.m.).  # noqa: E501

        :param interest_rate: The interest_rate of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :type: str
        """
        if interest_rate is None:
            raise ValueError("Invalid value for `interest_rate`, must not be `None`")  # noqa: E501

        self._interest_rate = interest_rate

    @property
    def update_index(self):
        """Gets the update_index of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501


        :return: The update_index of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :rtype: CapitalizationBondsProductUpdateIndex
        """
        return self._update_index

    @update_index.setter
    def update_index(self, update_index):
        """Sets the update_index of this CapitalizationBondsProductCapitalizationPeriod.


        :param update_index: The update_index of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :type: CapitalizationBondsProductUpdateIndex
        """
        if update_index is None:
            raise ValueError("Invalid value for `update_index`, must not be `None`")  # noqa: E501

        self._update_index = update_index

    @property
    def update_index_additional_info(self):
        """Gets the update_index_additional_info of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501

        Restrição: Campo obrigatório para complementar a informação quando selecionada a opção 'OUTROS'  # noqa: E501

        :return: The update_index_additional_info of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :rtype: str
        """
        return self._update_index_additional_info

    @update_index_additional_info.setter
    def update_index_additional_info(self, update_index_additional_info):
        """Sets the update_index_additional_info of this CapitalizationBondsProductCapitalizationPeriod.

        Restrição: Campo obrigatório para complementar a informação quando selecionada a opção 'OUTROS'  # noqa: E501

        :param update_index_additional_info: The update_index_additional_info of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :type: str
        """

        self._update_index_additional_info = update_index_additional_info

    @property
    def contribution_amount(self):
        """Gets the contribution_amount of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501


        :return: The contribution_amount of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :rtype: list[CapitalizationPeriodContributionAmount]
        """
        return self._contribution_amount

    @contribution_amount.setter
    def contribution_amount(self, contribution_amount):
        """Sets the contribution_amount of this CapitalizationBondsProductCapitalizationPeriod.


        :param contribution_amount: The contribution_amount of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :type: list[CapitalizationPeriodContributionAmount]
        """
        if contribution_amount is None:
            raise ValueError("Invalid value for `contribution_amount`, must not be `None`")  # noqa: E501

        self._contribution_amount = contribution_amount

    @property
    def early_redemptions(self):
        """Gets the early_redemptions of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501


        :return: The early_redemptions of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :rtype: list[CapitalizationBondsProductCapitalizationPeriodEarlyRedemptions]
        """
        return self._early_redemptions

    @early_redemptions.setter
    def early_redemptions(self, early_redemptions):
        """Sets the early_redemptions of this CapitalizationBondsProductCapitalizationPeriod.


        :param early_redemptions: The early_redemptions of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :type: list[CapitalizationBondsProductCapitalizationPeriodEarlyRedemptions]
        """
        if early_redemptions is None:
            raise ValueError("Invalid value for `early_redemptions`, must not be `None`")  # noqa: E501

        self._early_redemptions = early_redemptions

    @property
    def redemption_percentage_end_term(self):
        """Gets the redemption_percentage_end_term of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501

        Percentual mínimo da soma das contribuições efetuadas que poderá ser resgatado ao final da vigência, tendo como condição os pagamentos das parcelas nos respectivos vencimentos.  # noqa: E501

        :return: The redemption_percentage_end_term of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :rtype: str
        """
        return self._redemption_percentage_end_term

    @redemption_percentage_end_term.setter
    def redemption_percentage_end_term(self, redemption_percentage_end_term):
        """Sets the redemption_percentage_end_term of this CapitalizationBondsProductCapitalizationPeriod.

        Percentual mínimo da soma das contribuições efetuadas que poderá ser resgatado ao final da vigência, tendo como condição os pagamentos das parcelas nos respectivos vencimentos.  # noqa: E501

        :param redemption_percentage_end_term: The redemption_percentage_end_term of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :type: str
        """
        if redemption_percentage_end_term is None:
            raise ValueError("Invalid value for `redemption_percentage_end_term`, must not be `None`")  # noqa: E501

        self._redemption_percentage_end_term = redemption_percentage_end_term

    @property
    def grace_period_redemption(self):
        """Gets the grace_period_redemption of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501

        Intervalo de tempo mínimo entre contratação e resgate do direito, em meses.  # noqa: E501

        :return: The grace_period_redemption of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :rtype: float
        """
        return self._grace_period_redemption

    @grace_period_redemption.setter
    def grace_period_redemption(self, grace_period_redemption):
        """Sets the grace_period_redemption of this CapitalizationBondsProductCapitalizationPeriod.

        Intervalo de tempo mínimo entre contratação e resgate do direito, em meses.  # noqa: E501

        :param grace_period_redemption: The grace_period_redemption of this CapitalizationBondsProductCapitalizationPeriod.  # noqa: E501
        :type: float
        """
        if grace_period_redemption is None:
            raise ValueError("Invalid value for `grace_period_redemption`, must not be `None`")  # noqa: E501

        self._grace_period_redemption = grace_period_redemption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CapitalizationBondsProductCapitalizationPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapitalizationBondsProductCapitalizationPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
