# coding: utf-8

"""
    API Capitalization-bonds - Open Finance Brasil

    As APIs descritas neste documento é referente a API de Capitalização da fase OpenInsurance do Open Finance Brasil.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContributionPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_method': 'CapitalizationBondsProductPaymentMethod',
        'payment_method_additional_info': 'str',
        'update_index': 'CapitalizationBondsProductUpdateIndex',
        'update_index_additional_info': 'str'
    }

    attribute_map = {
        'payment_method': 'paymentMethod',
        'payment_method_additional_info': 'paymentMethodAdditionalInfo',
        'update_index': 'updateIndex',
        'update_index_additional_info': 'updateIndexAdditionalInfo'
    }

    def __init__(self, payment_method=None, payment_method_additional_info=None, update_index=None, update_index_additional_info=None):  # noqa: E501
        """ContributionPayment - a model defined in Swagger"""  # noqa: E501
        self._payment_method = None
        self._payment_method_additional_info = None
        self._update_index = None
        self._update_index_additional_info = None
        self.discriminator = None
        self.payment_method = payment_method
        if payment_method_additional_info is not None:
            self.payment_method_additional_info = payment_method_additional_info
        self.update_index = update_index
        if update_index_additional_info is not None:
            self.update_index_additional_info = update_index_additional_info

    @property
    def payment_method(self):
        """Gets the payment_method of this ContributionPayment.  # noqa: E501


        :return: The payment_method of this ContributionPayment.  # noqa: E501
        :rtype: CapitalizationBondsProductPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ContributionPayment.


        :param payment_method: The payment_method of this ContributionPayment.  # noqa: E501
        :type: CapitalizationBondsProductPaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")  # noqa: E501

        self._payment_method = payment_method

    @property
    def payment_method_additional_info(self):
        """Gets the payment_method_additional_info of this ContributionPayment.  # noqa: E501

        Restrição: Campo obrigatório para complementar a informação quando selecionada a opção 'OUTROS'  # noqa: E501

        :return: The payment_method_additional_info of this ContributionPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_additional_info

    @payment_method_additional_info.setter
    def payment_method_additional_info(self, payment_method_additional_info):
        """Sets the payment_method_additional_info of this ContributionPayment.

        Restrição: Campo obrigatório para complementar a informação quando selecionada a opção 'OUTROS'  # noqa: E501

        :param payment_method_additional_info: The payment_method_additional_info of this ContributionPayment.  # noqa: E501
        :type: str
        """

        self._payment_method_additional_info = payment_method_additional_info

    @property
    def update_index(self):
        """Gets the update_index of this ContributionPayment.  # noqa: E501


        :return: The update_index of this ContributionPayment.  # noqa: E501
        :rtype: CapitalizationBondsProductUpdateIndex
        """
        return self._update_index

    @update_index.setter
    def update_index(self, update_index):
        """Sets the update_index of this ContributionPayment.


        :param update_index: The update_index of this ContributionPayment.  # noqa: E501
        :type: CapitalizationBondsProductUpdateIndex
        """
        if update_index is None:
            raise ValueError("Invalid value for `update_index`, must not be `None`")  # noqa: E501

        self._update_index = update_index

    @property
    def update_index_additional_info(self):
        """Gets the update_index_additional_info of this ContributionPayment.  # noqa: E501

        Restrição: Campo obrigatório para complementar a informação quando selecionada a opção 'OUTROS'  # noqa: E501

        :return: The update_index_additional_info of this ContributionPayment.  # noqa: E501
        :rtype: str
        """
        return self._update_index_additional_info

    @update_index_additional_info.setter
    def update_index_additional_info(self, update_index_additional_info):
        """Sets the update_index_additional_info of this ContributionPayment.

        Restrição: Campo obrigatório para complementar a informação quando selecionada a opção 'OUTROS'  # noqa: E501

        :param update_index_additional_info: The update_index_additional_info of this ContributionPayment.  # noqa: E501
        :type: str
        """

        self._update_index_additional_info = update_index_additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContributionPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContributionPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
