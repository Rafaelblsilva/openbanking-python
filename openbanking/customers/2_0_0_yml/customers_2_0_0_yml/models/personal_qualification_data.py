# coding: utf-8

"""
    API Customers - Open Banking Brasil

    API de dados cadastrais de clientes do Open Banking Brasil – Fase 2. API que retorna os dados cadastrais de clientes e de seus representantes, incluindo dados de identificação, de qualificação financeira, informações sobre representantes cadastrados e sobre o relacionamento financeiro do cliente com a instituição transmissora dos dados.\\ Possui segregação entre pessoa natural e pessoa jurídica.\\ Requer consentimento do cliente para todos os `endpoints`.  # Orientações A `Role`  do diretório de participantes relacionada à presente API é a `DADOS`.\\ Para todos os `endpoints` desta API é previsto o envio de um `token` através do header `Authorization`.\\ Este token deverá estar relacionado ao consentimento (`consentId`) mantido na instituição transmissora dos dados, o qual permitirá a pesquisa e retorno, na API em questão, dos  dados relacionados ao `consentId` específico relacionado.\\ Os dados serão devolvidos na consulta desde que o `consentId` relacionado corresponda a um consentimento válido e com o status `AUTHORISED`.\\ É também necessário que o recurso em questão (conta, contrato, etc) esteja disponível na instituição transmissora (ou seja, sem boqueios de qualquer natureza e com todas as autorizações/consentimentos já autorizados).\\ Além disso as `permissions` necessárias deverão ter sido solicitadas quando da criação do consentimento relacionado (`consentId`).\\ Relacionamos a seguir as `permissions` necessárias para a consulta de dados em cada `endpoint` da presente API.  ## Permissions necessárias para a API Customers  Para cada um dos paths desta API, além dos escopos (`scopes`) indicados existem `permissions` que deverão ser observadas:  ### `/personal/identifications`   - permissions:     - GET: **CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ** ### `/personal/qualifications`   - permissions: **CUSTOMERS_PERSONAL_ADITTIONALINFO_READ** ### `/personal/financial-relations`   - permissions:     - GET: **CUSTOMERS_PERSONAL_ADITTIONALINFO_READ** ### `/business/identifications`   - permissions:     - GET: **CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ** ### `/business/qualifications`   - permissions:     - GET: **CUSTOMERS_BUSINESS_ADITTIONALINFO_READ** ### `/business/financial-relations`   - permissions:     - GET: **CUSTOMERS_BUSINESS_ADITTIONALINFO_READ**   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonalQualificationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'update_date_time': 'datetime',
        'company_cnpj': 'str',
        'occupation_code': 'EnumOccupationMainCodeType',
        'occupation_description': 'str',
        'informed_income': 'InformedIncome',
        'informed_patrimony': 'PersonalInformedPatrimony'
    }

    attribute_map = {
        'update_date_time': 'updateDateTime',
        'company_cnpj': 'companyCnpj',
        'occupation_code': 'occupationCode',
        'occupation_description': 'occupationDescription',
        'informed_income': 'informedIncome',
        'informed_patrimony': 'informedPatrimony'
    }

    def __init__(self, update_date_time=None, company_cnpj=None, occupation_code=None, occupation_description=None, informed_income=None, informed_patrimony=None):  # noqa: E501
        """PersonalQualificationData - a model defined in Swagger"""  # noqa: E501
        self._update_date_time = None
        self._company_cnpj = None
        self._occupation_code = None
        self._occupation_description = None
        self._informed_income = None
        self._informed_patrimony = None
        self.discriminator = None
        self.update_date_time = update_date_time
        self.company_cnpj = company_cnpj
        if occupation_code is not None:
            self.occupation_code = occupation_code
        if occupation_description is not None:
            self.occupation_description = occupation_description
        if informed_income is not None:
            self.informed_income = informed_income
        if informed_patrimony is not None:
            self.informed_patrimony = informed_patrimony

    @property
    def update_date_time(self):
        """Gets the update_date_time of this PersonalQualificationData.  # noqa: E501

        Data e hora da atualização dos campos \\<_endpoint_\\>, conforme especificação RFC-3339, formato UTC. Quando não existente uma data vinculada especificamente ao bloco, assumir a data e hora de atualização do cadastro como um todo.   # noqa: E501

        :return: The update_date_time of this PersonalQualificationData.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date_time

    @update_date_time.setter
    def update_date_time(self, update_date_time):
        """Sets the update_date_time of this PersonalQualificationData.

        Data e hora da atualização dos campos \\<_endpoint_\\>, conforme especificação RFC-3339, formato UTC. Quando não existente uma data vinculada especificamente ao bloco, assumir a data e hora de atualização do cadastro como um todo.   # noqa: E501

        :param update_date_time: The update_date_time of this PersonalQualificationData.  # noqa: E501
        :type: datetime
        """
        if update_date_time is None:
            raise ValueError("Invalid value for `update_date_time`, must not be `None`")  # noqa: E501

        self._update_date_time = update_date_time

    @property
    def company_cnpj(self):
        """Gets the company_cnpj of this PersonalQualificationData.  # noqa: E501

        Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica.  Deve-se ter apenas os números do CNPJ, sem máscara   # noqa: E501

        :return: The company_cnpj of this PersonalQualificationData.  # noqa: E501
        :rtype: str
        """
        return self._company_cnpj

    @company_cnpj.setter
    def company_cnpj(self, company_cnpj):
        """Sets the company_cnpj of this PersonalQualificationData.

        Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica.  Deve-se ter apenas os números do CNPJ, sem máscara   # noqa: E501

        :param company_cnpj: The company_cnpj of this PersonalQualificationData.  # noqa: E501
        :type: str
        """
        if company_cnpj is None:
            raise ValueError("Invalid value for `company_cnpj`, must not be `None`")  # noqa: E501

        self._company_cnpj = company_cnpj

    @property
    def occupation_code(self):
        """Gets the occupation_code of this PersonalQualificationData.  # noqa: E501


        :return: The occupation_code of this PersonalQualificationData.  # noqa: E501
        :rtype: EnumOccupationMainCodeType
        """
        return self._occupation_code

    @occupation_code.setter
    def occupation_code(self, occupation_code):
        """Sets the occupation_code of this PersonalQualificationData.


        :param occupation_code: The occupation_code of this PersonalQualificationData.  # noqa: E501
        :type: EnumOccupationMainCodeType
        """

        self._occupation_code = occupation_code

    @property
    def occupation_description(self):
        """Gets the occupation_description of this PersonalQualificationData.  # noqa: E501

        Campo livre, de preenchimento obrigatório. Se selecionada a opção *occupationCode* \"RECEITA_FEDERAL\" ou \"CBO\", informar o código desta lista padronizada.    Se selecionada *occupationCode* \"OUTRO\", informar o descritivo da ocupação quando a IF não segue a lista padronizada da Receita Federal e nem da CBO.   # noqa: E501

        :return: The occupation_description of this PersonalQualificationData.  # noqa: E501
        :rtype: str
        """
        return self._occupation_description

    @occupation_description.setter
    def occupation_description(self, occupation_description):
        """Sets the occupation_description of this PersonalQualificationData.

        Campo livre, de preenchimento obrigatório. Se selecionada a opção *occupationCode* \"RECEITA_FEDERAL\" ou \"CBO\", informar o código desta lista padronizada.    Se selecionada *occupationCode* \"OUTRO\", informar o descritivo da ocupação quando a IF não segue a lista padronizada da Receita Federal e nem da CBO.   # noqa: E501

        :param occupation_description: The occupation_description of this PersonalQualificationData.  # noqa: E501
        :type: str
        """

        self._occupation_description = occupation_description

    @property
    def informed_income(self):
        """Gets the informed_income of this PersonalQualificationData.  # noqa: E501


        :return: The informed_income of this PersonalQualificationData.  # noqa: E501
        :rtype: InformedIncome
        """
        return self._informed_income

    @informed_income.setter
    def informed_income(self, informed_income):
        """Sets the informed_income of this PersonalQualificationData.


        :param informed_income: The informed_income of this PersonalQualificationData.  # noqa: E501
        :type: InformedIncome
        """

        self._informed_income = informed_income

    @property
    def informed_patrimony(self):
        """Gets the informed_patrimony of this PersonalQualificationData.  # noqa: E501


        :return: The informed_patrimony of this PersonalQualificationData.  # noqa: E501
        :rtype: PersonalInformedPatrimony
        """
        return self._informed_patrimony

    @informed_patrimony.setter
    def informed_patrimony(self, informed_patrimony):
        """Sets the informed_patrimony of this PersonalQualificationData.


        :param informed_patrimony: The informed_patrimony of this PersonalQualificationData.  # noqa: E501
        :type: PersonalInformedPatrimony
        """

        self._informed_patrimony = informed_patrimony

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalQualificationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalQualificationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
