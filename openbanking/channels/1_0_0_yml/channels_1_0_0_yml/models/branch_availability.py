# coding: utf-8

"""
    APIs OpenData do Open Banking Brasil

    As APIs descritas neste documento s√£o referentes as APIs da fase OpenData do Open Banking Brasil.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BranchAvailability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standards': 'list[BranchAvailabilityStandards]',
        'exception': 'str',
        'allow_public_access': 'bool'
    }

    attribute_map = {
        'standards': 'standards',
        'exception': 'exception',
        'allow_public_access': 'allowPublicAccess'
    }

    def __init__(self, standards=None, exception=None, allow_public_access=None):  # noqa: E501
        """BranchAvailability - a model defined in Swagger"""  # noqa: E501
        self._standards = None
        self._exception = None
        self._allow_public_access = None
        self.discriminator = None
        self.standards = standards
        self.exception = exception
        self.allow_public_access = allow_public_access

    @property
    def standards(self):
        """Gets the standards of this BranchAvailability.  # noqa: E501


        :return: The standards of this BranchAvailability.  # noqa: E501
        :rtype: list[BranchAvailabilityStandards]
        """
        return self._standards

    @standards.setter
    def standards(self, standards):
        """Sets the standards of this BranchAvailability.


        :param standards: The standards of this BranchAvailability.  # noqa: E501
        :type: list[BranchAvailabilityStandards]
        """
        if standards is None:
            raise ValueError("Invalid value for `standards`, must not be `None`")  # noqa: E501

        self._standards = standards

    @property
    def exception(self):
        """Gets the exception of this BranchAvailability.  # noqa: E501


        :return: The exception of this BranchAvailability.  # noqa: E501
        :rtype: str
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this BranchAvailability.


        :param exception: The exception of this BranchAvailability.  # noqa: E501
        :type: str
        """
        if exception is None:
            raise ValueError("Invalid value for `exception`, must not be `None`")  # noqa: E501

        self._exception = exception

    @property
    def allow_public_access(self):
        """Gets the allow_public_access of this BranchAvailability.  # noqa: E501


        :return: The allow_public_access of this BranchAvailability.  # noqa: E501
        :rtype: bool
        """
        return self._allow_public_access

    @allow_public_access.setter
    def allow_public_access(self, allow_public_access):
        """Sets the allow_public_access of this BranchAvailability.


        :param allow_public_access: The allow_public_access of this BranchAvailability.  # noqa: E501
        :type: bool
        """
        if allow_public_access is None:
            raise ValueError("Invalid value for `allow_public_access`, must not be `None`")  # noqa: E501

        self._allow_public_access = allow_public_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BranchAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BranchAvailability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
