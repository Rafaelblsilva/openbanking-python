# coding: utf-8

"""
    API Pension - Open Finance Brasil

    API de Previdência do Open Finance Brasil – Fase 4. API que retorna informações de Previdência.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumAssistanceType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ACOMPANHANTE_CASO_HOSPITALIZACAO_PROLONGADA = "ACOMPANHANTE_CASO_HOSPITALIZACAO_PROLONGADA"
    ARQUITETO_VIRTUAL = "ARQUITETO_VIRTUAL"
    ASSESSORIA_FINANCEIRA = "ASSESSORIA_FINANCEIRA"
    AUTOMOVEL = "AUTOMOVEL"
    AUXILIO_NATALIDADE = "AUXILIO_NATALIDADE"
    AVALIACAO_CLINICA_PREVENTIVA = "AVALIACAO_CLINICA_PREVENTIVA"
    BOLSA_PROTEGIDA = "BOLSA_PROTEGIDA"
    CESTA_BASICA = "CESTA_BASICA"
    CHECKUP_ODONTOLOGICO = "CHECKUP_ODONTOLOGICO"
    CLUBE_VANTAGENS_BENEFICIOS = "CLUBE_VANTAGENS_BENEFICIOS"
    CONVALESCENCIA = "CONVALESCENCIA"
    DECESSO = "DECESSO"
    DESCONTO_FARMACIAS_MEDICAMENTOS = "DESCONTO_FARMACIAS_MEDICAMENTOS"
    DESPESAS_FARMACEUTICAS_VIAGEM = "DESPESAS_FARMACEUTICAS_VIAGEM"
    DIGITAL = "DIGITAL"
    EDUCACIONAL = "EDUCACIONAL"
    EMPRESARIAL = "EMPRESARIAL"
    ENCANADOR = "ENCANADOR"
    ENTRETENIMENTO = "ENTRETENIMENTO"
    EQUIPAMENTOS_MEDICOS = "EQUIPAMENTOS_MEDICOS"
    FIANCAS_DESPESAS_LEGAIS = "FIANCAS_DESPESAS_LEGAIS"
    FISIOTERAPIA = "FISIOTERAPIA"
    FUNERAL = "FUNERAL"
    HELP_LINE = "HELP_LINE"
    HOSPEDAGEM_ACOMPANHANTE = "HOSPEDAGEM_ACOMPANHANTE"
    INTERRUPCAO_VIAGEM = "INTERRUPCAO_VIAGEM"
    INVENTARIO = "INVENTARIO"
    MAIS_VIDA = "MAIS_VIDA"
    MAMAE_BEBE = "MAMAE_BEBE"
    MEDICA_ACIDENTE_DOENCA = "MEDICA_ACIDENTE_DOENCA"
    MOTOCICLETA = "MOTOCICLETA"
    MULHER = "MULHER"
    NUTRICIONISTA = "NUTRICIONISTA"
    ODONTOLOGICA = "ODONTOLOGICA"
    ORIENTACAO_FITNESS = "ORIENTACAO_FITNESS"
    ORIENTACAO_JURIDICA = "ORIENTACAO_JURIDICA"
    ORIENTACAO_NUTRICIONAL = "ORIENTACAO_NUTRICIONAL"
    PERSONAL_FITNESS = "PERSONAL_FITNESS"
    ORIENTACAO_PSICOSSOCIAL_FAMILIAR = "ORIENTACAO_PSICOSSOCIAL_FAMILIAR"
    PERDA_ROUBO_CARTAO = "PERDA_ROUBO_CARTAO"
    PET = "PET"
    PRORROGACAO_ESTADIA = "PRORROGACAO_ESTADIA"
    PROTECAO_DADOS = "PROTECAO_DADOS"
    RECOLOCACAO_PROFISSIONAL = "RECOLOCACAO_PROFISSIONAL"
    REDE_DESCONTO_NUTRICIONAL = "REDE_DESCONTO_NUTRICIONAL"
    RESIDENCIAL = "RESIDENCIAL"
    RETORNO_MENORES_SEGURADO = "RETORNO_MENORES_SEGURADO"
    SAQUE_COACAO = "SAQUE_COACAO"
    SAUDE_BEM_ESTAR = "SAUDE_BEM_ESTAR"
    SEGUNDA_OPINIAO_MEDICA = "SEGUNDA_OPINIAO_MEDICA"
    SENIOR = "SENIOR"
    SUSTENTAVEL_DESCARTE_ECOLOGICO = "SUSTENTAVEL_DESCARTE_ECOLOGICO"
    TELEMEDICINA = "TELEMEDICINA"
    VIAGEM = "VIAGEM"
    VITIMA = "VITIMA"
    OUTROS = "OUTROS"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """EnumAssistanceType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumAssistanceType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumAssistanceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
