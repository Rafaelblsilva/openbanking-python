# coding: utf-8

"""
    API Pension - Open Finance Brasil

    API de Previdência do Open Finance Brasil – Fase 4. API que retorna informações de Previdência.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurvivalPensionDefferalPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interest_rate': 'str',
        'update_index': 'UpdateIndex',
        'other_minimum_performance_garantees': 'str',
        'reversal_financial_results': 'str',
        'minimum_premiums': 'list[SurvivalPensionMinimumPremium]',
        'premium_payment_methods': 'list[str]',
        'permission_extraordinary_contributions': 'bool',
        'permission_scheduled_financial_payments': 'bool',
        'grace_period': 'SurvivalPensionGracePeriod',
        'redemption_payment_term': 'int',
        'portability_payment_term': 'float',
        'investment_funds': 'list[SurvivalPensionInvestmentFund]'
    }

    attribute_map = {
        'interest_rate': 'interestRate',
        'update_index': 'updateIndex',
        'other_minimum_performance_garantees': 'otherMinimumPerformanceGarantees',
        'reversal_financial_results': 'reversalFinancialResults',
        'minimum_premiums': 'minimumPremiums',
        'premium_payment_methods': 'premiumPaymentMethods',
        'permission_extraordinary_contributions': 'permissionExtraordinaryContributions',
        'permission_scheduled_financial_payments': 'permissionScheduledFinancialPayments',
        'grace_period': 'gracePeriod',
        'redemption_payment_term': 'redemptionPaymentTerm',
        'portability_payment_term': 'portabilityPaymentTerm',
        'investment_funds': 'investmentFunds'
    }

    def __init__(self, interest_rate=None, update_index=None, other_minimum_performance_garantees=None, reversal_financial_results=None, minimum_premiums=None, premium_payment_methods=None, permission_extraordinary_contributions=None, permission_scheduled_financial_payments=None, grace_period=None, redemption_payment_term=None, portability_payment_term=None, investment_funds=None):  # noqa: E501
        """SurvivalPensionDefferalPeriod - a model defined in Swagger"""  # noqa: E501
        self._interest_rate = None
        self._update_index = None
        self._other_minimum_performance_garantees = None
        self._reversal_financial_results = None
        self._minimum_premiums = None
        self._premium_payment_methods = None
        self._permission_extraordinary_contributions = None
        self._permission_scheduled_financial_payments = None
        self._grace_period = None
        self._redemption_payment_term = None
        self._portability_payment_term = None
        self._investment_funds = None
        self.discriminator = None
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if update_index is not None:
            self.update_index = update_index
        if other_minimum_performance_garantees is not None:
            self.other_minimum_performance_garantees = other_minimum_performance_garantees
        if reversal_financial_results is not None:
            self.reversal_financial_results = reversal_financial_results
        if minimum_premiums is not None:
            self.minimum_premiums = minimum_premiums
        self.premium_payment_methods = premium_payment_methods
        if permission_extraordinary_contributions is not None:
            self.permission_extraordinary_contributions = permission_extraordinary_contributions
        if permission_scheduled_financial_payments is not None:
            self.permission_scheduled_financial_payments = permission_scheduled_financial_payments
        if grace_period is not None:
            self.grace_period = grace_period
        if redemption_payment_term is not None:
            self.redemption_payment_term = redemption_payment_term
        if portability_payment_term is not None:
            self.portability_payment_term = portability_payment_term
        if investment_funds is not None:
            self.investment_funds = investment_funds

    @property
    def interest_rate(self):
        """Gets the interest_rate of this SurvivalPensionDefferalPeriod.  # noqa: E501

        Taxa de juros mensal garantida que remunera o plano durante a fase de diferimento/acumulação.  # noqa: E501

        :return: The interest_rate of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: str
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this SurvivalPensionDefferalPeriod.

        Taxa de juros mensal garantida que remunera o plano durante a fase de diferimento/acumulação.  # noqa: E501

        :param interest_rate: The interest_rate of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: str
        """

        self._interest_rate = interest_rate

    @property
    def update_index(self):
        """Gets the update_index of this SurvivalPensionDefferalPeriod.  # noqa: E501


        :return: The update_index of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: UpdateIndex
        """
        return self._update_index

    @update_index.setter
    def update_index(self, update_index):
        """Sets the update_index of this SurvivalPensionDefferalPeriod.


        :param update_index: The update_index of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: UpdateIndex
        """

        self._update_index = update_index

    @property
    def other_minimum_performance_garantees(self):
        """Gets the other_minimum_performance_garantees of this SurvivalPensionDefferalPeriod.  # noqa: E501

        Para produtos do tipo PDR e VDR, indicação do índice de ampla divulgação utilizados como garantia mínima de desempenho.  # noqa: E501

        :return: The other_minimum_performance_garantees of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: str
        """
        return self._other_minimum_performance_garantees

    @other_minimum_performance_garantees.setter
    def other_minimum_performance_garantees(self, other_minimum_performance_garantees):
        """Sets the other_minimum_performance_garantees of this SurvivalPensionDefferalPeriod.

        Para produtos do tipo PDR e VDR, indicação do índice de ampla divulgação utilizados como garantia mínima de desempenho.  # noqa: E501

        :param other_minimum_performance_garantees: The other_minimum_performance_garantees of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: str
        """

        self._other_minimum_performance_garantees = other_minimum_performance_garantees

    @property
    def reversal_financial_results(self):
        """Gets the reversal_financial_results of this SurvivalPensionDefferalPeriod.  # noqa: E501

        Percentual de reversão de excedente financeiro na concessão. Em %.  # noqa: E501

        :return: The reversal_financial_results of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: str
        """
        return self._reversal_financial_results

    @reversal_financial_results.setter
    def reversal_financial_results(self, reversal_financial_results):
        """Sets the reversal_financial_results of this SurvivalPensionDefferalPeriod.

        Percentual de reversão de excedente financeiro na concessão. Em %.  # noqa: E501

        :param reversal_financial_results: The reversal_financial_results of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: str
        """

        self._reversal_financial_results = reversal_financial_results

    @property
    def minimum_premiums(self):
        """Gets the minimum_premiums of this SurvivalPensionDefferalPeriod.  # noqa: E501


        :return: The minimum_premiums of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: list[SurvivalPensionMinimumPremium]
        """
        return self._minimum_premiums

    @minimum_premiums.setter
    def minimum_premiums(self, minimum_premiums):
        """Sets the minimum_premiums of this SurvivalPensionDefferalPeriod.


        :param minimum_premiums: The minimum_premiums of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: list[SurvivalPensionMinimumPremium]
        """

        self._minimum_premiums = minimum_premiums

    @property
    def premium_payment_methods(self):
        """Gets the premium_payment_methods of this SurvivalPensionDefferalPeriod.  # noqa: E501


        :return: The premium_payment_methods of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: list[str]
        """
        return self._premium_payment_methods

    @premium_payment_methods.setter
    def premium_payment_methods(self, premium_payment_methods):
        """Sets the premium_payment_methods of this SurvivalPensionDefferalPeriod.


        :param premium_payment_methods: The premium_payment_methods of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: list[str]
        """
        if premium_payment_methods is None:
            raise ValueError("Invalid value for `premium_payment_methods`, must not be `None`")  # noqa: E501
        allowed_values = ["CARTAO_CREDITO", "DEBITO_CONTA", "DEBITO_CONTA_POUPANCA", "BOLETO_BANCARIO", "PIX", "CARTAO_DEBITO", "REGRA_PARCEIRO", "CONSIGNACAO_FOLHA_PAGAMENTO", "PONTOS_PROGRAMA_BENEFICIO", "TED_DOC", "OUTROS"]  # noqa: E501
        if not set(premium_payment_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `premium_payment_methods` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(premium_payment_methods) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._premium_payment_methods = premium_payment_methods

    @property
    def permission_extraordinary_contributions(self):
        """Gets the permission_extraordinary_contributions of this SurvivalPensionDefferalPeriod.  # noqa: E501

        Se ficam permitidos aportes extraordinários. A considerar os seguintes domínios: 1. true 2. false   # noqa: E501

        :return: The permission_extraordinary_contributions of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: bool
        """
        return self._permission_extraordinary_contributions

    @permission_extraordinary_contributions.setter
    def permission_extraordinary_contributions(self, permission_extraordinary_contributions):
        """Sets the permission_extraordinary_contributions of this SurvivalPensionDefferalPeriod.

        Se ficam permitidos aportes extraordinários. A considerar os seguintes domínios: 1. true 2. false   # noqa: E501

        :param permission_extraordinary_contributions: The permission_extraordinary_contributions of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: bool
        """

        self._permission_extraordinary_contributions = permission_extraordinary_contributions

    @property
    def permission_scheduled_financial_payments(self):
        """Gets the permission_scheduled_financial_payments of this SurvivalPensionDefferalPeriod.  # noqa: E501

        Se ficam permitidos pagamentos financeiros programados. A considerar os seguintes domínios: 1. true 2. false   # noqa: E501

        :return: The permission_scheduled_financial_payments of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: bool
        """
        return self._permission_scheduled_financial_payments

    @permission_scheduled_financial_payments.setter
    def permission_scheduled_financial_payments(self, permission_scheduled_financial_payments):
        """Sets the permission_scheduled_financial_payments of this SurvivalPensionDefferalPeriod.

        Se ficam permitidos pagamentos financeiros programados. A considerar os seguintes domínios: 1. true 2. false   # noqa: E501

        :param permission_scheduled_financial_payments: The permission_scheduled_financial_payments of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: bool
        """

        self._permission_scheduled_financial_payments = permission_scheduled_financial_payments

    @property
    def grace_period(self):
        """Gets the grace_period of this SurvivalPensionDefferalPeriod.  # noqa: E501


        :return: The grace_period of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: SurvivalPensionGracePeriod
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this SurvivalPensionDefferalPeriod.


        :param grace_period: The grace_period of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: SurvivalPensionGracePeriod
        """

        self._grace_period = grace_period

    @property
    def redemption_payment_term(self):
        """Gets the redemption_payment_term of this SurvivalPensionDefferalPeriod.  # noqa: E501

        Prazo em dias para pagamento do resgate  # noqa: E501

        :return: The redemption_payment_term of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: int
        """
        return self._redemption_payment_term

    @redemption_payment_term.setter
    def redemption_payment_term(self, redemption_payment_term):
        """Sets the redemption_payment_term of this SurvivalPensionDefferalPeriod.

        Prazo em dias para pagamento do resgate  # noqa: E501

        :param redemption_payment_term: The redemption_payment_term of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: int
        """

        self._redemption_payment_term = redemption_payment_term

    @property
    def portability_payment_term(self):
        """Gets the portability_payment_term of this SurvivalPensionDefferalPeriod.  # noqa: E501

        Prazo em dias para pagamento da portabilidade (entre empresas diferentes).  # noqa: E501

        :return: The portability_payment_term of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: float
        """
        return self._portability_payment_term

    @portability_payment_term.setter
    def portability_payment_term(self, portability_payment_term):
        """Sets the portability_payment_term of this SurvivalPensionDefferalPeriod.

        Prazo em dias para pagamento da portabilidade (entre empresas diferentes).  # noqa: E501

        :param portability_payment_term: The portability_payment_term of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: float
        """

        self._portability_payment_term = portability_payment_term

    @property
    def investment_funds(self):
        """Gets the investment_funds of this SurvivalPensionDefferalPeriod.  # noqa: E501


        :return: The investment_funds of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :rtype: list[SurvivalPensionInvestmentFund]
        """
        return self._investment_funds

    @investment_funds.setter
    def investment_funds(self, investment_funds):
        """Sets the investment_funds of this SurvivalPensionDefferalPeriod.


        :param investment_funds: The investment_funds of this SurvivalPensionDefferalPeriod.  # noqa: E501
        :type: list[SurvivalPensionInvestmentFund]
        """

        self._investment_funds = investment_funds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurvivalPensionDefferalPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurvivalPensionDefferalPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
