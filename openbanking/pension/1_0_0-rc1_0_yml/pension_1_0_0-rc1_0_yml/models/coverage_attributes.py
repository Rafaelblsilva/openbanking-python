# coding: utf-8

"""
    API Pension - Open Finance Brasil

    API de Previdência do Open Finance Brasil – Fase 4. API que retorna informações de Previdência.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoverageAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_value': 'InsurancePensionMinValue',
        'max_value': 'InsurancePensionMaxValue',
        'indemnifiable_periods': 'list[InsurancePensionEnumIndemnifiablePeriodType]',
        'excluded_risks': 'list[EnumExcludedRisks]',
        'excluded_risks_url': 'str'
    }

    attribute_map = {
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'indemnifiable_periods': 'indemnifiablePeriods',
        'excluded_risks': 'excludedRisks',
        'excluded_risks_url': 'excludedRisksURL'
    }

    def __init__(self, min_value=None, max_value=None, indemnifiable_periods=None, excluded_risks=None, excluded_risks_url=None):  # noqa: E501
        """CoverageAttributes - a model defined in Swagger"""  # noqa: E501
        self._min_value = None
        self._max_value = None
        self._indemnifiable_periods = None
        self._excluded_risks = None
        self._excluded_risks_url = None
        self.discriminator = None
        self.min_value = min_value
        self.max_value = max_value
        if indemnifiable_periods is not None:
            self.indemnifiable_periods = indemnifiable_periods
        if excluded_risks is not None:
            self.excluded_risks = excluded_risks
        if excluded_risks_url is not None:
            self.excluded_risks_url = excluded_risks_url

    @property
    def min_value(self):
        """Gets the min_value of this CoverageAttributes.  # noqa: E501


        :return: The min_value of this CoverageAttributes.  # noqa: E501
        :rtype: InsurancePensionMinValue
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this CoverageAttributes.


        :param min_value: The min_value of this CoverageAttributes.  # noqa: E501
        :type: InsurancePensionMinValue
        """
        if min_value is None:
            raise ValueError("Invalid value for `min_value`, must not be `None`")  # noqa: E501

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this CoverageAttributes.  # noqa: E501


        :return: The max_value of this CoverageAttributes.  # noqa: E501
        :rtype: InsurancePensionMaxValue
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this CoverageAttributes.


        :param max_value: The max_value of this CoverageAttributes.  # noqa: E501
        :type: InsurancePensionMaxValue
        """
        if max_value is None:
            raise ValueError("Invalid value for `max_value`, must not be `None`")  # noqa: E501

        self._max_value = max_value

    @property
    def indemnifiable_periods(self):
        """Gets the indemnifiable_periods of this CoverageAttributes.  # noqa: E501


        :return: The indemnifiable_periods of this CoverageAttributes.  # noqa: E501
        :rtype: list[InsurancePensionEnumIndemnifiablePeriodType]
        """
        return self._indemnifiable_periods

    @indemnifiable_periods.setter
    def indemnifiable_periods(self, indemnifiable_periods):
        """Sets the indemnifiable_periods of this CoverageAttributes.


        :param indemnifiable_periods: The indemnifiable_periods of this CoverageAttributes.  # noqa: E501
        :type: list[InsurancePensionEnumIndemnifiablePeriodType]
        """

        self._indemnifiable_periods = indemnifiable_periods

    @property
    def excluded_risks(self):
        """Gets the excluded_risks of this CoverageAttributes.  # noqa: E501


        :return: The excluded_risks of this CoverageAttributes.  # noqa: E501
        :rtype: list[EnumExcludedRisks]
        """
        return self._excluded_risks

    @excluded_risks.setter
    def excluded_risks(self, excluded_risks):
        """Sets the excluded_risks of this CoverageAttributes.


        :param excluded_risks: The excluded_risks of this CoverageAttributes.  # noqa: E501
        :type: list[EnumExcludedRisks]
        """

        self._excluded_risks = excluded_risks

    @property
    def excluded_risks_url(self):
        """Gets the excluded_risks_url of this CoverageAttributes.  # noqa: E501

        Campo aberto (possibilidade de incluir URL).  # noqa: E501

        :return: The excluded_risks_url of this CoverageAttributes.  # noqa: E501
        :rtype: str
        """
        return self._excluded_risks_url

    @excluded_risks_url.setter
    def excluded_risks_url(self, excluded_risks_url):
        """Sets the excluded_risks_url of this CoverageAttributes.

        Campo aberto (possibilidade de incluir URL).  # noqa: E501

        :param excluded_risks_url: The excluded_risks_url of this CoverageAttributes.  # noqa: E501
        :type: str
        """

        self._excluded_risks_url = excluded_risks_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoverageAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoverageAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
