# coding: utf-8

"""
    API Pension - Open Finance Brasil

    API de Previdência do Open Finance Brasil – Fase 4. API que retorna informações de Previdência.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc3.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiskPensionEnumContributionPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contribution_payment_method': 'str',
        'contribution_payment_method_additional_info': 'str',
        'contribution_periodicity': 'str',
        'contribution_periodicity_additional_info': 'str'
    }

    attribute_map = {
        'contribution_payment_method': 'contributionPaymentMethod',
        'contribution_payment_method_additional_info': 'contributionPaymentMethodAdditionalInfo',
        'contribution_periodicity': 'contributionPeriodicity',
        'contribution_periodicity_additional_info': 'contributionPeriodicityAdditionalInfo'
    }

    def __init__(self, contribution_payment_method=None, contribution_payment_method_additional_info=None, contribution_periodicity=None, contribution_periodicity_additional_info=None):  # noqa: E501
        """RiskPensionEnumContributionPayment - a model defined in Swagger"""  # noqa: E501
        self._contribution_payment_method = None
        self._contribution_payment_method_additional_info = None
        self._contribution_periodicity = None
        self._contribution_periodicity_additional_info = None
        self.discriminator = None
        self.contribution_payment_method = contribution_payment_method
        if contribution_payment_method_additional_info is not None:
            self.contribution_payment_method_additional_info = contribution_payment_method_additional_info
        self.contribution_periodicity = contribution_periodicity
        if contribution_periodicity_additional_info is not None:
            self.contribution_periodicity_additional_info = contribution_periodicity_additional_info

    @property
    def contribution_payment_method(self):
        """Gets the contribution_payment_method of this RiskPensionEnumContributionPayment.  # noqa: E501

        Forma de pagamento da contribuição.  - CARTAO_CREDITO  - DEBITO_CONTA  - DEBITO_CONTA_POUPANCA  - BOLETO_BANCARIO  - PIX  - TED_DOC  - CONSIGNACAO_FOLHA_PAGAMENTO  - PONTOS_PROGRAMA_BENEFICIO  - OUTROS  - NA   # noqa: E501

        :return: The contribution_payment_method of this RiskPensionEnumContributionPayment.  # noqa: E501
        :rtype: str
        """
        return self._contribution_payment_method

    @contribution_payment_method.setter
    def contribution_payment_method(self, contribution_payment_method):
        """Sets the contribution_payment_method of this RiskPensionEnumContributionPayment.

        Forma de pagamento da contribuição.  - CARTAO_CREDITO  - DEBITO_CONTA  - DEBITO_CONTA_POUPANCA  - BOLETO_BANCARIO  - PIX  - TED_DOC  - CONSIGNACAO_FOLHA_PAGAMENTO  - PONTOS_PROGRAMA_BENEFICIO  - OUTROS  - NA   # noqa: E501

        :param contribution_payment_method: The contribution_payment_method of this RiskPensionEnumContributionPayment.  # noqa: E501
        :type: str
        """
        if contribution_payment_method is None:
            raise ValueError("Invalid value for `contribution_payment_method`, must not be `None`")  # noqa: E501
        allowed_values = ["CARTAO_CREDITO", "DEBITO_CONTA", "DEBITO_CONTA_POUPANCA", "BOLETO_BANCARIO", "PIX", "TED_DOC", "CONSIGNACAO_FOLHA_PAGAMENTO", "PONTOS_PROGRAMA_BENEFICIO", "OUTROS", "NA"]  # noqa: E501
        if contribution_payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `contribution_payment_method` ({0}), must be one of {1}"  # noqa: E501
                .format(contribution_payment_method, allowed_values)
            )

        self._contribution_payment_method = contribution_payment_method

    @property
    def contribution_payment_method_additional_info(self):
        """Gets the contribution_payment_method_additional_info of this RiskPensionEnumContributionPayment.  # noqa: E501

        Campo livre para preenchimento das informações adicionais referente ao contributionPaymentMethod.  [Restrição] Obrigatório quando 'contributionPaymentMethod' for igual 'OUTROS'.    # noqa: E501

        :return: The contribution_payment_method_additional_info of this RiskPensionEnumContributionPayment.  # noqa: E501
        :rtype: str
        """
        return self._contribution_payment_method_additional_info

    @contribution_payment_method_additional_info.setter
    def contribution_payment_method_additional_info(self, contribution_payment_method_additional_info):
        """Sets the contribution_payment_method_additional_info of this RiskPensionEnumContributionPayment.

        Campo livre para preenchimento das informações adicionais referente ao contributionPaymentMethod.  [Restrição] Obrigatório quando 'contributionPaymentMethod' for igual 'OUTROS'.    # noqa: E501

        :param contribution_payment_method_additional_info: The contribution_payment_method_additional_info of this RiskPensionEnumContributionPayment.  # noqa: E501
        :type: str
        """

        self._contribution_payment_method_additional_info = contribution_payment_method_additional_info

    @property
    def contribution_periodicity(self):
        """Gets the contribution_periodicity of this RiskPensionEnumContributionPayment.  # noqa: E501

        Periodicidade de pagamento da contribuição. - MENSAL - UNICA - ANUAL - TRIMESTRAL - SEMESTRAL - BIMESTRAL - OUTROS - NA   # noqa: E501

        :return: The contribution_periodicity of this RiskPensionEnumContributionPayment.  # noqa: E501
        :rtype: str
        """
        return self._contribution_periodicity

    @contribution_periodicity.setter
    def contribution_periodicity(self, contribution_periodicity):
        """Sets the contribution_periodicity of this RiskPensionEnumContributionPayment.

        Periodicidade de pagamento da contribuição. - MENSAL - UNICA - ANUAL - TRIMESTRAL - SEMESTRAL - BIMESTRAL - OUTROS - NA   # noqa: E501

        :param contribution_periodicity: The contribution_periodicity of this RiskPensionEnumContributionPayment.  # noqa: E501
        :type: str
        """
        if contribution_periodicity is None:
            raise ValueError("Invalid value for `contribution_periodicity`, must not be `None`")  # noqa: E501
        allowed_values = ["MENSAL", "UNICA", "ANUAL", "TRIMESTRAL", "SEMESTRAL", "BIMESTRAL", "OUTROS", "NA"]  # noqa: E501
        if contribution_periodicity not in allowed_values:
            raise ValueError(
                "Invalid value for `contribution_periodicity` ({0}), must be one of {1}"  # noqa: E501
                .format(contribution_periodicity, allowed_values)
            )

        self._contribution_periodicity = contribution_periodicity

    @property
    def contribution_periodicity_additional_info(self):
        """Gets the contribution_periodicity_additional_info of this RiskPensionEnumContributionPayment.  # noqa: E501

        Campo livre para preenchimento das informações adicionais referente ao contributionPaymentMethod.  [Restrição] Obrigatório quando 'contributionPeriodicity' for igual 'OUTROS'.   # noqa: E501

        :return: The contribution_periodicity_additional_info of this RiskPensionEnumContributionPayment.  # noqa: E501
        :rtype: str
        """
        return self._contribution_periodicity_additional_info

    @contribution_periodicity_additional_info.setter
    def contribution_periodicity_additional_info(self, contribution_periodicity_additional_info):
        """Sets the contribution_periodicity_additional_info of this RiskPensionEnumContributionPayment.

        Campo livre para preenchimento das informações adicionais referente ao contributionPaymentMethod.  [Restrição] Obrigatório quando 'contributionPeriodicity' for igual 'OUTROS'.   # noqa: E501

        :param contribution_periodicity_additional_info: The contribution_periodicity_additional_info of this RiskPensionEnumContributionPayment.  # noqa: E501
        :type: str
        """

        self._contribution_periodicity_additional_info = contribution_periodicity_additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskPensionEnumContributionPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskPensionEnumContributionPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
