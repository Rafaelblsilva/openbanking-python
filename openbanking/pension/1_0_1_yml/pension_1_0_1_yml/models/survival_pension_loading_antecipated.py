# coding: utf-8

"""
    API Pension - Open Finance Brasil

    API de Previdência do Open Finance Brasil – Fase 4. API que retorna informações de Previdência.   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurvivalPensionLoadingAntecipated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_value': 'str',
        'max_value': 'str'
    }

    attribute_map = {
        'min_value': 'minValue',
        'max_value': 'maxValue'
    }

    def __init__(self, min_value=None, max_value=None):  # noqa: E501
        """SurvivalPensionLoadingAntecipated - a model defined in Swagger"""  # noqa: E501
        self._min_value = None
        self._max_value = None
        self.discriminator = None
        self.min_value = min_value
        self.max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this SurvivalPensionLoadingAntecipated.  # noqa: E501

        Percentual mínimo de carregamento cobrada quando do pagamento do prêmio/ contribuição. Em %.  # noqa: E501

        :return: The min_value of this SurvivalPensionLoadingAntecipated.  # noqa: E501
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this SurvivalPensionLoadingAntecipated.

        Percentual mínimo de carregamento cobrada quando do pagamento do prêmio/ contribuição. Em %.  # noqa: E501

        :param min_value: The min_value of this SurvivalPensionLoadingAntecipated.  # noqa: E501
        :type: str
        """
        if min_value is None:
            raise ValueError("Invalid value for `min_value`, must not be `None`")  # noqa: E501

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this SurvivalPensionLoadingAntecipated.  # noqa: E501

        Percentual máximo de carregamento cobrada quando do pagamento do prêmio/ contribuição. Em %.  # noqa: E501

        :return: The max_value of this SurvivalPensionLoadingAntecipated.  # noqa: E501
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this SurvivalPensionLoadingAntecipated.

        Percentual máximo de carregamento cobrada quando do pagamento do prêmio/ contribuição. Em %.  # noqa: E501

        :param max_value: The max_value of this SurvivalPensionLoadingAntecipated.  # noqa: E501
        :type: str
        """
        if max_value is None:
            raise ValueError("Invalid value for `max_value`, must not be `None`")  # noqa: E501

        self._max_value = max_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurvivalPensionLoadingAntecipated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurvivalPensionLoadingAntecipated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
