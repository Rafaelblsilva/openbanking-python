# coding: utf-8

"""
    API Pension - Open Finance Brasil

    API de Previdência do Open Finance Brasil – Fase 4. API que retorna informações de Previdência.   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoverageAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_value': 'InsurancePensionMinValue',
        'max_value': 'InsurancePensionMaxValue',
        'indemnifiable_period': 'RiskPensionEnumIndemnifiablePeriodType',
        'indemnifiable_deadline': 'int',
        'indemnity_payment_method': 'RiskPensionEnumIndemnityPaymentMethod',
        'grace_period': 'CoverageAttributesGracePeriod',
        'excluded_risks': 'list[EnumExcludedRisks]',
        'excluded_risks_url': 'str',
        'profit_modality': 'RiskPensionEnumProfitModality'
    }

    attribute_map = {
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'indemnifiable_period': 'indemnifiablePeriod',
        'indemnifiable_deadline': 'indemnifiableDeadline',
        'indemnity_payment_method': 'indemnityPaymentMethod',
        'grace_period': 'gracePeriod',
        'excluded_risks': 'excludedRisks',
        'excluded_risks_url': 'excludedRisksURL',
        'profit_modality': 'profitModality'
    }

    def __init__(self, min_value=None, max_value=None, indemnifiable_period=None, indemnifiable_deadline=None, indemnity_payment_method=None, grace_period=None, excluded_risks=None, excluded_risks_url=None, profit_modality=None):  # noqa: E501
        """CoverageAttributes - a model defined in Swagger"""  # noqa: E501
        self._min_value = None
        self._max_value = None
        self._indemnifiable_period = None
        self._indemnifiable_deadline = None
        self._indemnity_payment_method = None
        self._grace_period = None
        self._excluded_risks = None
        self._excluded_risks_url = None
        self._profit_modality = None
        self.discriminator = None
        self.min_value = min_value
        self.max_value = max_value
        if indemnifiable_period is not None:
            self.indemnifiable_period = indemnifiable_period
        self.indemnifiable_deadline = indemnifiable_deadline
        self.indemnity_payment_method = indemnity_payment_method
        self.grace_period = grace_period
        self.excluded_risks = excluded_risks
        self.excluded_risks_url = excluded_risks_url
        self.profit_modality = profit_modality

    @property
    def min_value(self):
        """Gets the min_value of this CoverageAttributes.  # noqa: E501


        :return: The min_value of this CoverageAttributes.  # noqa: E501
        :rtype: InsurancePensionMinValue
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this CoverageAttributes.


        :param min_value: The min_value of this CoverageAttributes.  # noqa: E501
        :type: InsurancePensionMinValue
        """
        if min_value is None:
            raise ValueError("Invalid value for `min_value`, must not be `None`")  # noqa: E501

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this CoverageAttributes.  # noqa: E501


        :return: The max_value of this CoverageAttributes.  # noqa: E501
        :rtype: InsurancePensionMaxValue
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this CoverageAttributes.


        :param max_value: The max_value of this CoverageAttributes.  # noqa: E501
        :type: InsurancePensionMaxValue
        """
        if max_value is None:
            raise ValueError("Invalid value for `max_value`, must not be `None`")  # noqa: E501

        self._max_value = max_value

    @property
    def indemnifiable_period(self):
        """Gets the indemnifiable_period of this CoverageAttributes.  # noqa: E501


        :return: The indemnifiable_period of this CoverageAttributes.  # noqa: E501
        :rtype: RiskPensionEnumIndemnifiablePeriodType
        """
        return self._indemnifiable_period

    @indemnifiable_period.setter
    def indemnifiable_period(self, indemnifiable_period):
        """Sets the indemnifiable_period of this CoverageAttributes.


        :param indemnifiable_period: The indemnifiable_period of this CoverageAttributes.  # noqa: E501
        :type: RiskPensionEnumIndemnifiablePeriodType
        """

        self._indemnifiable_period = indemnifiable_period

    @property
    def indemnifiable_deadline(self):
        """Gets the indemnifiable_deadline of this CoverageAttributes.  # noqa: E501

        Número máximo de parcelas indenizáveis. Caso seja relacionado a parcelas.  # noqa: E501

        :return: The indemnifiable_deadline of this CoverageAttributes.  # noqa: E501
        :rtype: int
        """
        return self._indemnifiable_deadline

    @indemnifiable_deadline.setter
    def indemnifiable_deadline(self, indemnifiable_deadline):
        """Sets the indemnifiable_deadline of this CoverageAttributes.

        Número máximo de parcelas indenizáveis. Caso seja relacionado a parcelas.  # noqa: E501

        :param indemnifiable_deadline: The indemnifiable_deadline of this CoverageAttributes.  # noqa: E501
        :type: int
        """
        if indemnifiable_deadline is None:
            raise ValueError("Invalid value for `indemnifiable_deadline`, must not be `None`")  # noqa: E501

        self._indemnifiable_deadline = indemnifiable_deadline

    @property
    def indemnity_payment_method(self):
        """Gets the indemnity_payment_method of this CoverageAttributes.  # noqa: E501


        :return: The indemnity_payment_method of this CoverageAttributes.  # noqa: E501
        :rtype: RiskPensionEnumIndemnityPaymentMethod
        """
        return self._indemnity_payment_method

    @indemnity_payment_method.setter
    def indemnity_payment_method(self, indemnity_payment_method):
        """Sets the indemnity_payment_method of this CoverageAttributes.


        :param indemnity_payment_method: The indemnity_payment_method of this CoverageAttributes.  # noqa: E501
        :type: RiskPensionEnumIndemnityPaymentMethod
        """
        if indemnity_payment_method is None:
            raise ValueError("Invalid value for `indemnity_payment_method`, must not be `None`")  # noqa: E501

        self._indemnity_payment_method = indemnity_payment_method

    @property
    def grace_period(self):
        """Gets the grace_period of this CoverageAttributes.  # noqa: E501


        :return: The grace_period of this CoverageAttributes.  # noqa: E501
        :rtype: CoverageAttributesGracePeriod
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this CoverageAttributes.


        :param grace_period: The grace_period of this CoverageAttributes.  # noqa: E501
        :type: CoverageAttributesGracePeriod
        """
        if grace_period is None:
            raise ValueError("Invalid value for `grace_period`, must not be `None`")  # noqa: E501

        self._grace_period = grace_period

    @property
    def excluded_risks(self):
        """Gets the excluded_risks of this CoverageAttributes.  # noqa: E501


        :return: The excluded_risks of this CoverageAttributes.  # noqa: E501
        :rtype: list[EnumExcludedRisks]
        """
        return self._excluded_risks

    @excluded_risks.setter
    def excluded_risks(self, excluded_risks):
        """Sets the excluded_risks of this CoverageAttributes.


        :param excluded_risks: The excluded_risks of this CoverageAttributes.  # noqa: E501
        :type: list[EnumExcludedRisks]
        """
        if excluded_risks is None:
            raise ValueError("Invalid value for `excluded_risks`, must not be `None`")  # noqa: E501

        self._excluded_risks = excluded_risks

    @property
    def excluded_risks_url(self):
        """Gets the excluded_risks_url of this CoverageAttributes.  # noqa: E501

        Campo aberto (possibilidade de incluir URL).  # noqa: E501

        :return: The excluded_risks_url of this CoverageAttributes.  # noqa: E501
        :rtype: str
        """
        return self._excluded_risks_url

    @excluded_risks_url.setter
    def excluded_risks_url(self, excluded_risks_url):
        """Sets the excluded_risks_url of this CoverageAttributes.

        Campo aberto (possibilidade de incluir URL).  # noqa: E501

        :param excluded_risks_url: The excluded_risks_url of this CoverageAttributes.  # noqa: E501
        :type: str
        """
        if excluded_risks_url is None:
            raise ValueError("Invalid value for `excluded_risks_url`, must not be `None`")  # noqa: E501

        self._excluded_risks_url = excluded_risks_url

    @property
    def profit_modality(self):
        """Gets the profit_modality of this CoverageAttributes.  # noqa: E501


        :return: The profit_modality of this CoverageAttributes.  # noqa: E501
        :rtype: RiskPensionEnumProfitModality
        """
        return self._profit_modality

    @profit_modality.setter
    def profit_modality(self, profit_modality):
        """Sets the profit_modality of this CoverageAttributes.


        :param profit_modality: The profit_modality of this CoverageAttributes.  # noqa: E501
        :type: RiskPensionEnumProfitModality
        """
        if profit_modality is None:
            raise ValueError("Invalid value for `profit_modality`, must not be `None`")  # noqa: E501

        self._profit_modality = profit_modality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoverageAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoverageAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
