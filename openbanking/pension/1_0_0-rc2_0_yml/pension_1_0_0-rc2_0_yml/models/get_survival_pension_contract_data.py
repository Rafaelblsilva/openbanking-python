# coding: utf-8

"""
    API Pension - Open Finance Brasil

    API de Previdência do Open Finance Brasil – Fase 4. API que retorna informações de Previdência.   # noqa: E501

    OpenAPI spec version: 1.0.0-rc2.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSurvivalPensionContractData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant': 'GetRiskPensionContractDatapropertiesparticipant',
        'society': 'GetRiskPensionContractDatapropertiessociety',
        'name': 'str',
        'code': 'str',
        'segment': 'str',
        'modality': 'str',
        'additional_info': 'str',
        'terms_and_conditions': 'list[TermsAndConditions]',
        'type': 'SurvivalPensionType',
        'defferal_period': 'SurvivalPensionDefferalPeriod',
        'grant_period_benefit': 'SurvivalPensionGrantPeriodBenefit',
        'costs': 'SurvivalPensionCosts',
        'minimum_requirement': 'SurvivalPensionMinimumRequirements',
        'target_audience': 'SurvivalPensionEnumTargetAudience'
    }

    attribute_map = {
        'participant': 'participant',
        'society': 'society',
        'name': 'name',
        'code': 'code',
        'segment': 'segment',
        'modality': 'modality',
        'additional_info': 'additionalInfo',
        'terms_and_conditions': 'termsAndConditions',
        'type': 'type',
        'defferal_period': 'defferalPeriod',
        'grant_period_benefit': 'grantPeriodBenefit',
        'costs': 'costs',
        'minimum_requirement': 'minimumRequirement',
        'target_audience': 'targetAudience'
    }

    def __init__(self, participant=None, society=None, name=None, code=None, segment=None, modality=None, additional_info=None, terms_and_conditions=None, type=None, defferal_period=None, grant_period_benefit=None, costs=None, minimum_requirement=None, target_audience=None):  # noqa: E501
        """GetSurvivalPensionContractData - a model defined in Swagger"""  # noqa: E501
        self._participant = None
        self._society = None
        self._name = None
        self._code = None
        self._segment = None
        self._modality = None
        self._additional_info = None
        self._terms_and_conditions = None
        self._type = None
        self._defferal_period = None
        self._grant_period_benefit = None
        self._costs = None
        self._minimum_requirement = None
        self._target_audience = None
        self.discriminator = None
        self.participant = participant
        if society is not None:
            self.society = society
        self.name = name
        self.code = code
        self.segment = segment
        self.modality = modality
        if additional_info is not None:
            self.additional_info = additional_info
        if terms_and_conditions is not None:
            self.terms_and_conditions = terms_and_conditions
        if type is not None:
            self.type = type
        self.defferal_period = defferal_period
        self.grant_period_benefit = grant_period_benefit
        self.costs = costs
        if minimum_requirement is not None:
            self.minimum_requirement = minimum_requirement
        self.target_audience = target_audience

    @property
    def participant(self):
        """Gets the participant of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The participant of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: GetRiskPensionContractDatapropertiesparticipant
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this GetSurvivalPensionContractData.


        :param participant: The participant of this GetSurvivalPensionContractData.  # noqa: E501
        :type: GetRiskPensionContractDatapropertiesparticipant
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def society(self):
        """Gets the society of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The society of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: GetRiskPensionContractDatapropertiessociety
        """
        return self._society

    @society.setter
    def society(self, society):
        """Sets the society of this GetSurvivalPensionContractData.


        :param society: The society of this GetSurvivalPensionContractData.  # noqa: E501
        :type: GetRiskPensionContractDatapropertiessociety
        """

        self._society = society

    @property
    def name(self):
        """Gets the name of this GetSurvivalPensionContractData.  # noqa: E501

        Nome comercial do produto, pelo qual é identificado nos canais de distribuição e atendimento da sociedade.   # noqa: E501

        :return: The name of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSurvivalPensionContractData.

        Nome comercial do produto, pelo qual é identificado nos canais de distribuição e atendimento da sociedade.   # noqa: E501

        :param name: The name of this GetSurvivalPensionContractData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this GetSurvivalPensionContractData.  # noqa: E501

        Código único a ser definido pela sociedade.   # noqa: E501

        :return: The code of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetSurvivalPensionContractData.

        Código único a ser definido pela sociedade.   # noqa: E501

        :param code: The code of this GetSurvivalPensionContractData.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def segment(self):
        """Gets the segment of this GetSurvivalPensionContractData.  # noqa: E501

        Segmento do qual se trata o produto contratado 1. Seguro de Pessoas 2. Previdência   # noqa: E501

        :return: The segment of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this GetSurvivalPensionContractData.

        Segmento do qual se trata o produto contratado 1. Seguro de Pessoas 2. Previdência   # noqa: E501

        :param segment: The segment of this GetSurvivalPensionContractData.  # noqa: E501
        :type: str
        """
        if segment is None:
            raise ValueError("Invalid value for `segment`, must not be `None`")  # noqa: E501
        allowed_values = ["SEGURO_PESSOAS", "PREVIDENCIA"]  # noqa: E501
        if segment not in allowed_values:
            raise ValueError(
                "Invalid value for `segment` ({0}), must be one of {1}"  # noqa: E501
                .format(segment, allowed_values)
            )

        self._segment = segment

    @property
    def modality(self):
        """Gets the modality of this GetSurvivalPensionContractData.  # noqa: E501

        1. Contribuição Variável; 2. Benefício Definido.   # noqa: E501

        :return: The modality of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: str
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this GetSurvivalPensionContractData.

        1. Contribuição Variável; 2. Benefício Definido.   # noqa: E501

        :param modality: The modality of this GetSurvivalPensionContractData.  # noqa: E501
        :type: str
        """
        if modality is None:
            raise ValueError("Invalid value for `modality`, must not be `None`")  # noqa: E501
        allowed_values = ["CONTRIBUICAO_VARIAVEL", "BENEFICIO_DEFINIDO"]  # noqa: E501
        if modality not in allowed_values:
            raise ValueError(
                "Invalid value for `modality` ({0}), must be one of {1}"  # noqa: E501
                .format(modality, allowed_values)
            )

        self._modality = modality

    @property
    def additional_info(self):
        """Gets the additional_info of this GetSurvivalPensionContractData.  # noqa: E501

        Campo aberto (possibilidade de incluir URL)  # noqa: E501

        :return: The additional_info of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this GetSurvivalPensionContractData.

        Campo aberto (possibilidade de incluir URL)  # noqa: E501

        :param additional_info: The additional_info of this GetSurvivalPensionContractData.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The terms_and_conditions of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: list[TermsAndConditions]
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this GetSurvivalPensionContractData.


        :param terms_and_conditions: The terms_and_conditions of this GetSurvivalPensionContractData.  # noqa: E501
        :type: list[TermsAndConditions]
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def type(self):
        """Gets the type of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The type of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: SurvivalPensionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetSurvivalPensionContractData.


        :param type: The type of this GetSurvivalPensionContractData.  # noqa: E501
        :type: SurvivalPensionType
        """

        self._type = type

    @property
    def defferal_period(self):
        """Gets the defferal_period of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The defferal_period of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: SurvivalPensionDefferalPeriod
        """
        return self._defferal_period

    @defferal_period.setter
    def defferal_period(self, defferal_period):
        """Sets the defferal_period of this GetSurvivalPensionContractData.


        :param defferal_period: The defferal_period of this GetSurvivalPensionContractData.  # noqa: E501
        :type: SurvivalPensionDefferalPeriod
        """
        if defferal_period is None:
            raise ValueError("Invalid value for `defferal_period`, must not be `None`")  # noqa: E501

        self._defferal_period = defferal_period

    @property
    def grant_period_benefit(self):
        """Gets the grant_period_benefit of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The grant_period_benefit of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: SurvivalPensionGrantPeriodBenefit
        """
        return self._grant_period_benefit

    @grant_period_benefit.setter
    def grant_period_benefit(self, grant_period_benefit):
        """Sets the grant_period_benefit of this GetSurvivalPensionContractData.


        :param grant_period_benefit: The grant_period_benefit of this GetSurvivalPensionContractData.  # noqa: E501
        :type: SurvivalPensionGrantPeriodBenefit
        """
        if grant_period_benefit is None:
            raise ValueError("Invalid value for `grant_period_benefit`, must not be `None`")  # noqa: E501

        self._grant_period_benefit = grant_period_benefit

    @property
    def costs(self):
        """Gets the costs of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The costs of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: SurvivalPensionCosts
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this GetSurvivalPensionContractData.


        :param costs: The costs of this GetSurvivalPensionContractData.  # noqa: E501
        :type: SurvivalPensionCosts
        """
        if costs is None:
            raise ValueError("Invalid value for `costs`, must not be `None`")  # noqa: E501

        self._costs = costs

    @property
    def minimum_requirement(self):
        """Gets the minimum_requirement of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The minimum_requirement of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: SurvivalPensionMinimumRequirements
        """
        return self._minimum_requirement

    @minimum_requirement.setter
    def minimum_requirement(self, minimum_requirement):
        """Sets the minimum_requirement of this GetSurvivalPensionContractData.


        :param minimum_requirement: The minimum_requirement of this GetSurvivalPensionContractData.  # noqa: E501
        :type: SurvivalPensionMinimumRequirements
        """

        self._minimum_requirement = minimum_requirement

    @property
    def target_audience(self):
        """Gets the target_audience of this GetSurvivalPensionContractData.  # noqa: E501


        :return: The target_audience of this GetSurvivalPensionContractData.  # noqa: E501
        :rtype: SurvivalPensionEnumTargetAudience
        """
        return self._target_audience

    @target_audience.setter
    def target_audience(self, target_audience):
        """Sets the target_audience of this GetSurvivalPensionContractData.


        :param target_audience: The target_audience of this GetSurvivalPensionContractData.  # noqa: E501
        :type: SurvivalPensionEnumTargetAudience
        """
        if target_audience is None:
            raise ValueError("Invalid value for `target_audience`, must not be `None`")  # noqa: E501

        self._target_audience = target_audience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSurvivalPensionContractData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSurvivalPensionContractData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
