# coding: utf-8

"""
    API Variable Incomes - Open Finance Brasil

    API de informações de operações de Renda Variável Open Finance Brasil – Fase 4.  API que retorna informações de operações de investimento do tipo Renda Variável mantidas nas instituições transmissoras por seus clientes, incluindo dados como informações do produto, quantidade, saldos em posição do cliente, movimentações financeiras e detalhes da nota de negociação.  Não possui segregação entre pessoa natural e pessoa jurídica. Requer consentimento do cliente para todos os endpoints. A granularidade de exposição de operações de renda variável se dá por cada ativo (ticker) da carteira do cliente. Segue abaixo tabela com o escopo de produtos a ser considerado para compartilhamento:  ```    |----------------------|-------------------------------|----------------------|-----------------------------------|    | CLASSE DE ATIVOS     | PRODUTO                       | SUBPRODUTO           | DENOMINAÇÃO                       |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de Investimentos       |     -                | FIAGRO                            |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Ações                         | Subscrição           | Bonus / Direito / Recibo          |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de Investimentos       | Fundo imobiliario    | FII                               |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Ações                         | À vista              | ON / PN / UNIT                    |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de índices             | ETF                  | ETF de Renda Variável             |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de índices             | ETF                  | ETF Internacional                 |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de índices             | ETF Renda Fixa       | ETF Renda Fixa                    |    |----------------------|-------------------------------|----------------------|-----------------------------------|    ```   # noqa: E501

    OpenAPI spec version: 1.0.0-rc1.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseVariableIncomesBrokerData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'broker_note_number': 'str',
        'gross_value': 'ResponseVariableIncomesBrokerDataGrossValue',
        'brokerage_fee': 'ResponseVariableIncomesBrokerDataBrokerageFee',
        'clearing_settlement_fee': 'ResponseVariableIncomesBrokerDataClearingSettlementFee',
        'clearing_registration_fee': 'ResponseVariableIncomesBrokerDataClearingRegistrationFee',
        'stock_exchange_asset_trade_notice_fee': 'ResponseVariableIncomesBrokerDataStockExchangeAssetTradeNoticeFee',
        'stock_exchange_fee': 'ResponseVariableIncomesBrokerDataStockExchangeFee',
        'clearing_custody_fee': 'ResponseVariableIncomesBrokerDataClearingCustodyFee',
        'taxes': 'ResponseVariableIncomesBrokerDataTaxes',
        'income_tax': 'ResponseVariableIncomesBrokerDataIncomeTax',
        'net_value': 'ResponseVariableIncomesBrokerDataNetValue'
    }

    attribute_map = {
        'broker_note_number': 'brokerNoteNumber',
        'gross_value': 'grossValue',
        'brokerage_fee': 'brokerageFee',
        'clearing_settlement_fee': 'clearingSettlementFee',
        'clearing_registration_fee': 'clearingRegistrationFee',
        'stock_exchange_asset_trade_notice_fee': 'stockExchangeAssetTradeNoticeFee',
        'stock_exchange_fee': 'stockExchangeFee',
        'clearing_custody_fee': 'clearingCustodyFee',
        'taxes': 'taxes',
        'income_tax': 'incomeTax',
        'net_value': 'netValue'
    }

    def __init__(self, broker_note_number=None, gross_value=None, brokerage_fee=None, clearing_settlement_fee=None, clearing_registration_fee=None, stock_exchange_asset_trade_notice_fee=None, stock_exchange_fee=None, clearing_custody_fee=None, taxes=None, income_tax=None, net_value=None):  # noqa: E501
        """ResponseVariableIncomesBrokerData - a model defined in Swagger"""  # noqa: E501
        self._broker_note_number = None
        self._gross_value = None
        self._brokerage_fee = None
        self._clearing_settlement_fee = None
        self._clearing_registration_fee = None
        self._stock_exchange_asset_trade_notice_fee = None
        self._stock_exchange_fee = None
        self._clearing_custody_fee = None
        self._taxes = None
        self._income_tax = None
        self._net_value = None
        self.discriminator = None
        self.broker_note_number = broker_note_number
        self.gross_value = gross_value
        self.brokerage_fee = brokerage_fee
        self.clearing_settlement_fee = clearing_settlement_fee
        self.clearing_registration_fee = clearing_registration_fee
        self.stock_exchange_asset_trade_notice_fee = stock_exchange_asset_trade_notice_fee
        self.stock_exchange_fee = stock_exchange_fee
        self.clearing_custody_fee = clearing_custody_fee
        self.taxes = taxes
        self.income_tax = income_tax
        self.net_value = net_value

    @property
    def broker_note_number(self):
        """Gets the broker_note_number of this ResponseVariableIncomesBrokerData.  # noqa: E501

        Identificador da nota de negociação.  # noqa: E501

        :return: The broker_note_number of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: str
        """
        return self._broker_note_number

    @broker_note_number.setter
    def broker_note_number(self, broker_note_number):
        """Sets the broker_note_number of this ResponseVariableIncomesBrokerData.

        Identificador da nota de negociação.  # noqa: E501

        :param broker_note_number: The broker_note_number of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: str
        """
        if broker_note_number is None:
            raise ValueError("Invalid value for `broker_note_number`, must not be `None`")  # noqa: E501

        self._broker_note_number = broker_note_number

    @property
    def gross_value(self):
        """Gets the gross_value of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The gross_value of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataGrossValue
        """
        return self._gross_value

    @gross_value.setter
    def gross_value(self, gross_value):
        """Sets the gross_value of this ResponseVariableIncomesBrokerData.


        :param gross_value: The gross_value of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataGrossValue
        """
        if gross_value is None:
            raise ValueError("Invalid value for `gross_value`, must not be `None`")  # noqa: E501

        self._gross_value = gross_value

    @property
    def brokerage_fee(self):
        """Gets the brokerage_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The brokerage_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataBrokerageFee
        """
        return self._brokerage_fee

    @brokerage_fee.setter
    def brokerage_fee(self, brokerage_fee):
        """Sets the brokerage_fee of this ResponseVariableIncomesBrokerData.


        :param brokerage_fee: The brokerage_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataBrokerageFee
        """
        if brokerage_fee is None:
            raise ValueError("Invalid value for `brokerage_fee`, must not be `None`")  # noqa: E501

        self._brokerage_fee = brokerage_fee

    @property
    def clearing_settlement_fee(self):
        """Gets the clearing_settlement_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The clearing_settlement_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataClearingSettlementFee
        """
        return self._clearing_settlement_fee

    @clearing_settlement_fee.setter
    def clearing_settlement_fee(self, clearing_settlement_fee):
        """Sets the clearing_settlement_fee of this ResponseVariableIncomesBrokerData.


        :param clearing_settlement_fee: The clearing_settlement_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataClearingSettlementFee
        """
        if clearing_settlement_fee is None:
            raise ValueError("Invalid value for `clearing_settlement_fee`, must not be `None`")  # noqa: E501

        self._clearing_settlement_fee = clearing_settlement_fee

    @property
    def clearing_registration_fee(self):
        """Gets the clearing_registration_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The clearing_registration_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataClearingRegistrationFee
        """
        return self._clearing_registration_fee

    @clearing_registration_fee.setter
    def clearing_registration_fee(self, clearing_registration_fee):
        """Sets the clearing_registration_fee of this ResponseVariableIncomesBrokerData.


        :param clearing_registration_fee: The clearing_registration_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataClearingRegistrationFee
        """
        if clearing_registration_fee is None:
            raise ValueError("Invalid value for `clearing_registration_fee`, must not be `None`")  # noqa: E501

        self._clearing_registration_fee = clearing_registration_fee

    @property
    def stock_exchange_asset_trade_notice_fee(self):
        """Gets the stock_exchange_asset_trade_notice_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The stock_exchange_asset_trade_notice_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataStockExchangeAssetTradeNoticeFee
        """
        return self._stock_exchange_asset_trade_notice_fee

    @stock_exchange_asset_trade_notice_fee.setter
    def stock_exchange_asset_trade_notice_fee(self, stock_exchange_asset_trade_notice_fee):
        """Sets the stock_exchange_asset_trade_notice_fee of this ResponseVariableIncomesBrokerData.


        :param stock_exchange_asset_trade_notice_fee: The stock_exchange_asset_trade_notice_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataStockExchangeAssetTradeNoticeFee
        """
        if stock_exchange_asset_trade_notice_fee is None:
            raise ValueError("Invalid value for `stock_exchange_asset_trade_notice_fee`, must not be `None`")  # noqa: E501

        self._stock_exchange_asset_trade_notice_fee = stock_exchange_asset_trade_notice_fee

    @property
    def stock_exchange_fee(self):
        """Gets the stock_exchange_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The stock_exchange_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataStockExchangeFee
        """
        return self._stock_exchange_fee

    @stock_exchange_fee.setter
    def stock_exchange_fee(self, stock_exchange_fee):
        """Sets the stock_exchange_fee of this ResponseVariableIncomesBrokerData.


        :param stock_exchange_fee: The stock_exchange_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataStockExchangeFee
        """
        if stock_exchange_fee is None:
            raise ValueError("Invalid value for `stock_exchange_fee`, must not be `None`")  # noqa: E501

        self._stock_exchange_fee = stock_exchange_fee

    @property
    def clearing_custody_fee(self):
        """Gets the clearing_custody_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The clearing_custody_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataClearingCustodyFee
        """
        return self._clearing_custody_fee

    @clearing_custody_fee.setter
    def clearing_custody_fee(self, clearing_custody_fee):
        """Sets the clearing_custody_fee of this ResponseVariableIncomesBrokerData.


        :param clearing_custody_fee: The clearing_custody_fee of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataClearingCustodyFee
        """
        if clearing_custody_fee is None:
            raise ValueError("Invalid value for `clearing_custody_fee`, must not be `None`")  # noqa: E501

        self._clearing_custody_fee = clearing_custody_fee

    @property
    def taxes(self):
        """Gets the taxes of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The taxes of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataTaxes
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this ResponseVariableIncomesBrokerData.


        :param taxes: The taxes of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataTaxes
        """
        if taxes is None:
            raise ValueError("Invalid value for `taxes`, must not be `None`")  # noqa: E501

        self._taxes = taxes

    @property
    def income_tax(self):
        """Gets the income_tax of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The income_tax of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataIncomeTax
        """
        return self._income_tax

    @income_tax.setter
    def income_tax(self, income_tax):
        """Sets the income_tax of this ResponseVariableIncomesBrokerData.


        :param income_tax: The income_tax of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataIncomeTax
        """
        if income_tax is None:
            raise ValueError("Invalid value for `income_tax`, must not be `None`")  # noqa: E501

        self._income_tax = income_tax

    @property
    def net_value(self):
        """Gets the net_value of this ResponseVariableIncomesBrokerData.  # noqa: E501


        :return: The net_value of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :rtype: ResponseVariableIncomesBrokerDataNetValue
        """
        return self._net_value

    @net_value.setter
    def net_value(self, net_value):
        """Sets the net_value of this ResponseVariableIncomesBrokerData.


        :param net_value: The net_value of this ResponseVariableIncomesBrokerData.  # noqa: E501
        :type: ResponseVariableIncomesBrokerDataNetValue
        """
        if net_value is None:
            raise ValueError("Invalid value for `net_value`, must not be `None`")  # noqa: E501

        self._net_value = net_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseVariableIncomesBrokerData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVariableIncomesBrokerData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
