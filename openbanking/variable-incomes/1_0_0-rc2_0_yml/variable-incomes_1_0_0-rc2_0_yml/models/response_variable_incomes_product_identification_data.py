# coding: utf-8

"""
    API Variable Incomes - Open Finance Brasil

    API de informações de operações de Renda Variável Open Finance Brasil – Fase 4.  API que retorna informações de operações de investimento do tipo Renda Variável mantidas nas instituições transmissoras por seus clientes, incluindo dados como informações do produto, quantidade, saldos em posição do cliente, movimentações financeiras e detalhes da nota de negociação.  Não possui segregação entre pessoa natural e pessoa jurídica. Requer consentimento do cliente para todos os endpoints.  A granularidade de exposição de operações de renda variável se dá por cada ativo (ticker) da carteira do cliente.  Ações escriturais não fazem parte do escopo do Open Finance Brasil.  Operações de day trade devem ser incluídas nos endpoints.  Segue abaixo tabela com o escopo de produtos a ser considerado para compartilhamento:  ```    |----------------------|-------------------------------|----------------------|-----------------------------------|    | CLASSE DE ATIVOS     | PRODUTO                       | SUBPRODUTO           | DENOMINAÇÃO                       |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de Investimentos       |     -                | FIAGRO                            |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Ações                         | Subscrição           | Bonus / Direito / Recibo          |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de Investimentos       | Fundo imobiliario    | FII                               |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Ações                         | À vista              | ON / PN / UNIT                    |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de índices             | ETF                  | ETF de Renda Variável             |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de índices             | ETF                  | ETF Internacional                 |    |----------------------|-------------------------------|----------------------|-----------------------------------|    | Renda Variável       | Fundos de índices             | ETF Renda Fixa       | ETF Renda Fixa                    |    |----------------------|-------------------------------|----------------------|-----------------------------------|    ```   # noqa: E501

    OpenAPI spec version: 1.0.0-rc2.0
    Contact: gt-interfaces@openbankingbr.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseVariableIncomesProductIdentificationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer_institution_cnpj_number': 'str',
        'isin_code': 'str',
        'ticker': 'str'
    }

    attribute_map = {
        'issuer_institution_cnpj_number': 'issuerInstitutionCnpjNumber',
        'isin_code': 'isinCode',
        'ticker': 'ticker'
    }

    def __init__(self, issuer_institution_cnpj_number=None, isin_code=None, ticker=None):  # noqa: E501
        """ResponseVariableIncomesProductIdentificationData - a model defined in Swagger"""  # noqa: E501
        self._issuer_institution_cnpj_number = None
        self._isin_code = None
        self._ticker = None
        self.discriminator = None
        self.issuer_institution_cnpj_number = issuer_institution_cnpj_number
        self.isin_code = isin_code
        self.ticker = ticker

    @property
    def issuer_institution_cnpj_number(self):
        """Gets the issuer_institution_cnpj_number of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501

        CNPJ da instituição emissora.  # noqa: E501

        :return: The issuer_institution_cnpj_number of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._issuer_institution_cnpj_number

    @issuer_institution_cnpj_number.setter
    def issuer_institution_cnpj_number(self, issuer_institution_cnpj_number):
        """Sets the issuer_institution_cnpj_number of this ResponseVariableIncomesProductIdentificationData.

        CNPJ da instituição emissora.  # noqa: E501

        :param issuer_institution_cnpj_number: The issuer_institution_cnpj_number of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501
        :type: str
        """
        if issuer_institution_cnpj_number is None:
            raise ValueError("Invalid value for `issuer_institution_cnpj_number`, must not be `None`")  # noqa: E501

        self._issuer_institution_cnpj_number = issuer_institution_cnpj_number

    @property
    def isin_code(self):
        """Gets the isin_code of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501

        Código ISIN da emissão, Código ISIN do produto, Código da emissora: código universal que identifica cada valor mobiliário ou instrumento financeiro, conforme Norma ISO 6166.   # noqa: E501

        :return: The isin_code of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._isin_code

    @isin_code.setter
    def isin_code(self, isin_code):
        """Sets the isin_code of this ResponseVariableIncomesProductIdentificationData.

        Código ISIN da emissão, Código ISIN do produto, Código da emissora: código universal que identifica cada valor mobiliário ou instrumento financeiro, conforme Norma ISO 6166.   # noqa: E501

        :param isin_code: The isin_code of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501
        :type: str
        """
        if isin_code is None:
            raise ValueError("Invalid value for `isin_code`, must not be `None`")  # noqa: E501

        self._isin_code = isin_code

    @property
    def ticker(self):
        """Gets the ticker of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501

        Código de negociação para identificação de ativos negociados em bolsa.  # noqa: E501

        :return: The ticker of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this ResponseVariableIncomesProductIdentificationData.

        Código de negociação para identificação de ativos negociados em bolsa.  # noqa: E501

        :param ticker: The ticker of this ResponseVariableIncomesProductIdentificationData.  # noqa: E501
        :type: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseVariableIncomesProductIdentificationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVariableIncomesProductIdentificationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
